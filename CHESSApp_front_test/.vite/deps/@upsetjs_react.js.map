{
  "version": 3,
  "sources": ["../../node_modules/lz-string/libs/lz-string.js", "../../node_modules/@upsetjs/model/src/data/setOverlap.ts", "../../node_modules/@upsetjs/model/src/queries.ts", "../../node_modules/@upsetjs/model/src/validators.ts", "../../node_modules/@upsetjs/model/src/data/utils.ts", "../../node_modules/@upsetjs/model/src/data/asCombinations.ts", "../../node_modules/@upsetjs/model/src/data/constants.ts", "../../node_modules/@upsetjs/model/src/colors.ts", "../../node_modules/@upsetjs/model/src/data/generateCombinations.ts", "../../node_modules/@upsetjs/model/src/data/asSets.ts", "../../node_modules/@upsetjs/model/src/data/extractFromExpression.ts", "../../node_modules/@upsetjs/model/src/data/extractSets.ts", "../../node_modules/@upsetjs/model/src/data/extractCombinations.ts", "../../node_modules/@upsetjs/model/src/model.ts", "../../node_modules/@upsetjs/model/src/data/generateOverlapFunction.ts", "../../node_modules/@upsetjs/model/src/data/generateOverlapLookup.ts", "../../node_modules/@upsetjs/model/src/scales/band.ts", "../../node_modules/@upsetjs/model/src/scales/numeric.ts", "../../node_modules/@upsetjs/model/src/scales/linear.ts", "../../node_modules/@upsetjs/model/src/scales/log.ts", "../../node_modules/@upsetjs/model/src/array.ts", "../../node_modules/@upsetjs/model/src/dump/utils.ts", "../../node_modules/@upsetjs/model/src/dump/dump.ts", "../../node_modules/@upsetjs/model/src/dump/staticDump.ts", "../../node_modules/@upsetjs/react/src/exporter/utils.ts", "../../node_modules/@upsetjs/react/src/defaults.ts", "../../node_modules/@upsetjs/react/src/venn/layout/interfaces.ts", "../../node_modules/@upsetjs/react/src/venn/layout/vennDiagramLayout.ts", "../../node_modules/@upsetjs/react/src/fillDefaults.tsx", "../../node_modules/@upsetjs/react/src/exporter/exportSVG.ts", "../../node_modules/@upsetjs/react/src/exporter/exportVegaLite.ts", "../../node_modules/@upsetjs/react/src/dump/index.ts", "../../node_modules/@upsetjs/react/src/exporter/exportDump.ts", "../../node_modules/@upsetjs/react/src/utils.ts", "../../node_modules/@upsetjs/react/src/derive/deriveDataDependent.ts", "../../node_modules/@upsetjs/react/src/derive/deriveSizeDependent.ts", "../../node_modules/@upsetjs/react/src/derive/deriveStyleDependent.ts", "../../node_modules/@upsetjs/react/src/components/ExportButtons.tsx", "../../node_modules/@upsetjs/react/src/components/QueryLegend.tsx", "../../node_modules/@upsetjs/react/src/components/Axis.tsx", "../../node_modules/@upsetjs/react/src/components/UpSetTitle.tsx", "../../node_modules/@upsetjs/react/src/components/utils.ts", "../../node_modules/@upsetjs/react/src/components/UpSetAxis.tsx", "../../node_modules/@upsetjs/react/src/components/UpSetDot.tsx", "../../node_modules/@upsetjs/react/src/components/CombinationChart.tsx", "../../node_modules/@upsetjs/react/src/components/SetChart.tsx", "../../node_modules/@upsetjs/react/src/components/UpSetChart.tsx", "../../node_modules/@upsetjs/react/src/components/CombinationSelectionChart.tsx", "../../node_modules/@upsetjs/react/src/components/SetSelectionChart.tsx", "../../node_modules/@upsetjs/react/src/components/UpSetQueries.tsx", "../../node_modules/@upsetjs/react/src/components/LabelsSelection.tsx", "../../node_modules/@upsetjs/react/src/components/UpSetSelectionChart.tsx", "../../node_modules/@upsetjs/react/src/components/UpSetSelection.tsx", "../../node_modules/@upsetjs/react/src/rules.ts", "../../node_modules/@upsetjs/react/src/hooks/useHandler.ts", "../../node_modules/@upsetjs/react/src/UpSetJS.tsx", "../../node_modules/@upsetjs/react/src/venn/components/SVGWrapper.tsx", "../../node_modules/@upsetjs/react/src/venn/layout/generate.ts", "../../node_modules/@upsetjs/react/src/venn/components/SelectionPattern.tsx", "../../node_modules/@upsetjs/react/src/venn/components/VennArcSliceSelection.tsx", "../../node_modules/@upsetjs/react/src/venn/derive/deriveVennDataDependent.ts", "../../node_modules/@upsetjs/react/src/venn/derive/deriveVennSizeDependent.ts", "../../node_modules/@upsetjs/react/src/venn/derive/deriveVennStyleDependent.ts", "../../node_modules/@upsetjs/react/src/venn/hooks/index.ts", "../../node_modules/@upsetjs/react/src/venn/VennDiagram.tsx", "../../node_modules/@upsetjs/react/src/kmap/components/KMapCell.tsx", "../../node_modules/@upsetjs/react/src/kmap/components/KMapChart.tsx", "../../node_modules/@upsetjs/react/src/kmap/components/KMapSelectionChart.tsx", "../../node_modules/@upsetjs/react/src/kmap/components/KMapQueries.tsx", "../../node_modules/@upsetjs/react/src/kmap/components/KMapSelection.tsx", "../../node_modules/@upsetjs/react/src/kmap/layout/index.ts", "../../node_modules/@upsetjs/react/src/kmap/derive/deriveDataDependent.ts", "../../node_modules/@upsetjs/react/src/kmap/derive/deriveStyleDependent.ts", "../../node_modules/@upsetjs/react/src/kmap/KarnaughMap.tsx", "../../node_modules/@upsetjs/react/src/UpSetJSSkeleton.tsx", "../../node_modules/@upsetjs/react/src/venn/VennDiagramSkeleton.tsx", "../../node_modules/@upsetjs/react/src/kmap/KarnaughMapSkeleton.tsx", "../../node_modules/@upsetjs/react/src/venn/layout/math.ts", "../../node_modules/@upsetjs/react/src/venn/layout/vennjsAdapter.ts", "../../node_modules/@upsetjs/react/src/validators.ts"],
  "sourcesContent": ["// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>\n// This work is free. You can redistribute it and/or modify it\n// under the terms of the WTFPL, Version 2\n// For more information see LICENSE.txt or http://www.wtfpl.net/\n//\n// For more information, the home page:\n// http://pieroxy.net/blog/pages/lz-string/testing.html\n//\n// LZ-based compression algorithm, version 1.4.5\nvar LZString = (function() {\n\n// private property\nvar f = String.fromCharCode;\nvar keyStrBase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nvar keyStrUriSafe = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\";\nvar baseReverseDic = {};\n\nfunction getBaseValue(alphabet, character) {\n  if (!baseReverseDic[alphabet]) {\n    baseReverseDic[alphabet] = {};\n    for (var i=0 ; i<alphabet.length ; i++) {\n      baseReverseDic[alphabet][alphabet.charAt(i)] = i;\n    }\n  }\n  return baseReverseDic[alphabet][character];\n}\n\nvar LZString = {\n  compressToBase64 : function (input) {\n    if (input == null) return \"\";\n    var res = LZString._compress(input, 6, function(a){return keyStrBase64.charAt(a);});\n    switch (res.length % 4) { // To produce valid Base64\n    default: // When could this happen ?\n    case 0 : return res;\n    case 1 : return res+\"===\";\n    case 2 : return res+\"==\";\n    case 3 : return res+\"=\";\n    }\n  },\n\n  decompressFromBase64 : function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrBase64, input.charAt(index)); });\n  },\n\n  compressToUTF16 : function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 15, function(a){return f(a+32);}) + \" \";\n  },\n\n  decompressFromUTF16: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 16384, function(index) { return compressed.charCodeAt(index) - 32; });\n  },\n\n  //compress into uint8array (UCS-2 big endian format)\n  compressToUint8Array: function (uncompressed) {\n    var compressed = LZString.compress(uncompressed);\n    var buf=new Uint8Array(compressed.length*2); // 2 bytes per character\n\n    for (var i=0, TotalLen=compressed.length; i<TotalLen; i++) {\n      var current_value = compressed.charCodeAt(i);\n      buf[i*2] = current_value >>> 8;\n      buf[i*2+1] = current_value % 256;\n    }\n    return buf;\n  },\n\n  //decompress from uint8array (UCS-2 big endian format)\n  decompressFromUint8Array:function (compressed) {\n    if (compressed===null || compressed===undefined){\n        return LZString.decompress(compressed);\n    } else {\n        var buf=new Array(compressed.length/2); // 2 bytes per character\n        for (var i=0, TotalLen=buf.length; i<TotalLen; i++) {\n          buf[i]=compressed[i*2]*256+compressed[i*2+1];\n        }\n\n        var result = [];\n        buf.forEach(function (c) {\n          result.push(f(c));\n        });\n        return LZString.decompress(result.join(''));\n\n    }\n\n  },\n\n\n  //compress into a string that is already URI encoded\n  compressToEncodedURIComponent: function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});\n  },\n\n  //decompress from an output of compressToEncodedURIComponent\n  decompressFromEncodedURIComponent:function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    input = input.replace(/ /g, \"+\");\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrUriSafe, input.charAt(index)); });\n  },\n\n  compress: function (uncompressed) {\n    return LZString._compress(uncompressed, 16, function(a){return f(a);});\n  },\n  _compress: function (uncompressed, bitsPerChar, getCharFromInt) {\n    if (uncompressed == null) return \"\";\n    var i, value,\n        context_dictionary= {},\n        context_dictionaryToCreate= {},\n        context_c=\"\",\n        context_wc=\"\",\n        context_w=\"\",\n        context_enlargeIn= 2, // Compensate for the first entry which should not count\n        context_dictSize= 3,\n        context_numBits= 2,\n        context_data=[],\n        context_data_val=0,\n        context_data_position=0,\n        ii;\n\n    for (ii = 0; ii < uncompressed.length; ii += 1) {\n      context_c = uncompressed.charAt(ii);\n      if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {\n        context_dictionary[context_c] = context_dictSize++;\n        context_dictionaryToCreate[context_c] = true;\n      }\n\n      context_wc = context_w + context_c;\n      if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {\n        context_w = context_wc;\n      } else {\n        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n          if (context_w.charCodeAt(0)<256) {\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<8 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          } else {\n            value = 1;\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1) | value;\n              if (context_data_position ==bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = 0;\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<16 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          }\n          context_enlargeIn--;\n          if (context_enlargeIn == 0) {\n            context_enlargeIn = Math.pow(2, context_numBits);\n            context_numBits++;\n          }\n          delete context_dictionaryToCreate[context_w];\n        } else {\n          value = context_dictionary[context_w];\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n\n\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        // Add wc to the dictionary.\n        context_dictionary[context_wc] = context_dictSize++;\n        context_w = String(context_c);\n      }\n    }\n\n    // Output the code for w.\n    if (context_w !== \"\") {\n      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n        if (context_w.charCodeAt(0)<256) {\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<8 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        } else {\n          value = 1;\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | value;\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = 0;\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<16 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        delete context_dictionaryToCreate[context_w];\n      } else {\n        value = context_dictionary[context_w];\n        for (i=0 ; i<context_numBits ; i++) {\n          context_data_val = (context_data_val << 1) | (value&1);\n          if (context_data_position == bitsPerChar-1) {\n            context_data_position = 0;\n            context_data.push(getCharFromInt(context_data_val));\n            context_data_val = 0;\n          } else {\n            context_data_position++;\n          }\n          value = value >> 1;\n        }\n\n\n      }\n      context_enlargeIn--;\n      if (context_enlargeIn == 0) {\n        context_enlargeIn = Math.pow(2, context_numBits);\n        context_numBits++;\n      }\n    }\n\n    // Mark the end of the stream\n    value = 2;\n    for (i=0 ; i<context_numBits ; i++) {\n      context_data_val = (context_data_val << 1) | (value&1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data_position = 0;\n        context_data.push(getCharFromInt(context_data_val));\n        context_data_val = 0;\n      } else {\n        context_data_position++;\n      }\n      value = value >> 1;\n    }\n\n    // Flush the last char\n    while (true) {\n      context_data_val = (context_data_val << 1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data.push(getCharFromInt(context_data_val));\n        break;\n      }\n      else context_data_position++;\n    }\n    return context_data.join('');\n  },\n\n  decompress: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 32768, function(index) { return compressed.charCodeAt(index); });\n  },\n\n  _decompress: function (length, resetValue, getNextValue) {\n    var dictionary = [],\n        next,\n        enlargeIn = 4,\n        dictSize = 4,\n        numBits = 3,\n        entry = \"\",\n        result = [],\n        i,\n        w,\n        bits, resb, maxpower, power,\n        c,\n        data = {val:getNextValue(0), position:resetValue, index:1};\n\n    for (i = 0; i < 3; i += 1) {\n      dictionary[i] = i;\n    }\n\n    bits = 0;\n    maxpower = Math.pow(2,2);\n    power=1;\n    while (power!=maxpower) {\n      resb = data.val & data.position;\n      data.position >>= 1;\n      if (data.position == 0) {\n        data.position = resetValue;\n        data.val = getNextValue(data.index++);\n      }\n      bits |= (resb>0 ? 1 : 0) * power;\n      power <<= 1;\n    }\n\n    switch (next = bits) {\n      case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 2:\n        return \"\";\n    }\n    dictionary[3] = c;\n    w = c;\n    result.push(c);\n    while (true) {\n      if (data.index > length) {\n        return \"\";\n      }\n\n      bits = 0;\n      maxpower = Math.pow(2,numBits);\n      power=1;\n      while (power!=maxpower) {\n        resb = data.val & data.position;\n        data.position >>= 1;\n        if (data.position == 0) {\n          data.position = resetValue;\n          data.val = getNextValue(data.index++);\n        }\n        bits |= (resb>0 ? 1 : 0) * power;\n        power <<= 1;\n      }\n\n      switch (c = bits) {\n        case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 2:\n          return result.join('');\n      }\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n      if (dictionary[c]) {\n        entry = dictionary[c];\n      } else {\n        if (c === dictSize) {\n          entry = w + w.charAt(0);\n        } else {\n          return null;\n        }\n      }\n      result.push(entry);\n\n      // Add w+entry[0] to the dictionary.\n      dictionary[dictSize++] = w + entry.charAt(0);\n      enlargeIn--;\n\n      w = entry;\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n    }\n  }\n};\n  return LZString;\n})();\n\nif (typeof define === 'function' && define.amd) {\n  define(function () { return LZString; });\n} else if( typeof module !== 'undefined' && module != null ) {\n  module.exports = LZString\n} else if( typeof angular !== 'undefined' && angular != null ) {\n  angular.module('LZString', [])\n  .factory('LZString', function () {\n    return LZString;\n  });\n}\n", "/**\n * @upsetjs/model\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { ISetLike } from '../model';\n\nexport interface ISetOverlapFunction<T> {\n  (a: ISetLike<T>, b: ISetLike<T>): number;\n}\n\nexport interface SetOverlap {\n  setA: number;\n  setB: number;\n  union: number;\n  intersection: number;\n}\n\nexport interface SetElemOverlap<T> {\n  setA: readonly T[];\n  setB: readonly T[];\n  union: readonly T[];\n  intersection: readonly T[];\n}\n\nfunction len<T>(a: Set<T> | readonly T[]) {\n  return a instanceof Set ? a.size : a.length;\n}\n\nexport function setOverlapFactory<T>(a: Set<T> | readonly T[], toElemKey?: (e: T) => string) {\n  const elems = !toElemKey\n    ? a instanceof Set\n      ? a\n      : new Set(a)\n    : new Set((a instanceof Set ? Array.from(a) : a).map(toElemKey));\n  const setA = elems.size;\n  const same: SetOverlap = {\n    setA,\n    setB: setA,\n    union: setA,\n    intersection: setA,\n  };\n\n  return (b: Set<T> | readonly T[]): SetOverlap => {\n    if (b === a) {\n      return same;\n    }\n    let intersection = 0;\n    b.forEach((e: T) => {\n      if ((toElemKey && (elems as Set<string>).has(toElemKey(e))) || (!toElemKey && (elems as Set<T>).has(e))) {\n        intersection++;\n      }\n    });\n    const setB = len(b);\n    return {\n      setA,\n      setB,\n      intersection,\n      union: setA + setB - intersection,\n    };\n  };\n}\n\nexport default function setOverlap<T>(\n  a: Set<T> | readonly T[],\n  b: Set<T> | readonly T[],\n  toElemKey?: (e: T) => string\n) {\n  if (len(a) < len(b) || a instanceof Set) {\n    return setOverlapFactory(a, toElemKey)(b);\n  }\n  const r = setOverlapFactory(b, toElemKey)(a);\n  // swap back\n  return Object.assign({}, r, {\n    setA: r.setB,\n    setB: r.setA,\n  });\n}\n\nexport function setElemOverlapFactory<T>(a: Set<T> | readonly T[], toElemKey?: (e: T) => string) {\n  const elems = !toElemKey\n    ? a instanceof Set\n      ? a\n      : new Set(a)\n    : new Set((a instanceof Set ? Array.from(a) : a).map(toElemKey));\n  const setA: readonly T[] = Array.isArray(a) ? a : Array.from(a);\n  const same: SetElemOverlap<T> = {\n    setA,\n    setB: setA,\n    union: setA,\n    intersection: setA,\n  };\n\n  return (b: Set<T> | readonly T[]): SetElemOverlap<T> => {\n    if (b === a) {\n      return same;\n    }\n    const intersection: T[] = [];\n    const union: T[] = setA.slice();\n    b.forEach((e: T) => {\n      if ((toElemKey && (elems as Set<string>).has(toElemKey(e))) || (!toElemKey && (elems as Set<T>).has(e))) {\n        intersection.push(e);\n      } else {\n        union.push(e);\n      }\n    });\n    return {\n      setA: setA,\n      setB: Array.isArray(b) ? b : Array.from(b),\n      intersection,\n      union,\n    };\n  };\n}\n\nexport function setElemOverlap<T>(a: Set<T> | readonly T[], b: Set<T> | readonly T[], toElemKey?: (e: T) => string) {\n  if (len(a) < len(b) || a instanceof Set) {\n    return setElemOverlapFactory(a, toElemKey)(b);\n  }\n  const r = setElemOverlapFactory(b, toElemKey)(a);\n  // swap back\n  return Object.assign({}, r, {\n    setA: r.setB,\n    setB: r.setA,\n  });\n}\n\nexport function setElemIntersectionFactory<T>(a: Set<T> | readonly T[], toElemKey?: (e: T) => string) {\n  const arr = a instanceof Set ? Array.from(a) : a;\n  const elems = !toElemKey ? (a instanceof Set ? a : new Set(a)) : new Set(arr.map(toElemKey));\n  return (b: Set<T> | readonly T[]): readonly T[] => {\n    if (b === a) {\n      return arr;\n    }\n    const intersection: T[] = [];\n    b.forEach((e: T) => {\n      if ((toElemKey && (elems as Set<string>).has(toElemKey(e))) || (!toElemKey && (elems as Set<T>).has(e))) {\n        intersection.push(e);\n      }\n    });\n    return intersection;\n  };\n}\n", "/**\n * @upsetjs/model\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { ISetLike } from './model';\nimport {\n  setOverlapFactory,\n  SetOverlap,\n  setElemOverlapFactory,\n  SetElemOverlap,\n  setElemIntersectionFactory,\n} from './data/setOverlap';\n\nexport interface UpSetElemQuery<T = any> {\n  /**\n   * name of this query for the tooltip\n   */\n  readonly name: string;\n  /**\n   * color for highlighting\n   */\n  readonly color: string;\n  /**\n   * elements within this query\n   */\n  readonly elems: readonly T[] | Set<T>;\n}\n\nexport interface UpSetSetQuery<T = any> {\n  /**\n   * name of this query for the tooltip\n   */\n  readonly name: string;\n  /**\n   * color for highlighting\n   */\n  readonly color: string;\n  /**\n   * set to highlight\n   */\n  readonly set: ISetLike<T>;\n}\n\nexport interface UpSetCalcQuery<T = any> {\n  /**\n   * name of this query for the tooltip\n   */\n  readonly name: string;\n  /**\n   * color for highlighting\n   */\n  readonly color: string;\n  /**\n   * computes the overlap of the given set to this query\n   * @param s the current set to evaluate\n   * @return at most `s.cardinality`\n   */\n  overlap(s: ISetLike<T> | readonly T[]): number;\n}\n\nexport type UpSetQuery<T = any> = UpSetElemQuery<T> | UpSetCalcQuery<T> | UpSetSetQuery<T>;\nexport type UpSetQueries<T = any> = readonly UpSetQuery<T>[];\n\nexport function isElemQuery<T>(q: UpSetQuery<T>): q is UpSetElemQuery<T> {\n  return Array.isArray((q as UpSetElemQuery<T>).elems);\n}\n\nexport function isCalcQuery<T>(q: UpSetQuery<T>): q is UpSetCalcQuery<T> {\n  return typeof (q as UpSetCalcQuery<T>).overlap === 'function';\n}\n\nexport function isSetQuery<T>(q: UpSetQuery<T>): q is UpSetSetQuery<T> {\n  return (q as UpSetSetQuery<T>).set != null;\n}\n\n/**\n * helper method to create an overlap function for a given query\n * @param query the query\n * @param what type of overlap\n * @param toElemKey optional key function\n */\nexport function queryOverlap<T>(query: UpSetQuery<T>, what: keyof SetOverlap, toElemKey?: (e: T) => string) {\n  if (isCalcQuery(query)) {\n    return query.overlap;\n  }\n  if (isSetQuery(query) && query.set.overlap) {\n    return query.set.overlap;\n  }\n  const f = setOverlapFactory(isElemQuery(query) ? query.elems : query.set.elems, toElemKey);\n  return (s: ISetLike<T>) => {\n    if (s.overlap && isElemQuery(query) && Array.isArray(query.elems)) {\n      return s.overlap(query.elems);\n    }\n    if (s.overlap && isSetQuery(query)) {\n      return s.overlap(query.set);\n    }\n    return f(s.elems)[what];\n  };\n}\n\n/**\n * helper method to create an overlap function of elements for a given query\n * @param query the query\n * @param what type of overlap\n * @param toElemKey optional key function\n */\nexport function queryElemOverlap<T>(\n  query: UpSetQuery<T>,\n  what: keyof SetElemOverlap<T>,\n  toElemKey?: (e: T) => string\n): (s: ISetLike<T>) => readonly T[] | null {\n  if (isCalcQuery(query)) {\n    return () => null;\n  }\n  if (what === 'intersection') {\n    const f = setElemIntersectionFactory(isElemQuery(query) ? query.elems : query.set.elems, toElemKey);\n    return (s: ISetLike<T>) => f(s.elems);\n  }\n  const f = setElemOverlapFactory(isElemQuery(query) ? query.elems : query.set.elems, toElemKey);\n  return (s: ISetLike<T>) => {\n    return f(s.elems)[what];\n  };\n}\n", "/**\n * @upsetjs/model\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { ISet, ISetCombination, ISetLike, IBaseSet } from './model';\nimport type { GenerateSetCombinationsOptions } from './data';\nimport { UpSetQuery, isElemQuery, isCalcQuery, isSetQuery } from './queries';\n\nfunction isBaseSet(v: any): v is IBaseSet<any> {\n  const vt: IBaseSet<any> = v;\n  return v != null && typeof vt.cardinality === 'number' && typeof v.name === 'string' && Array.isArray(v.elems);\n}\n\nexport function isSet(v: any): v is ISet<any> {\n  return isBaseSet(v) && (v as ISet<any>).type === 'set';\n}\n\nexport function isSetCombination(v: any): v is ISetCombination<any> {\n  const vt: ISetCombination<any> = v;\n  return (\n    isBaseSet(v) &&\n    ['composite', 'union', 'intersection', 'distinctIntersection'].includes(vt.type) &&\n    vt.sets instanceof Set &&\n    typeof vt.degree === 'number'\n  );\n}\n\nexport function isSetLike(v: any): v is ISetLike<any> {\n  return isSet(v) || isSetCombination(v);\n}\n\nexport function isGenerateSetCombinationOptions(v: any): v is GenerateSetCombinationsOptions<any> {\n  const vt: GenerateSetCombinationsOptions<any> = v;\n  return v != null && (vt.type == null || ['intersection', 'union'].includes(vt.type));\n}\n\nexport function isUpSetQuery(v: any): v is UpSetQuery<any> {\n  const vt: UpSetQuery<any> = v;\n  return (\n    v != null &&\n    typeof vt.name === 'string' &&\n    typeof vt.color === 'string' &&\n    (isElemQuery(vt) || isSetQuery(vt) || isCalcQuery(vt))\n  );\n}\n", "/**\n * @upsetjs/model\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nexport function byName<T extends { name: string }>(a: T, b: T) {\n  return a.name.localeCompare(b.name);\n}\n\nexport function byCardinality<T extends { cardinality: number }>(a: T, b: T) {\n  // decreasing\n  return b.cardinality - a.cardinality;\n}\n\nexport function byDegree<T extends { degree: number }>(a: T, b: T) {\n  // increasing\n  return a.degree - b.degree;\n}\n\nexport function byComposite<T>(func: ((a: T, b: T) => number)[]) {\n  return (a: T, b: T) => {\n    return func.reduce((acc, f) => (acc === 0 ? f(a, b) : acc), 0);\n  };\n}\n\nexport function negate<T>(func: (a: T, b: T) => number) {\n  return (a: T, b: T) => -func(a, b);\n}\n\nexport function byGroup<E, S extends { sets: ReadonlySet<E> }>(sets: readonly E[]) {\n  return (a: S, b: S) => {\n    const fixNotFound = (v: number) => (v < 0 ? Number.POSITIVE_INFINITY : v);\n    const aIndex = fixNotFound(sets.findIndex((s) => a.sets.has(s)));\n    const bIndex = fixNotFound(sets.findIndex((s) => b.sets.has(s)));\n    return aIndex - bIndex;\n  };\n}\n", "/**\n * @upsetjs/model\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { ISetCombination, SetCombinationType, ISets } from '../model';\nimport { byCardinality, byComposite, byDegree, byGroup, byName, negate } from './utils';\nimport type { SortSetOrder } from './asSets';\n\n/**\n * helper method to extract the sets in a set combination from its name, e.g. S1&S2 => S1,S2\n * @param sets the list of possible sets\n * @param symbol the regex to split a name\n */\nexport function fromSetName<T>(sets: ISets<T>, symbol = /[∩∪&|]/) {\n  const byName = new Map(sets.map((s) => [s.name, s]));\n  return (s: { name: string }) => {\n    return s.name.split(symbol).map((setName) => byName.get(setName.trim())!);\n  };\n}\n\n/**\n * sort orders for set combinations\n */\nexport type SortCombinationOrder =\n  | SortSetOrder\n  | 'group'\n  | 'degree'\n  | 'group:asc'\n  | 'group:desc'\n  | 'degree:asc'\n  | 'degree:desc';\n\nexport type SortCombinationOrders = readonly SortCombinationOrder[];\n\nexport interface PostprocessCombinationsOptions {\n  /**\n   * order the sets combinations by the given criteria\n   */\n  order?: SortCombinationOrder | SortCombinationOrders;\n  /**\n   * limit to the top N after sorting\n   */\n  limit?: number;\n}\n\nfunction toOrder<T, S extends ISetCombination<T>>(\n  sets: ISets<T>,\n  order?: SortCombinationOrder | SortCombinationOrders\n): (a: S, b: S) => number {\n  if (!order) {\n    return byName;\n  }\n  const arr = (Array.isArray(order) ? order : [order]) as SortCombinationOrders;\n  if (arr.length === 0) {\n    return byName;\n  }\n  return byComposite<S>(\n    arr.map((o) => {\n      switch (o) {\n        case 'cardinality':\n        case 'cardinality:desc':\n          return byCardinality;\n        case 'cardinality:asc':\n          return negate(byCardinality);\n        case 'name:desc':\n          return negate(byName);\n        case 'degree':\n        case 'degree:asc':\n          return byDegree;\n        case 'degree:desc':\n          return negate(byDegree);\n        case 'group':\n        case 'group:asc':\n          return byGroup(sets);\n        case 'group:desc':\n          return negate(byGroup(sets));\n        default:\n          return byName;\n      }\n    })\n  );\n}\n\n/**\n * @internal\n */\nexport function postprocessCombinations<T, S extends ISetCombination<T>>(\n  sets: ISets<T>,\n  combinations: S[],\n  options: PostprocessCombinationsOptions = {}\n) {\n  let r = combinations as S[];\n  if (options.order) {\n    r = r.sort(toOrder(sets, options.order));\n  }\n  if (options.limit != null) {\n    return r.slice(0, options.limit);\n  }\n  return r;\n}\n\n/**\n * helper to create a proper data structures for UpSet.js sets by adding extra properties\n * @param sets set like structures\n */\nexport function asCombination<T, S extends { name: string; elems: readonly T[] }>(\n  set: S,\n  type: SetCombinationType,\n  toSets: (s: S) => ISets<T>\n): S & ISetCombination<T> {\n  const sets = toSets(set);\n  return Object.assign(\n    {\n      type,\n      cardinality: set.elems.length,\n      sets: new Set(sets),\n      degree: sets.length,\n    },\n    set\n  );\n}\n\n/**\n * helper to create a proper data structures for UpSet.js sets by adding extra properties\n * @param sets set like structures\n * @param type hint for the type of combinations\n * @param toSets resolver of the contained sets\n */\nexport default function asCombinations<T, S extends { name: string; elems: readonly T[] }>(\n  sets: readonly S[],\n  type: SetCombinationType,\n  toSets: (s: S) => ISets<T>\n): (S & ISetCombination<T>)[] {\n  return sets.map((set) => asCombination(set, type, toSets));\n}\n", "/**\n * @upsetjs/model\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nexport const SET_JOINERS = {\n  distinctIntersection: ' ∩ ',\n  intersection: ' ∩ ',\n  union: ' ∪ ',\n  composite: ',',\n};\n", "export function parseColor(color?: string): [number, number, number] {\n  if (!color) {\n    return [255, 255, 255];\n  }\n  const hex = color.match(/#([\\da-f]{2})([\\da-f]{2})([\\da-f]{2})/i);\n  if (hex) {\n    return [Number.parseInt(hex[1], 16), Number.parseInt(hex[2], 16), Number.parseInt(hex[3], 16)];\n  }\n  const rgb = color.match(/\\(([\\d]+)[, ]([\\d]+)[, ]([\\d]+)\\)/i);\n  if (rgb) {\n    return [Number.parseInt(rgb[1], 10), Number.parseInt(rgb[2], 10), Number.parseInt(rgb[3], 10)];\n  }\n  return [255, 255, 255];\n}\n\nexport function mergeColors(colors: readonly (string | undefined)[]): string | undefined {\n  if (colors.length === 1) {\n    return colors[0];\n  }\n  if (colors.every((d) => d == null)) {\n    return undefined;\n  }\n  const rgb = colors.map(parseColor);\n  const r = Math.floor(rgb.reduce((acc, v) => acc + v[0], 0) / rgb.length);\n  const g = Math.floor(rgb.reduce((acc, v) => acc + v[1], 0) / rgb.length);\n  const b = Math.floor(rgb.reduce((acc, v) => acc + v[2], 0) / rgb.length);\n  return `#${r.toString(16)}${g.toString(16)}${b.toString(16)}`;\n}\n", "/**\n * @upsetjs/model\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { ISetCombination, ISetCombinations, ISets, ISet, SetCombinationType, ISetLike } from '../model';\nimport { isSetLike } from '../validators';\nimport { postprocessCombinations, PostprocessCombinationsOptions } from './asCombinations';\nimport { SET_JOINERS } from './constants';\nimport { mergeColors as mergeDefaultColors } from '../colors';\n\nexport interface GenerateSetCombinationsOptions<T = any> extends PostprocessCombinationsOptions {\n  /**\n   * type of set combination\n   * @default intersection\n   */\n  type?: SetCombinationType;\n  /**\n   * minimum number of intersecting sets\n   * @default 0\n   */\n  min?: number;\n  /**\n   * maximum number of intersecting sets\n   * @default Infinity\n   */\n  max?: number;\n  /**\n   * include empty intersections\n   * @default false\n   */\n  empty?: boolean;\n  /**\n   * list of all elements used to compute the elements which aren't part of any given set\n   */\n  elems?: readonly T[];\n  /**\n   * alternative to `.elems` by directly specifying the elements that are not part of any set\n   * just makes sense with min=0\n   */\n  notPartOfAnySet?: readonly T[] | number;\n  /**\n   * optional elem key function\n   * @param v\n   */\n  toElemKey?(v: T): string;\n\n  /**\n   * optional color merger\n   **/\n  mergeColors?: (colors: readonly (string | undefined)[]) => string | undefined;\n}\n\n/**\n * @internal\n */\nexport function generateName<T>(combo: ReadonlySet<ISet<T>>, setIndex: ReadonlyMap<ISet<T>, number>, joiner: string) {\n  const sorted = Array.from(combo).sort((a, b) => setIndex.get(a)! - setIndex.get(b)!);\n  return sorted.length === 1 ? sorted[0].name : `(${sorted.map((d) => d.name).join(joiner)})`;\n}\n\n/**\n * @internal\n */\nexport function generateSet<T>(\n  type: SetCombinationType,\n  name: string,\n  combo: ReadonlySet<ISet<T>>,\n  elems: readonly T[],\n  mergeColors: (colors: readonly (string | undefined)[]) => string | undefined\n) {\n  return {\n    type: combo.size === 0 ? 'composite' : type,\n    elems,\n    color: mergeColors(Array.from(combo).map((s) => s.color)),\n    sets: combo,\n    name,\n    cardinality: elems.length,\n    degree: combo.size,\n  };\n}\n\n/**\n * @internal\n */\nexport function mergeIntersection<T, B>(\n  a: ISetCombination<T>,\n  b: ISetCombination<T>,\n  lookup: Map<ISetLike<T>, ReadonlySet<B>>,\n  toKey: (v: T) => B,\n  setIndex: ReadonlyMap<ISet<T>, number>,\n  type: SetCombinationType,\n  mergeColors: (colors: readonly (string | undefined)[]) => string | undefined\n) {\n  const merged = new Set<ISet<T>>(a.sets);\n  b.sets.forEach((s) => merged.add(s));\n  const name = generateName(merged, setIndex, SET_JOINERS[type]);\n\n  if (a.cardinality === 0 || b.cardinality === 0) {\n    return generateSet(type, name, merged, [], mergeColors);\n  }\n  let small = a;\n  let big = b;\n  if (a.cardinality > b.cardinality) {\n    small = b;\n    big = a;\n  }\n\n  const keySet = new Set<B>();\n  const bigLookup: ReadonlySet<B> = lookup.get(big)!;\n  const elems: T[] = [];\n  const l = small.elems.length;\n  for (let i = 0; i < l; i++) {\n    const e = small.elems[i];\n    const key = toKey(e);\n    if (!bigLookup.has(key)) {\n      continue;\n    }\n    keySet.add(key);\n    elems.push(e);\n  }\n  const r = generateSet(type, name, merged, elems, mergeColors);\n  lookup.set(r, keySet);\n  return r;\n}\n\n/**\n * @internal\n */\nexport function mergeUnion<T, B>(\n  a: ISetCombination<T>,\n  b: ISetCombination<T>,\n  lookup: Map<ISetLike<T>, ReadonlySet<B>>,\n  toKey: (v: T) => B,\n  setIndex: ReadonlyMap<ISet<T>, number>,\n  type: SetCombinationType,\n  mergeColors: (colors: readonly (string | undefined)[]) => string | undefined\n) {\n  const merged = new Set<ISet<T>>(a.sets);\n  b.sets.forEach((s) => merged.add(s));\n  const name = generateName(merged, setIndex, SET_JOINERS[type]);\n\n  if (a.cardinality === 0) {\n    const r = generateSet(type, name, merged, b.elems, mergeColors);\n    lookup.set(r, lookup.get(b)!);\n    return r;\n  }\n  if (b.cardinality === 0) {\n    const r = generateSet(type, name, merged, a.elems, mergeColors);\n    lookup.set(r, lookup.get(a)!);\n    return r;\n  }\n\n  let small = a;\n  let big = b;\n  if (a.cardinality > b.cardinality) {\n    small = b;\n    big = a;\n  }\n\n  const keySet = new Set(lookup.get(big)!);\n  const bigLookup: ReadonlySet<B> = lookup.get(big)!;\n  const elems = big.elems.slice();\n  small.elems.forEach((e) => {\n    const key = toKey(e);\n    if (bigLookup.has(key)) {\n      return;\n    }\n    keySet.add(key);\n    elems.push(e);\n  });\n  const r = generateSet(type, name, merged, elems, mergeColors);\n  lookup.set(r, keySet);\n  return r;\n}\n\nexport function generateEmptySet<T, B>(\n  type: SetCombinationType,\n  notPartOfAnySet: readonly T[] | number | undefined,\n  allElements: readonly T[],\n  lookup: Map<ISetLike<T>, ReadonlySet<B>>,\n  toKey: (v: T) => B,\n  mergeColors: (colors: readonly (string | undefined)[]) => string | undefined\n): ISetCombination<T> {\n  if (typeof notPartOfAnySet === 'number') {\n    return {\n      type: 'composite',\n      elems: [],\n      color: mergeColors ? mergeColors([]) : undefined,\n      sets: new Set(),\n      name: '()',\n      cardinality: notPartOfAnySet,\n      overlap(s) {\n        return s === this || (isSetLike(s) && s.name === this.name && s.cardinality === this.cardinality)\n          ? this.cardinality\n          : 0;\n      },\n      degree: 0,\n    };\n  }\n  if (Array.isArray(notPartOfAnySet)) {\n    return generateSet(type, '()', new Set(), notPartOfAnySet, mergeColors);\n  }\n  const lookupArr = Array.from(lookup!.values());\n  const elems = allElements.filter((e) => {\n    const k = toKey(e);\n    return lookupArr.every((s) => !s.has(k));\n  });\n  return generateSet(type, '()', new Set(), elems, mergeColors);\n}\n/**\n * generate set intersection/unions for a given list of sets\n * @param sets the sets with their elements\n * @param options additional customization options\n */\nexport default function generateCombinations<T = any>(\n  sets: ISets<T>,\n  options: GenerateSetCombinationsOptions<T> = {}\n): ISetCombinations<T> {\n  const {\n    type = 'intersection',\n    min = 0,\n    max = Number.POSITIVE_INFINITY,\n    empty = false,\n    elems: allElements = [],\n    notPartOfAnySet,\n    toElemKey,\n    mergeColors = mergeDefaultColors,\n  } = options;\n  // const joiner = SET_JOINERS[type] ?? SET_JOINERS.intersection;\n  const combinations: ISetCombination<T>[] = [];\n\n  const setIndex = new Map(sets.map((s, i) => [s, i]));\n  const setElems = new Map(\n    sets.map((s) => [s as ISetLike<T>, toElemKey ? new Set(s.elems.map(toElemKey!)) : new Set(s.elems)])\n  );\n  const setDirectElems = toElemKey ? null : (setElems as Map<ISetLike<T>, ReadonlySet<T>>);\n  const setKeyElems = toElemKey ? (setElems as Map<ISetLike<T>, ReadonlySet<string>>) : null;\n\n  const calc = type === 'union' ? mergeUnion : mergeIntersection;\n\n  function push(s: ISetCombination<T>) {\n    if (s.degree < min || s.degree > max || (s.cardinality === 0 && !empty)) {\n      return;\n    }\n    if (type !== 'distinctIntersection') {\n      combinations.push(s);\n      return;\n    }\n\n    // need to filter out common elements in other sets\n    const others = sets.filter((d) => !s.sets.has(d));\n    let elems: T[] = [];\n    if (toElemKey) {\n      const othersSets = others.map((o) => setKeyElems!.get(o)!);\n      elems = s.elems.filter((e) => {\n        const key = toElemKey(e);\n        return othersSets.every((o) => !o.has(key));\n      });\n    } else {\n      const othersSets = others.map((o) => setDirectElems!.get(o)!);\n      elems = s.elems.filter((e) => othersSets.every((o) => !o.has(e)));\n    }\n\n    if (elems.length === s.cardinality) {\n      combinations.push(s);\n      return;\n    }\n    const sDistinct = generateSet(type, s.name, s.sets, elems, mergeColors);\n\n    if (sDistinct.cardinality === 0 && !empty) {\n      return;\n    }\n    combinations.push(sDistinct);\n  }\n\n  function generateLevel<B>(\n    arr: ISetCombinations<T>,\n    degree: number,\n    lookup: Map<ISetLike<T>, ReadonlySet<B>>,\n    toKey: (v: T) => B\n  ) {\n    if (degree > max) {\n      return;\n    }\n    const l = arr.length;\n    for (let i = 0; i < l; i++) {\n      const a = arr[i];\n      const sub: ISetCombination<T>[] = [];\n      for (let j = i + 1; j < l; j++) {\n        const b = arr[j];\n        const ab = calc(a, b, lookup, toKey, setIndex, type, mergeColors);\n        push(ab);\n        if (type === 'union' || ab.cardinality > 0 || empty) {\n          sub.push(ab);\n        }\n      }\n      if (sub.length > 1) {\n        generateLevel(sub, degree + 1, lookup, toKey);\n      }\n    }\n  }\n\n  if (min <= 0) {\n    if (toElemKey) {\n      push(generateEmptySet(type, notPartOfAnySet, allElements, setKeyElems!, toElemKey, mergeColors));\n    } else {\n      push(generateEmptySet(type, notPartOfAnySet, allElements, setDirectElems!, (v) => v, mergeColors));\n    }\n  }\n\n  const degree1 = sets.map((s) => {\n    const r = generateSet(type, s.name, new Set([s]), s.elems, mergeColors);\n    setElems.set(r, setElems.get(s)!);\n    push(r);\n    return r;\n  });\n  if (toElemKey) {\n    generateLevel(degree1, 2, setKeyElems!, toElemKey);\n  } else {\n    generateLevel(degree1, 2, setDirectElems!, (v) => v);\n  }\n  return postprocessCombinations(sets, combinations, options);\n}\n", "/**\n * @upsetjs/model\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { ISet } from '../model';\nimport { byCardinality, byName, byComposite, negate } from './utils';\n\n/**\n * helper method to create proper UpSet.js structures by adding extra properties\n * @param set the set to complete\n */\nexport function asSet<T, S extends { name: string; elems: readonly T[] }>(set: S): S & ISet<T> {\n  return Object.assign(\n    {\n      type: 'set' as const,\n      cardinality: set.elems.length,\n    },\n    set\n  );\n}\n\n/**\n * possible set sort orders\n */\nexport type SortSetOrder = 'cardinality' | 'name' | 'cardinality:desc' | 'name:asc' | 'cardinality:asc' | 'name:desc';\n\nexport interface PostprocessSetOptions {\n  /**\n   * order the set by the given criteria\n   */\n  order?: SortSetOrder;\n  /**\n   * limit to the top N sets after sorting\n   */\n  limit?: number;\n}\n\nfunction toOrder<T, S extends ISet<T>>(order?: SortSetOrder): (a: S, b: S) => number {\n  if (!order) {\n    return byName;\n  }\n  switch (order) {\n    case 'cardinality':\n    case 'cardinality:desc':\n      return byComposite<S>([byCardinality, byName]);\n    case 'cardinality:asc':\n      return byComposite<S>([negate(byCardinality), byName]);\n    case 'name:desc':\n      return negate(byName);\n    default:\n      return byName;\n  }\n}\n\n/**\n * @internal\n */\nexport function postprocessSets<T, S extends ISet<T>>(sets: readonly S[], options: PostprocessSetOptions = {}) {\n  let r = sets as S[];\n  if (options.order) {\n    const order = toOrder(options.order);\n    r = r.slice().sort(order);\n  }\n  if (options.limit != null) {\n    return r.slice(0, options.limit);\n  }\n  return r;\n}\n\n/**\n * helper to create a proper data structures for UpSet.js sets by adding extra properties\n * @param sets set like structures\n * @param options additional postprocessing options\n */\nexport default function asSets<T, S extends { name: string; elems: readonly T[] }>(\n  sets: readonly S[],\n  options: PostprocessSetOptions = {}\n): (S & ISet<T>)[] {\n  return postprocessSets(sets.map(asSet), options);\n}\n", "/**\n * @upsetjs/model\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { ISet, ISetCombination, ISetLike, ISets, SetCombinationType } from '../model';\nimport { postprocessCombinations, SortCombinationOrder, SortCombinationOrders } from './asCombinations';\nimport { postprocessSets, SortSetOrder } from './asSets';\nimport { SET_JOINERS } from './constants';\n\nexport interface ExtractFromExpressionOptions {\n  type?: SetCombinationType;\n\n  setOrder?: SortSetOrder;\n\n  combinationOrder?: SortCombinationOrder | SortCombinationOrders;\n\n  joiner?: string;\n  /**\n   * optional function to identify the same sets\n   * @param set the set to generate a key for\n   */\n  toKey?: (set: ISetLike<unknown>) => string;\n}\n\n/**\n * extract sets and combinations out of a given list of static combination information.\n * In addition an accessor is used to specify the set names\n * @param combinations list of combinations\n * @param accessor accessor to get the list of sets the combination belong to\n * @param options hints about the given combinations\n */\nexport default function extractFromExpression<T extends { cardinality: number }>(\n  combinations: readonly T[],\n  accessor: (elem: T) => string[],\n  options?: ExtractFromExpressionOptions\n): { sets: ISets<unknown>; combinations: readonly (T & ISetCombination<unknown>)[] };\n/**\n * extract sets out of a given element array which have a `.sets` property\n * @param combinations\n * @param options hints about the given combinations\n */\n// eslint-disable-next-line no-redeclare\nexport default function extractFromExpression<T extends { sets: string[]; cardinality: number }>(\n  combinations: readonly T[],\n  options?: ExtractFromExpressionOptions\n): { sets: ISets<unknown>; combinations: readonly (T & ISetCombination<unknown>)[] };\n// eslint-disable-next-line no-redeclare\nexport default function extractFromExpression<T extends { cardinality: number }>(\n  combinations: readonly T[],\n  accOrOptions?: ExtractFromExpressionOptions | ((elem: T) => string[]),\n  o: ExtractFromExpressionOptions = {}\n): { sets: ISets<unknown>; combinations: readonly (T & ISetCombination<unknown>)[] } {\n  const acc = typeof accOrOptions === 'function' ? accOrOptions : (e: T) => (e as unknown as { sets: string[] }).sets;\n  const options: ExtractFromExpressionOptions = (typeof accOrOptions !== 'function' ? accOrOptions : o) ?? {};\n\n  const type = options.type ?? 'intersection';\n\n  const joiner = options.joiner ?? SET_JOINERS[type];\n\n  const sets: ISet<unknown>[] = [];\n  const setLookup = new Map<string, ISet<unknown>>();\n\n  const cs: (T & ISetCombination<unknown>)[] = combinations.map((c) => {\n    const containedSets = acc(c);\n\n    const containedSetsObjects = containedSets.map((s) => {\n      if (setLookup.has(s)) {\n        return setLookup.get(s)!;\n      }\n      const set: ISet<unknown> = {\n        cardinality: 0,\n        elems: [],\n        name: s,\n        type: 'set',\n      };\n      sets.push(set);\n      setLookup.set(set.name, set);\n      return set;\n    });\n\n    if (type === 'distinctIntersection') {\n      // we can add the cardinality of a subset to the main set\n      for (const s of containedSetsObjects) {\n        (s as { cardinality: number }).cardinality += c.cardinality;\n      }\n    } else if (containedSets.length === 1) {\n      // merge into set\n      Object.assign(\n        containedSetsObjects[0],\n        {\n          cardinality: c.cardinality,\n        },\n        c\n      );\n    } else if (type === 'intersection') {\n      // we can at least ensure it is at least the intersection\n      for (const s of containedSetsObjects) {\n        (s as { cardinality: number }).cardinality = Math.max(s.cardinality, c.cardinality);\n      }\n    } else if (type === 'union') {\n      // we can at least ensure it is at most the intersection\n      for (const s of containedSetsObjects) {\n        (s as { cardinality: number }).cardinality = Math.min(s.cardinality, c.cardinality);\n      }\n    }\n\n    const name = containedSets.join(joiner);\n    return Object.assign(\n      {\n        type,\n        elems: [],\n        name,\n      },\n      c,\n      {\n        cardinality: c.cardinality,\n        degree: containedSets.length,\n        sets: new Set(containedSetsObjects),\n      }\n    );\n  });\n\n  const sortedSets = postprocessSets(sets, {\n    order: options.setOrder,\n  });\n  const sortedCombinations = postprocessCombinations(sortedSets, cs, {\n    order: options.combinationOrder,\n  });\n\n  return {\n    sets: sortedSets,\n    combinations: sortedCombinations,\n  };\n}\n", "/**\n * @upsetjs/model\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { ISets, ISet } from '../model';\nimport { PostprocessSetOptions, postprocessSets } from './asSets';\n\n/**\n * extract sets out of a given element array, where an accessor is used to specify the set names\n * @param elements list of elements\n * @param acc accessor to get the list of sets the element belong to\n * @param options postprocess options\n */\nexport default function extractSets<T>(\n  elements: readonly T[],\n  acc: (elem: T) => string[],\n  options?: PostprocessSetOptions\n): ISets<T>;\n/**\n * extract sets out of a given element array which have a `.sets` property\n * @param elements\n * @param options postprocess options\n */\n// eslint-disable-next-line no-redeclare\nexport default function extractSets<T extends { sets: string[] }>(\n  elements: readonly T[],\n  options?: PostprocessSetOptions\n): ISets<T>;\n\n// eslint-disable-next-line no-redeclare\nexport default function extractSets<T>(\n  elements: readonly T[],\n  accOrOptions?: PostprocessSetOptions | ((elem: T) => string[]),\n  o: PostprocessSetOptions = {}\n): ISets<T> {\n  const acc = typeof accOrOptions === 'function' ? accOrOptions : (e: T) => (e as unknown as { sets: string[] }).sets;\n  const options: PostprocessSetOptions = (typeof accOrOptions !== 'function' ? accOrOptions : o) ?? {};\n\n  const sets: Record<string, T[]> = Object.create(null);\n\n  elements.forEach((elem) => {\n    acc(elem).forEach((set) => {\n      const s = typeof set === 'string' ? set : String(set);\n      const r = sets[s];\n      if (r == null) {\n        sets[s] = [elem];\n      } else {\n        r.push(elem);\n      }\n    });\n  });\n  return postprocessSets(\n    Object.entries(sets).map(([set, elems]) => {\n      const r: ISet<T> = {\n        type: 'set',\n        elems,\n        name: String(set),\n        cardinality: elems.length,\n      };\n      return r;\n    }),\n    options\n  );\n}\n", "/**\n * @upsetjs/model\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { ISet, ISetCombination, ISetCombinations, ISets, SetCombinationType } from '../model';\nimport { postprocessCombinations, SortCombinationOrder, SortCombinationOrders } from './asCombinations';\nimport type { SortSetOrder } from './asSets';\nimport { SET_JOINERS } from './constants';\nimport extractSets from './extractSets';\nimport generateCombinations from './generateCombinations';\n\nexport interface ExtractCombinationsOptions<T> {\n  type?: SetCombinationType;\n\n  setOrder?: SortSetOrder;\n  setLimit?: number;\n\n  combinationOrder?: SortCombinationOrder | SortCombinationOrders;\n  combinationLimit?: number;\n\n  sets?: ISets<T>;\n\n  joiner?: string;\n}\n\ntype IWriteAbleSetCombination<T> = ISetCombination<T> & {\n  readonly elems: T[];\n  cardinality: number;\n};\n\nfunction createTree<T>(\n  byDegree: IWriteAbleSetCombination<T>[][],\n  getOrCreateCombination: (sets: string[]) => IWriteAbleSetCombination<T>\n) {\n  const children = new Map<IWriteAbleSetCombination<T>, IWriteAbleSetCombination<T>[]>();\n  // create a tree of set intersections\n  byDegree\n    .slice()\n    .reverse()\n    .forEach((csOfDegree) => {\n      if (csOfDegree.length === 0 || csOfDegree[0].degree === 1) {\n        return;\n      }\n      // compute parents by leaving one out\n      csOfDegree.forEach((c) => {\n        const sets = Array.from(c.sets).map((d) => d.name);\n        for (let i = 0; i < sets.length; i++) {\n          const subSet = sets.slice();\n          subSet.splice(i, 1);\n          const parent = getOrCreateCombination(subSet);\n          if (children.has(parent)) {\n            children.get(parent)!.push(c);\n          } else {\n            children.set(parent, [c]);\n          }\n        }\n      });\n    });\n  return children;\n}\n\n/**\n * extract sets out of a given element array, where an accessor is used to specify the set names\n * @param elements list of elements\n * @param acc accessor to get the list of sets the element belong to\n * @param options postprocess options\n */\nexport default function extractCombinations<T>(\n  elements: readonly T[],\n  acc: (elem: T) => string[],\n  options?: ExtractCombinationsOptions<T>\n): { sets: ISets<T>; combinations: ISetCombinations<T> };\n/**\n * extract sets out of a given element array which have a `.sets` property\n * @param elements\n * @param options postprocess options\n */\n// eslint-disable-next-line no-redeclare\nexport default function extractCombinations<T extends { sets: string[] }>(\n  elements: readonly T[],\n  options?: ExtractCombinationsOptions<T>\n): { sets: ISets<T>; combinations: ISetCombinations<T> };\n\n// eslint-disable-next-line no-redeclare\nexport default function extractCombinations<T>(\n  elements: readonly T[],\n  accOrOptions?: ExtractCombinationsOptions<T> | ((elem: T) => string[]),\n  o: ExtractCombinationsOptions<T> = {}\n): { sets: ISets<T>; combinations: ISetCombinations<T> } {\n  const acc = typeof accOrOptions === 'function' ? accOrOptions : (e: T) => (e as unknown as { sets: string[] }).sets;\n  const options: ExtractCombinationsOptions<T> = (typeof accOrOptions !== 'function' ? accOrOptions : o) ?? {};\n\n  const type = options.type ?? 'intersection';\n\n  // extract all sets\n  // O(N)\n  const sets =\n    options.sets ??\n    extractSets(elements, acc, {\n      limit: options.setLimit,\n      order: options.setOrder,\n    });\n\n  if (type === 'union') {\n    // TODO find more optimized way\n    return {\n      sets,\n      combinations: generateCombinations(sets, {\n        type: 'union',\n        limit: options.combinationLimit,\n        order: options.combinationOrder,\n      }),\n    };\n  }\n\n  const setLookup: Record<string, [ISet<T>, number]> = Object.create(null);\n  sets.forEach((set, i) => {\n    setLookup[set.name] = [set, i];\n  });\n  const isSortedAlphabetically = sets\n    .map((d) => d.name)\n    .sort()\n    .every((d, i) => sets[i].name === d);\n  const bySet = isSortedAlphabetically\n    ? undefined\n    : (a: string, b: string) => {\n        const ai = setLookup[a]?.[1] ?? -1;\n        const bi = setLookup[b]?.[1] ?? -1;\n        return ai - bi;\n      };\n  const validSet = options.sets == null && options.setLimit == null ? null : new Set(sets.map((d) => d.name));\n  const joiner = options.joiner ?? SET_JOINERS[type];\n  const cs: ISetCombination<T>[] = [];\n  const csLookup: Record<string, IWriteAbleSetCombination<T>> = Object.create(null);\n  const byDegree: IWriteAbleSetCombination<T>[][] = Array(sets.length + 1)\n    .fill(0)\n    .map((_) => []);\n\n  function genName(setsOfElem: string[]) {\n    switch (setsOfElem.length) {\n      case 0:\n        return '()';\n      case 1:\n        return setsOfElem[0];\n      default:\n        const sorted = setsOfElem.slice().sort(bySet);\n        const joined = sorted.join(joiner);\n        return '(' + joined + ')';\n    }\n  }\n\n  function genKey(setsOfElem: string[]) {\n    switch (setsOfElem.length) {\n      case 0:\n        return '';\n      case 1:\n        return setsOfElem[0];\n      case 2: {\n        if (\n          (bySet != null && bySet(setsOfElem[0], setsOfElem[1]) > 0) ||\n          (bySet == null && setsOfElem[1] > setsOfElem[0])\n        ) {\n          return setsOfElem[1] + '&' + setsOfElem[0];\n        }\n        return setsOfElem[0] + '&' + setsOfElem[1];\n      }\n      default:\n        const sorted = setsOfElem.slice().sort(bySet);\n        return sorted.join('&');\n    }\n  }\n\n  function getOrCreateCombination(setsOfElem: string[]) {\n    const key = genKey(setsOfElem);\n    const entry = csLookup[key];\n    if (entry) {\n      return entry;\n    }\n    const newEntry: IWriteAbleSetCombination<T> = {\n      type,\n      name: genName(setsOfElem),\n      degree: setsOfElem.length,\n      sets: new Set(setsOfElem.map((s) => setLookup[s]![0])),\n      cardinality: 0,\n      elems: [],\n    };\n    csLookup[key] = newEntry;\n    cs.push(newEntry);\n    byDegree[newEntry.degree]!.push(newEntry);\n    return newEntry;\n  }\n\n  // O(N)\n  elements.forEach((elem) => {\n    let setsOfElem = acc(elem);\n    if (validSet) {\n      setsOfElem = setsOfElem.filter((d) => validSet.has(d));\n    }\n    const c = getOrCreateCombination(setsOfElem);\n    c.elems.push(elem);\n    (c as { cardinality: number }).cardinality++;\n  });\n\n  const finalize = () => {\n    return {\n      sets,\n      combinations: postprocessCombinations(sets, cs, {\n        order: options.combinationOrder,\n        limit: options.combinationLimit,\n      }),\n    };\n  };\n\n  if (type === 'distinctIntersection') {\n    // no need to aggregate\n    return finalize();\n  }\n\n  // O(N*log(N))\n  const children = createTree(byDegree, getOrCreateCombination);\n\n  function visit(node: IWriteAbleSetCombination<T>, visited: Set<IWriteAbleSetCombination<T>>, agg: T[][]) {\n    if (visited.has(node)) {\n      return;\n    }\n    visited.add(node);\n    if (node.elems.length < 1000) {\n      agg[0].push(...node.elems);\n    } else {\n      agg.push(node.elems);\n    }\n    (children.get(node) ?? []).forEach((child) => visit(child, visited, agg));\n  }\n\n  byDegree.slice(1).forEach((level) => {\n    // aggregate all children into a node by level\n    // A = A + A&B + A&C + A&B&C\n    // A&B = A&B + A&B&C\n    level.forEach((node) => {\n      const visited = new Set<IWriteAbleSetCombination<T>>();\n      const agg: T[][] = [node.elems];\n      (children.get(node) ?? []).forEach((child) => {\n        visit(child, visited, agg);\n      });\n      const elems = agg.length === 1 ? agg[0] : agg.flat();\n      Object.assign(node, { elems, cardinality: elems.length });\n    });\n  });\n\n  return finalize();\n}\n", "/**\n * @upsetjs/model\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nexport interface IBaseSet<T = any> {\n  /**\n   * name of the set\n   */\n  readonly name: string;\n  /**\n   * optional set color\n   */\n  readonly color?: string;\n  /**\n   * elements in this set\n   */\n  readonly elems: readonly T[];\n  /**\n   * number of elements in the set\n   */\n  readonly cardinality: number;\n  /**\n   * custom overlap computation function\n   * @param o to compare with\n   */\n  overlap?(o: ISetLike<T> | readonly T[]): number;\n}\n\nexport interface ISet<T = any> extends IBaseSet<T> {\n  /**\n   * a fixed set type to separate between sets and set combinations\n   */\n  readonly type: 'set';\n}\n\nexport interface IBaseSetCombination<T> extends IBaseSet<T> {\n  /**\n   * sets this set intersection is composed of\n   */\n  readonly sets: ReadonlySet<ISet<T>>;\n  /**\n   * number of set in this set intersection\n   */\n  readonly degree: number;\n}\n\nexport interface ISetIntersection<T = any> extends IBaseSetCombination<T> {\n  /**\n   * whether it is a set or an intersection\n   */\n  readonly type: 'intersection';\n}\n\nexport interface IDistinctSetIntersection<T = any> extends IBaseSetCombination<T> {\n  /**\n   * whether it is a set or an intersection\n   */\n  readonly type: 'distinctIntersection';\n}\n\nexport interface ISetUnion<T = any> extends IBaseSetCombination<T> {\n  /**\n   * whether it is a set or an intersection\n   */\n  readonly type: 'union';\n}\n\nexport interface ISetComposite<T = any> extends IBaseSetCombination<T> {\n  /**\n   * whether it is a set or an intersection\n   */\n  readonly type: 'composite';\n}\n\n/**\n * union of all set combination types\n */\nexport type ISetCombination<T = any> =\n  | ISetIntersection<T>\n  | ISetUnion<T>\n  | ISetComposite<T>\n  | IDistinctSetIntersection<T>;\n\nexport type SetCombinationType = 'intersection' | 'union' | 'composite' | 'distinctIntersection';\n/**\n * union of a set or a set combination\n */\nexport type ISetLike<T = any> = ISet<T> | ISetCombination<T>;\n\n/**\n * readonly array of sets\n */\nexport type ISets<T = any> = readonly ISet<T>[];\n/**\n * readonly array of set combinations\n */\nexport type ISetCombinations<T = any> = readonly ISetCombination<T>[];\n/**\n * readonly array of set like objects\n */\nexport type ISetLikes<T = any> = readonly ISetLike<T>[];\n\n/**\n * helper method to generate a key for a given set\n * @param s the set to compute the key for\n */\nexport function toKey(s: ISetLike<any>) {\n  return `${s.name}:${s.type}#${s.cardinality}`;\n}\n", "/**\n * @upsetjs/model\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport { ISetCombination, ISetCombinations, ISetLike, toKey as toDefaultKey } from '../model';\nimport { isSet } from '../validators';\nimport type { ISetOverlapFunction } from './setOverlap';\n\ninterface CommonInfo {\n  done: null | number;\n  aKey: string;\n  bKey: string;\n  aIsSet: boolean;\n  bIsSet: boolean;\n  toKey: (set: ISetLike<unknown>) => string;\n}\n\nfunction isUniverse(s: ISetCombination<any>) {\n  return s.sets.size === 0;\n}\n\n/**\n * common compare helper\n * ! when done is set i.e., not null there is no guarantee for any other value\n * @param a\n * @param b\n * @param toKey\n */\nexport function common<T>(a: ISetLike<T>, b: ISetLike<T>, toKey = toDefaultKey) {\n  const r: CommonInfo = {\n    done: null,\n    aKey: '',\n    bKey: '',\n    aIsSet: false,\n    bIsSet: false,\n    toKey,\n  };\n  if (a === b) {\n    r.done = a.cardinality;\n    return r;\n  }\n  if (a.cardinality === 0 || b.cardinality === 0) {\n    r.done = 0;\n    return r;\n  }\n  r.aKey = toKey(a);\n  r.bKey = toKey(b);\n  if (r.aKey === r.bKey) {\n    r.done = a.cardinality;\n    return r;\n  }\n  r.aIsSet = isSet(a);\n  r.bIsSet = isSet(b);\n\n  if ((!r.aIsSet && isUniverse(a as ISetCombination<T>)) || (!r.bIsSet && isUniverse(b as ISetCombination<T>))) {\n    // no overlap to the universe which is everything besides the elements\n    r.done = 0;\n    return r;\n  }\n\n  // cannot decide yet\n  return r;\n}\n\nexport function aInB<T>(b: ISetLike<T>, r: CommonInfo) {\n  if (r.bIsSet || !r.aIsSet) {\n    return false;\n  }\n  return Array.from((b as ISetCombination<T>).sets)\n    .map(r.toKey)\n    .includes(r.aKey);\n}\n\nexport function bInA<T>(a: ISetLike<T>, r: CommonInfo) {\n  if (!r.bIsSet || r.aIsSet) {\n    return false;\n  }\n  return Array.from((a as ISetCombination<T>).sets)\n    .map(r.toKey)\n    .includes(r.bKey);\n}\n\nexport function keyedCombinations<T>(combinations: ISetCombinations<T>, toKey = toDefaultKey) {\n  return combinations.map((c) => {\n    const s = Array.from(c.sets).map(toKey).sort();\n    return {\n      key: s.join('&'),\n      s,\n      sets: new Set(s),\n      degree: c.degree,\n      cardinality: c.cardinality,\n    };\n  });\n}\n\nexport function combinedKey<T>(a: ISetLike<T>, b: ISetLike<T>, r: CommonInfo) {\n  const sets = new Set<string>();\n  if (r.aIsSet) {\n    sets.add(r.aKey);\n  } else {\n    for (const s of Array.from((a as ISetCombination<T>).sets)) {\n      sets.add(r.toKey(s));\n    }\n  }\n  if (r.bIsSet) {\n    sets.add(r.bKey);\n  } else {\n    for (const s of Array.from((b as ISetCombination<T>).sets)) {\n      sets.add(r.toKey(s));\n    }\n  }\n  return Array.from(sets).sort().join('&');\n}\n\nexport function generateDistinctOverlapFunction<T>(\n  combinations: ISetCombinations<T>,\n  fallback: ISetOverlapFunction<T>,\n  toKey: (s: ISetLike<T>) => string = toDefaultKey\n): ISetOverlapFunction<T> {\n  const combinationsBySet = new Map<string, { cardinality: number; sets: Set<string> }[]>();\n  for (const c of keyedCombinations(combinations, toKey)) {\n    for (const s of c.s) {\n      if (combinationsBySet.has(s)) {\n        combinationsBySet.get(s)!.push(c);\n      } else {\n        combinationsBySet.set(s, [c]);\n      }\n    }\n  }\n\n  return (a: ISetLike<T>, b: ISetLike<T>) => {\n    const r = common(a, b, toKey);\n    if (r.done != null) {\n      return r.done;\n    }\n    if (!r.aIsSet && !r.bIsSet) {\n      // by definition combinations are distinct thus if not a set in involved they overlap is 0\n      return 0;\n    }\n    if (r.aIsSet && !r.bIsSet) {\n      // if a is a set and a subset -> subset else no overlap since distinct\n      return aInB(b, r) ? b.cardinality : 0;\n    }\n    if (!r.aIsSet && r.bIsSet) {\n      // if a is a set and a subset -> subset else no overlap since distinct\n      return bInA(a, r) ? a.cardinality : 0;\n    }\n    // both are sets solution are all combinations which have both in their key\n    // e.g. A&B = A&B + A&B&C\n    const hasA = combinationsBySet.get(r.aKey);\n    const hasB = combinationsBySet.get(r.bKey);\n    if (!hasA || !hasB) {\n      return fallback(a, b);\n    }\n    if (hasA.length < hasB.length) {\n      return hasA.reduce((acc, c) => acc + (c.sets.has(r.bKey) ? c.cardinality : 0), 0);\n    }\n    return hasB.reduce((acc, c) => acc + (c.sets.has(r.aKey) ? c.cardinality : 0), 0);\n  };\n}\n\nexport function generateIntersectionOverlapFunction<T>(\n  combinations: ISetCombinations<T>,\n  fallback: ISetOverlapFunction<T>,\n  toKey: (s: ISetLike<T>) => string = toDefaultKey\n): ISetOverlapFunction<T> {\n  const combinationsByKey = new Map(keyedCombinations(combinations, toKey).map((d) => [d.key, d.cardinality]));\n\n  return (a: ISetLike<T>, b: ISetLike<T>) => {\n    const r = common(a, b, toKey);\n    if (r.done != null) {\n      return r.done;\n    }\n    if (r.aIsSet && !r.bIsSet && aInB(b, r)) {\n      // own subset thus all of the intersection\n      return b.cardinality;\n    }\n    if (!r.aIsSet && r.bIsSet && bInA(a, r)) {\n      // own subset thus all of the intersection\n      return a.cardinality;\n    }\n    const key = combinedKey(a, b, r);\n    if (!combinationsByKey.has(key)) {\n      return fallback(a, b);\n    }\n    // get A&B\n    return combinationsByKey.get(key)!;\n  };\n}\n\nexport function generateUnionOverlapFunction<T>(\n  combinations: ISetCombinations<T>,\n  fallback: ISetOverlapFunction<T>,\n  toKey: (s: ISetLike<T>) => string = toDefaultKey\n): ISetOverlapFunction<T> {\n  const combinationsByKey = new Map(keyedCombinations(combinations, toKey).map((d) => [d.key, d.cardinality]));\n\n  return (a: ISetLike<T>, b: ISetLike<T>) => {\n    const r = common(a, b, toKey);\n    if (r.done != null) {\n      return r.done;\n    }\n    if (r.aIsSet && !r.bIsSet && aInB(b, r)) {\n      // own subset thus all of the main set, since with union it can just grow\n      return a.cardinality;\n    }\n    if (!r.aIsSet && r.bIsSet && bInA(a, r)) {\n      // own subset thus all of the main set, since with union it can just grow\n      return b.cardinality;\n    }\n    const key = combinedKey(a, b, r);\n    if (!combinationsByKey.has(key)) {\n      return fallback(a, b);\n    }\n    //A&B = A+B - AUB\n    return a.cardinality + b.cardinality - combinationsByKey.get(key)!;\n  };\n}\n\nexport function generateOverlapFunction<T>(\n  combinations: ISetCombinations<T>,\n  fallback: ISetOverlapFunction<T>,\n  toKey: (s: ISetLike<T>) => string = toDefaultKey\n): ISetOverlapFunction<T> {\n  if (combinations.length === 0) {\n    return fallback;\n  }\n  const firstType = combinations[0].type;\n  if (combinations.some((s) => s.type !== firstType)) {\n    // cannot compute a guess since mixed types\n    return fallback;\n  }\n  switch (firstType) {\n    case 'union':\n      return generateUnionOverlapFunction(combinations, fallback, toKey);\n    case 'intersection':\n      return generateIntersectionOverlapFunction(combinations, fallback, toKey);\n    case 'distinctIntersection':\n      return generateDistinctOverlapFunction(combinations, fallback, toKey);\n  }\n  return fallback;\n}\n", "/**\n * @upsetjs/model\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport { ISetCombinations, ISetLike, ISets, toKey as toKeyImpl } from '../model';\nimport { SetOverlap, setOverlapFactory, ISetOverlapFunction } from './setOverlap';\n\nexport interface GenerateOverlapLookupOptions<T> {\n  toElemKey?(v: T): string;\n  what?: keyof SetOverlap;\n  compress?: 'no' | 'yes' | 'auto';\n}\n\n/**\n * compresses a given line, the idea is to reduce elements with the same value,\n * e.g., 1,2,2,2,2,2,3 is compressed to 1,2=4,3\n */\nfunction compressLine(line: readonly number[]) {\n  if (line.length === 0) {\n    return '';\n  }\n  const r: string[] = [];\n  let start = line[0];\n  let len = 1;\n  for (let i = 1; i < line.length; i++) {\n    const v = line[i];\n    if (v === start) {\n      len++;\n    } else {\n      if (len > 1) {\n        r.push(`${start}=${len - 1}`);\n      } else if (start === 0) {\n        r.push('');\n      } else {\n        r.push(start.toString());\n      }\n      start = v;\n      len = 1;\n    }\n  }\n  if (len > 1) {\n    r.push(`${start}=${len}`);\n  } else if (start === 0) {\n    r.push('');\n  } else {\n    r.push(start.toString());\n  }\n\n  return r.join(',');\n}\n\nfunction decompressLine(line: string): readonly number[] {\n  if (line.length === 0) {\n    return [];\n  }\n  return line\n    .split(',')\n    .map((v) => {\n      if (v === '') {\n        return 0;\n      }\n      if (v.includes('=')) {\n        const [value, length] = v.split('=').map((v) => Number.parseInt(v, 10));\n        return Array(length + 1).fill(value);\n      }\n      return Number.parseInt(v, 10);\n    })\n    .flat();\n}\n\nfunction compressMatrix(matrix: readonly (readonly number[])[]) {\n  if (matrix.length === 0) {\n    return '';\n  }\n  const rows = matrix.length;\n  const flat = matrix.flat();\n  return `${rows};${compressLine(flat)}`;\n}\n\nfunction decompressMatrix(matrix: string): readonly (readonly number[])[] {\n  if (matrix.length === 0) {\n    return [];\n  }\n  const [rowsInfo, data] = matrix.split(';');\n  const rows = Number.parseInt(rowsInfo, 10);\n  const values = decompressLine(data);\n  const r: number[][] = [];\n  let acc = 0;\n  for (let i = rows; i > 0; i--) {\n    r.push(values.slice(acc, acc + i));\n    acc += i;\n  }\n  return r;\n}\n\n/**\n * generate a (compressed) overlap lookup matrix that can be dumped and later used to lookup overlaps\n * @param sets the sets of the plot\n * @param combinations the set combinations of the plot\n * @param options additional options\n */\nexport function generateOverlapLookup<T>(\n  sets: ISets<T>,\n  combinations: ISetCombinations<T>,\n  { toElemKey, what = 'intersection', compress = 'auto' }: GenerateOverlapLookupOptions<T> = {}\n): readonly (readonly number[])[] | string {\n  // generate a distance matrix of all combinations\n  const data = (sets as ISetLike<T>[]).concat(combinations);\n\n  function overlapF(set: ISetLike<T>) {\n    if (set.overlap) {\n      return set.overlap;\n    }\n    const f = setOverlapFactory(set.elems, toElemKey);\n    return (v: ISetLike<T>) => {\n      if (v.overlap) {\n        return v.overlap(set);\n      }\n      return f(v.elems)[what];\n    };\n  }\n\n  // diagonal matrix [i][j - i - 1] = distance\n  const matrix = data.map((set, i) => {\n    const overlap = overlapF(set);\n    const r: number[] = [];\n    for (let j = i + 1; j < data.length; j++) {\n      r.push(overlap(data[j]));\n    }\n    return r;\n  });\n  matrix.pop(); // last is empty\n  if (compress === 'no') {\n    return matrix;\n  }\n  const compressed = compressMatrix(matrix);\n  if (compress === 'yes') {\n    return compressed;\n  }\n  const encodedLength = JSON.stringify(matrix).length;\n  const compressedLength = compressed.length + 2;\n  return compressedLength < encodedLength * 0.6 ? compressed : matrix;\n}\n\n/**\n * uses the given overlap lookup function to generate a compute and indices functions\n * @param matrix the compressed overlap matrix\n * @param sets the sets of the plot\n * @param combinations the set combinations of the plot\n * @param toKey\n */\nexport function generateOverlapLookupFunction<T>(\n  matrix: readonly (readonly number[])[] | string,\n  sets: ISets<T>,\n  combinations: ISetCombinations<T>,\n  toKey: (v: ISetLike<T>) => string = toKeyImpl\n): { setIndex: Map<string, number>; compute: ISetOverlapFunction<T>; combinationIndex: Map<string, number> } {\n  const lookup = typeof matrix == 'string' ? decompressMatrix(matrix) : matrix;\n  const setIndex = new Map(sets.map((set, i) => [toKey(set), i]));\n  const combinationIndex = new Map(combinations.map((set, i) => [toKey(set), i + sets.length]));\n\n  const compute: ISetOverlapFunction<T> = (a, b) => {\n    if (a === b) {\n      return a.cardinality;\n    }\n    const aKey = toKey(a);\n    const bKey = toKey(b);\n    const aIndex = setIndex.has(aKey) ? setIndex.get(aKey)! : combinationIndex.get(aKey)!;\n    const bIndex = setIndex.has(bKey) ? setIndex.get(bKey)! : combinationIndex.get(bKey)!;\n\n    if (aIndex === bIndex) {\n      return a.cardinality;\n    }\n    // diagonal matrix [i][j - i - 1] = distance\n    const row = Math.min(aIndex, bIndex);\n    const col = Math.max(aIndex, bIndex) - row - 1;\n    if (row < 0 || row >= lookup.length || col < 0 || col >= lookup[row].length) {\n      return 0;\n    }\n    return lookup[row][col];\n  };\n\n  return {\n    setIndex,\n    compute,\n    combinationIndex,\n  };\n}\n", "/**\n * @upsetjs/model\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nexport interface BandScaleLike {\n  (v: string): number | undefined;\n  bandwidth(): number;\n}\n\nexport interface BandScaleFactory {\n  (domain: string[], size: number, padding: number): BandScaleLike;\n}\n\nexport const bandScale: BandScaleFactory = (domain: string[], size: number, padding: number) => {\n  // number of blocks\n  const blocks = domain.length + padding;\n  const step = size / Math.max(1, blocks);\n  const start = size - step * domain.length;\n  const lookup = new Map(domain.map((d, i) => [d, i]));\n  const bandwidth = step / (1 + padding);\n\n  const scale = (v: string) => {\n    const index = lookup.get(v);\n    if (index == null) {\n      return undefined;\n    }\n    return start + step * index;\n  };\n  scale.bandwidth = () => bandwidth;\n\n  return scale;\n};\n", "/**\n * @upsetjs/model\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nexport interface TickOptions {\n  orientation: 'horizontal' | 'vertical';\n  fontSizeHint: number;\n}\n\nexport type NumericScaleTick = { value: number; label?: string };\n\nexport interface NumericScaleLike {\n  (v: number): number;\n  // api to be compatible with d3-scale\n  ticks(count?: number): readonly (NumericScaleTick | number)[];\n  tickFormat(): (v: number) => string;\n}\n\nexport interface NumericScaleFactory {\n  (max: number, range: [number, number], options: TickOptions): NumericScaleLike;\n}\n\nfunction hasOverlap(positions: number[], heights: number[], stride = 1) {\n  for (let i = 0; i < positions.length - stride; i += stride) {\n    const pos_i = positions[i];\n    const pos_n = positions[i + 1];\n    if (pos_i < pos_n) {\n      const right = pos_i + heights[i] / 2;\n      const left = pos_n - heights[i + 1] / 2;\n      if (right > left) {\n        return true;\n      }\n    } else {\n      const left = pos_i - heights[i] / 2;\n      const right = pos_n + heights[i + 1] / 2;\n      if (right > left) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/** @internal */\nexport function ensureLast(\n  ticks: NumericScaleTick[],\n  max: number,\n  scale: (v: number) => number,\n  heightPerTick: (v: number) => number,\n  toStr: (v: number) => string\n) {\n  let last = ticks[ticks.length - 1];\n  if (!last.label) {\n    for (let j = ticks.length - 2; j > 0; --j) {\n      if (ticks[j].label) {\n        last = ticks[j];\n        break;\n      }\n    }\n  }\n  if (last.value < max) {\n    // check if we can squeeze it in\n    const pos_l = scale(last.value);\n    const pos_max = scale(max);\n    if (pos_l < pos_max) {\n      const right = pos_l + heightPerTick(last.value) / 2;\n      const left = pos_max - heightPerTick(max) / 2;\n      if (right < left) {\n        ticks.push({ value: max, label: toStr(max) });\n      }\n    } else {\n      const left = pos_l - heightPerTick(last.value) / 2;\n      const right = pos_max + heightPerTick(max) / 2;\n      if (right < left) {\n        ticks.push({ value: max, label: toStr(max) });\n      }\n    }\n  }\n  return ticks;\n}\n\n/** @internal */\nexport function genTicks(values: number[], toStr: (v: number) => string = String, stride = 1) {\n  return values.map((v, i) => ({\n    value: v,\n    label: stride === 1 || i % stride === 0 ? toStr(v) : undefined,\n  }));\n}\n\nexport function checkValues(\n  values: number[],\n  scale: (v: number) => number,\n  heightPerTick: (v: number) => number,\n  max: number,\n  toStr: (v: number) => string\n) {\n  const positions = values.map((v) => scale(v));\n  const heights = values.map((v) => heightPerTick(v));\n\n  // check if any overlaps\n  if (!hasOverlap(positions, heights)) {\n    // we can use all\n    return ensureLast(genTicks(values, toStr), max, scale, heightPerTick, toStr);\n  }\n  if (!hasOverlap(positions, heights, 2)) {\n    // every other at least\n    return ensureLast(genTicks(values, toStr), max, scale, heightPerTick, toStr);\n  }\n  return null;\n}\n", "/**\n * @upsetjs/model\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport { NumericScaleFactory, NumericScaleTick, TickOptions, genTicks, checkValues } from './numeric';\n\nfunction toStr(v: number) {\n  return v.toLocaleString();\n}\n/**\n * @internal\n */\nexport function niceFactors(max: number, maxCount = 11) {\n  const digits = Math.max(0, Math.floor(Math.log10(max) - 0.5));\n  const factor = Math.pow(10, digits);\n  const factors = [1, 2, 5];\n\n  const r = factors.map((f) => f * factor);\n  if (digits > 0) {\n    r.unshift(factors[factors.length - 1] * Math.pow(10, digits - 1));\n  }\n  r.push(factors[0] * Math.pow(10, digits + 1));\n  const lower = Math.ceil(max / maxCount);\n  return r.filter((d) => d >= lower && d <= max);\n}\n\n/** @internal */\nexport function range(max: number, inc = 1) {\n  const values: number[] = [];\n  for (let v = 0; v <= max; v += inc) {\n    values.push(v);\n  }\n  return values;\n}\n\nfunction distributeTicks(\n  max: number,\n  maxCount: number,\n  scale: (v: number) => number,\n  heightPerTick: (v: number) => number\n): NumericScaleTick[] {\n  if (maxCount <= 0) {\n    return [];\n  }\n  const factors = niceFactors(max, maxCount);\n\n  // try out all factors\n  for (let i = 0; i < factors.length; i++) {\n    const values = range(max, factors[i]);\n    const r = checkValues(values, scale, heightPerTick, max, toStr);\n    if (r) {\n      return r;\n    }\n  }\n  // first and last only\n  return genTicks([0, max], toStr);\n}\n\nexport const linearScale: NumericScaleFactory = (max: number, range: [number, number], options: TickOptions) => {\n  const size = range[1] - range[0];\n  const domain = max;\n\n  const scale = (v: number) => {\n    const cv = Math.max(0, Math.min(v, domain));\n    const n = cv / domain;\n    return range[0] + n * size;\n  };\n  scale.ticks = (count = 10) => {\n    if (options.orientation === 'vertical') {\n      const heightPerTick = Math.ceil(options.fontSizeHint * 1.4);\n      return distributeTicks(max, count + 1, scale, () => heightPerTick);\n    }\n    const widthPerChar = options.fontSizeHint / 1.4;\n    return distributeTicks(max, count + 1, scale, (v) => Math.ceil(toStr(v).length * widthPerChar));\n  };\n  scale.tickFormat = () => toStr;\n\n  return scale;\n};\n", "/**\n * @upsetjs/model\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport { NumericScaleFactory, NumericScaleTick, genTicks, TickOptions, checkValues, ensureLast } from './numeric';\n\n/** @internal */\nexport function toStr(v: number) {\n  const orders = ['', 'k', 'M', 'G'];\n  const order = Math.max(0, Math.min(Math.floor(Math.log10(v) / 3), orders.length - 1));\n\n  const vi = Math.round(v / Math.pow(10, order * 3 - 1)) / 10;\n  return `${vi.toLocaleString()}${orders[order]}`;\n}\n\n/** @internal */\nexport function range(max: number, factor: number) {\n  const values: number[] = [];\n  const inc = Math.pow(10, factor);\n  for (let v = 1; v <= max; v *= inc) {\n    values.push(v);\n  }\n  return values;\n}\n\nfunction generateInnerTicks(max: number, factor: number) {\n  const values: NumericScaleTick[] = [];\n  const inc = 10;\n  for (let v = 1, i = 0; v <= max; v *= inc, i++) {\n    values.push({\n      value: v,\n      label: factor === 1 || i % factor === 0 ? toStr(v) : undefined,\n    });\n    for (let vv = v + v; vv < v * inc && vv < max; vv += v * factor) {\n      values.push({ value: vv });\n    }\n  }\n  return values;\n}\n\nfunction distributeTicks(\n  max: number,\n  maxCount: number,\n  scale: (v: number) => number,\n  heightPerTick: (v: number) => number\n): NumericScaleTick[] {\n  if (maxCount <= 0) {\n    return [];\n  }\n\n  for (const factor of [1, 2, 5]) {\n    const values = range(max, factor);\n    const r = checkValues(values, scale, heightPerTick, max, toStr);\n    if (r) {\n      // generate new but with hidden ticks\n      return ensureLast(generateInnerTicks(max, factor), max, scale, heightPerTick, toStr);\n    }\n  }\n  return genTicks([0, max], toStr);\n}\n\nexport const logScale: NumericScaleFactory = (max: number, range: [number, number], options: TickOptions) => {\n  const size = range[1] - range[0];\n  const domain = max < 1 ? 1 : Math.log10(max);\n\n  const scale = (v: number) => {\n    const cv = Math.max(0, Math.min(v, domain));\n    const n = cv <= 1 ? 0 : Math.log10(cv) / domain;\n    return range[0] + n * size;\n  };\n  scale.ticks = (count = 10) => {\n    if (options.orientation === 'vertical') {\n      const heightPerTick = Math.ceil(options.fontSizeHint * 1.4);\n      return distributeTicks(max, count + 1, scale, () => heightPerTick);\n    }\n    const widthPerChar = options.fontSizeHint / 1.4;\n    return distributeTicks(max, count + 1, scale, (v) => Math.ceil(toStr(v).length * widthPerChar));\n  };\n  scale.tickFormat = () => toStr;\n\n  return scale;\n};\n", "/**\n * @upsetjs/model\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\n/**\n * compresses an indices array to a string by avoiding increasing indices references.\n * e.g., 1,2,3,4 will become 1+3 (1 followed by 3 increasing numbers)\n * @param arr the array to compress\n */\nexport function compressIndicesArray(arr: readonly number[]): string {\n  if (arr.length === 0) {\n    return '';\n  }\n\n  const encoded: string[] = [];\n\n  let startIndex = 0;\n\n  const push = (i: number) => {\n    if (i === startIndex + 1) {\n      encoded.push(arr[startIndex].toString());\n    } else if (i === startIndex + 2 && i < 10) {\n      // don't save anything (1+1, vs 1,2)\n      encoded.push(`${arr[startIndex]},${arr[startIndex + 1]}`);\n    } else {\n      encoded.push(`${arr[startIndex]}+${i - startIndex - 1}`);\n    }\n    return i;\n  };\n  for (let i = 1; i < arr.length; i++) {\n    const expected = arr[i - 1] + 1;\n    const v = arr[i];\n    if (v !== expected) {\n      // slice break\n      startIndex = push(i);\n      startIndex = i;\n    }\n  }\n  push(arr.length);\n  return encoded.join(',');\n}\n\n/**\n * creates an (compressed) indices array for the given array of elements\n * @param arr the array to compress\n * @param toIndex the element to index function\n */\nexport function toIndicesArray<T>(\n  arr: readonly T[],\n  toIndex: (v: T) => number,\n  { sortAble, compress = 'auto' }: { sortAble?: boolean; compress?: 'no' | 'yes' | 'auto' } = {}\n): string | readonly number[] {\n  if (arr.length === 0) {\n    return [];\n  }\n  const base = arr.map((v) => toIndex(v));\n\n  if (compress === 'no') {\n    return base;\n  }\n\n  if (sortAble) {\n    base.sort((a, b) => a - b);\n  }\n  const encoded = compressIndicesArray(base);\n  const baseLength = JSON.stringify(base).length;\n  const encodedLength = encoded.length + 2; // for \"\"\n\n  if (\n    encodedLength < baseLength * 0.6 ||\n    baseLength - encodedLength > 50 ||\n    (compress === 'yes' && encodedLength < baseLength)\n  ) {\n    // save 40% or more than 50 characters\n    return encoded;\n  }\n  return base;\n}\n\n/**\n * reverse operation of `toIndicesArray` by supporting compressed indices notation\n * @param indices the (compressed) indices\n * @param elements the elements to refer by index\n */\nexport function fromIndicesArray<T>(indices: string | readonly number[], elements: readonly T[]): readonly T[] {\n  if (typeof indices === 'string') {\n    if (indices.length === 0) {\n      return [];\n    }\n    return indices\n      .split(',')\n      .map((s) => {\n        if (s.includes('+')) {\n          const [start, length] = s.split('+').map((si) => Number.parseInt(si, 10));\n          return elements.slice(start, start + length + 1);\n        }\n        return elements[Number.parseInt(s, 10)]!;\n      })\n      .flat() as T[];\n  }\n  return indices.map((i) => elements[i]);\n}\n", "/**\n * @upsetjs/model\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nexport function withColor<T>(v: T, s: { color?: string }): T & { color?: string } {\n  if (s.color) {\n    (v as T & { color?: string }).color = s.color;\n  }\n  return v;\n}\n", "/**\n * @upsetjs/model\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport { toIndicesArray, fromIndicesArray } from '../array';\nimport { GenerateSetCombinationsOptions, generateCombinations, asSet, asCombination } from '../data';\nimport { ISetCombinations, ISetLike, ISets, toKey as toDefaultKey, SetCombinationType } from '../model';\nimport { isSetQuery, UpSetElemQuery, UpSetSetQuery } from '../queries';\nimport type { IUpSetDumpRef } from './interfaces';\nimport { withColor } from './utils';\n\nexport interface IUpSetFromDumpConfig<T> {\n  toElemKey?(set: T): string;\n}\n\nexport function fromDump<T>(\n  dump: IUpSetDump,\n  elems: readonly T[],\n  options: IUpSetFromDumpConfig<T> = {}\n): {\n  sets: ISets<T>;\n  combinations: ISetCombinations<T>;\n  selection?: ISetLike<T> | readonly T[];\n  queries: ReadonlyArray<UpSetElemQuery<T> | UpSetSetQuery<T>>;\n} {\n  const sets: ISets<T> = dump.sets.map((set) => asSet({ ...set, elems: fromIndicesArray(set.elems, elems) }));\n  const gen = () =>\n    generateCombinations(\n      sets,\n      Object.assign(\n        { type: 'intersection' as const, elems, toElemKey: options.toElemKey },\n        dump.combinationOptions ?? {}\n      )\n    );\n  const combinations: ISetCombinations<T> = dump.combinations\n    ? dump.combinations.map((c) =>\n        asCombination({ ...c, elems: fromIndicesArray(c.elems, elems) }, c.type, (v) => v.sets.map((i) => sets[i]))\n      )\n    : gen();\n\n  function fromSetRef(ref: IUpSetDumpRef): ISetLike<T> | undefined {\n    if (ref.type === 'set') {\n      return sets[ref.index];\n    }\n    return combinations[ref.index];\n  }\n  return {\n    sets,\n    combinations,\n    selection: dump.selection\n      ? typeof dump.selection === 'string' || Array.isArray(dump.selection)\n        ? fromIndicesArray(dump.selection, elems)\n        : fromSetRef(dump.selection as IUpSetDumpRef)\n      : undefined,\n    queries: dump.queries.map((query) => {\n      if (query.set) {\n        return {\n          name: query.name,\n          color: query.color,\n          set: fromSetRef(query.set),\n        } as UpSetSetQuery<T>;\n      }\n      return {\n        name: query.name,\n        color: query.color,\n        elems: fromIndicesArray(query.elems!, elems),\n      } as UpSetElemQuery<T>;\n    }),\n  };\n}\n\nexport type UpSetCompressedIndices = readonly number[] | string;\n\nexport interface IUpSetDump {\n  sets: ReadonlyArray<{ name: string; color?: string; cardinality: number; elems: UpSetCompressedIndices }>;\n  combinations?: ReadonlyArray<{\n    name: string;\n    color?: string;\n    type: SetCombinationType;\n    sets: readonly number[];\n    degree: number;\n    cardinality: number;\n    elems: UpSetCompressedIndices;\n  }>;\n  combinationOptions?: Omit<GenerateSetCombinationsOptions, 'elems'>;\n  selection?: IUpSetDumpRef | UpSetCompressedIndices;\n  queries: ReadonlyArray<{ name: string; color: string; set?: IUpSetDumpRef; elems?: UpSetCompressedIndices }>;\n}\n\nexport interface IUpSetDumpData<T> {\n  toElemIndex(v: T): number;\n  sets: ISets<T>;\n  combinations: ISetCombinations<T>;\n  combinationOptions?: GenerateSetCombinationsOptions<T>;\n  selection?: ISetLike<T> | readonly T[];\n  queries: ReadonlyArray<UpSetElemQuery<T> | UpSetSetQuery<T>>;\n}\n\nexport interface IUpSetToDumpConfig<T> {\n  compress?: 'no' | 'yes' | 'auto';\n  toKey?(set: ISetLike<T>): string;\n}\n\nexport function toDump<T>(data: IUpSetDumpData<T>, config: IUpSetToDumpConfig<T> = {}): IUpSetDump {\n  const indicesOptions = { sortAble: true, ...config };\n  const toKey = config.toKey ?? toDefaultKey;\n  const bySetKey = new Map(data.sets.map((s, i) => [toKey(s), i]));\n  const byCombinationKey = new Map(data.combinations.map((s, i) => [toKey(s), i]));\n\n  const toSetRef = (s: ISetLike<T>): IUpSetDumpRef | UpSetCompressedIndices => {\n    if (s.type === 'set') {\n      return {\n        type: s.type,\n        index: bySetKey.get(toKey(s))!,\n      };\n    }\n    const index = byCombinationKey.get(toKey(s));\n    if (index == null || index < 0) {\n      return toIndicesArray(s.elems, data.toElemIndex, indicesOptions);\n    }\n    return {\n      type: s.type,\n      index,\n    };\n  };\n\n  const setLookup = data.sets.map((s, i) => ({\n    key: toKey(s),\n    i,\n  }));\n  return {\n    sets: data.sets.map((set) =>\n      withColor(\n        {\n          name: set.name,\n          cardinality: set.cardinality,\n          elems: toIndicesArray(set.elems, data.toElemIndex, indicesOptions),\n        },\n        set\n      )\n    ),\n    combinations:\n      config.compress === 'no'\n        ? data.combinations.map((c) => {\n            const setKeys = new Set(Array.from(c.sets).map(toKey));\n            return withColor(\n              {\n                name: c.name,\n                type: c.type,\n                cardinality: c.cardinality,\n                degree: c.degree,\n                sets: setLookup.filter(({ key }) => setKeys.has(key)).map(({ i }) => i),\n                elems: toIndicesArray(c.elems, data.toElemIndex, indicesOptions),\n              },\n              c\n            );\n          })\n        : undefined,\n    combinationOptions: data.combinationOptions,\n    selection: data.selection\n      ? Array.isArray(data.selection)\n        ? toIndicesArray(data.selection, data.toElemIndex, indicesOptions)\n        : toSetRef(data.selection as ISetLike<T>)\n      : undefined,\n    queries: data.queries.map((query) => {\n      const elems = isSetQuery(query)\n        ? toSetRef(query.set)\n        : toIndicesArray(Array.from(query.elems), data.toElemIndex, indicesOptions);\n      return {\n        name: query.name,\n        color: query.color,\n        set: typeof elems === 'string' || Array.isArray(elems) ? undefined : (elems as IUpSetDumpRef),\n        elems: typeof elems === 'string' || Array.isArray(elems) ? (elems as UpSetCompressedIndices) : undefined,\n      };\n    }),\n  };\n}\n", "/**\n * @upsetjs/model\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport { setOverlapFactory } from '../data';\nimport { SET_JOINERS } from '../data/constants';\nimport { generateOverlapLookup, generateOverlapLookupFunction } from '../data/generateOverlapLookup';\nimport {\n  ISetCombination,\n  ISetCombinations,\n  ISetLike,\n  ISets,\n  toKey as toDefaultKey,\n  SetCombinationType,\n} from '../model';\nimport { isSetQuery, UpSetElemQuery, UpSetSetQuery, UpSetCalcQuery } from '../queries';\nimport type { IUpSetDumpRef } from './interfaces';\nimport { isSetLike } from '../validators';\nimport { withColor } from './utils';\n\nexport interface UpSetFromStaticDumpFullCombination {\n  name: string;\n  type: SetCombinationType;\n  sets: readonly number[];\n  cardinality: number;\n}\n\nexport interface UpSetFromStaticDumpCompressedCombination {\n  // if missing can be derived\n  n?: string;\n  // cc ... color\n  cc?: string;\n  c: number;\n  // default: i\n  type?: 'c' | 'i' | 'u' | 'd';\n  // bit index\n  s: number;\n}\n\nexport interface IUpSetStaticDump {\n  sets: ReadonlyArray<{ name: string; color?: string; cardinality: number } | { n: string; cc?: string; c: number }>;\n  combinations: ReadonlyArray<UpSetFromStaticDumpFullCombination | UpSetFromStaticDumpCompressedCombination>;\n  selection?: IUpSetDumpRef | readonly number[];\n  queries: ReadonlyArray<{ name: string; color: string; set?: IUpSetDumpRef; overlaps?: readonly number[] }>;\n  overlaps: readonly (readonly number[])[] | string;\n}\n\nexport interface IUpSetStaticDumpData<T> {\n  sets: ISets<T>;\n  combinations: ISetCombinations<T>;\n  selection?: ISetLike<T> | readonly T[];\n  queries: ReadonlyArray<UpSetElemQuery<T> | UpSetSetQuery<T>>;\n}\n\nexport interface IUpSetToStaticDumpConfig<T> {\n  compress?: 'no' | 'yes' | 'auto';\n  toKey?(set: ISetLike<T>): string;\n  toElemKey?(set: T): string;\n}\n\nfunction generateName(sets: ISets<any>, type: SetCombinationType) {\n  if (sets.length === 1) {\n    return sets[0].name;\n  }\n  return `(${sets.map((set) => set.name).join(SET_JOINERS[type])})`;\n}\n\nexport function toStaticDump<T>(\n  data: IUpSetStaticDumpData<T>,\n  config: IUpSetToStaticDumpConfig<T> = {}\n): IUpSetStaticDump {\n  const toKey = config.toKey ?? toDefaultKey;\n  const bySetKey = new Map(data.sets.map((s, i) => [toKey(s), i]));\n  const byCombinationKey = new Map(data.combinations.map((s, i) => [toKey(s), i]));\n  const toSelectionSetRef = (s: ISetLike<T> | readonly T[]) => {\n    if (isSetLike(s)) {\n      if (s.type === 'set') {\n        return {\n          type: s.type,\n          index: bySetKey.get(toKey(s))!,\n        };\n      }\n      const index = byCombinationKey.get(toKey(s));\n      if (index != null && index >= 0) {\n        return {\n          type: s.type,\n          index,\n        };\n      }\n    }\n    const overlapF = setOverlapFactory(isSetLike(s) ? s.elems : s);\n    return data.sets\n      .map((set) => overlapF(set.elems).intersection)\n      .concat(data.combinations.map((set) => overlapF(set.elems).intersection));\n  };\n  const setIndex = new Map(data.sets.map((set, i) => [toKey(set), i]));\n\n  const overlaps = generateOverlapLookup(data.sets, data.combinations, config);\n\n  const shortNames = config.compress === 'yes';\n\n  const compressCombination = (set: ISetCombination<T>) => {\n    const partOf = Array.from(set.sets)\n      .map((s) => setIndex.get(toKey(s))!)\n      .sort((a, b) => a - b);\n    const r: {\n      n?: string;\n      cc?: string;\n      c: number;\n      s: number;\n      type?: 'c' | 'i' | 'u' | 'd';\n    } = {\n      c: set.cardinality,\n      s: partOf.reduce((acc, i) => acc + Math.pow(2, i), 0),\n    };\n    if (\n      set.name !==\n      generateName(\n        partOf.map((i) => data.sets[i]),\n        set.type\n      )\n    ) {\n      r.n = set.name;\n    }\n    if (set.type !== 'intersection') {\n      r.type = set.type[0] as 'i' | 'c' | 'u' | 'd';\n    }\n    if (set.color) {\n      r.cc = set.color;\n    }\n    return r;\n  };\n\n  return {\n    sets: shortNames\n      ? data.sets.map((set) => ({ n: set.name, cc: set.color, c: set.cardinality }))\n      : data.sets.map((set) => withColor({ name: set.name, cardinality: set.cardinality }, set)),\n    combinations: shortNames\n      ? data.combinations.map(compressCombination)\n      : data.combinations.map((set) =>\n          withColor(\n            {\n              name: set.name,\n              cardinality: set.cardinality,\n              type: set.type,\n              sets: Array.from(set.sets)\n                .map((s) => setIndex.get(toKey(s))!)\n                .sort((a, b) => a - b),\n            },\n            set\n          )\n        ),\n    overlaps,\n    selection: data.selection ? toSelectionSetRef(data.selection) : undefined,\n    queries: data.queries.map((query) => {\n      if (isSetQuery(query)) {\n        const ref = toSelectionSetRef(query.set);\n        if (Array.isArray(ref)) {\n          return {\n            name: query.name,\n            color: query.color,\n            overlaps: ref,\n          };\n        }\n        return {\n          name: query.name,\n          color: query.color,\n          set: ref,\n        };\n      }\n      const overlapF = setOverlapFactory(query.elems);\n      const overlaps = data.sets\n        .map((set) => overlapF(set.elems).intersection)\n        .concat(data.combinations.map((set) => overlapF(set.elems).intersection));\n      return {\n        name: query.name,\n        color: query.color,\n        overlaps,\n      };\n    }),\n  };\n}\n\nexport interface IUpSetFromStaticDumpConfig<T> {\n  toKey?(set: ISetLike<T>): string;\n}\n\nfunction isCompressed(\n  s: UpSetFromStaticDumpCompressedCombination | UpSetFromStaticDumpFullCombination\n): s is UpSetFromStaticDumpCompressedCombination {\n  return typeof (s as UpSetFromStaticDumpCompressedCombination).c === 'number';\n}\nfunction isCompressedSet(\n  s: { name: string; cardinality: number } | { n?: string; c: number }\n): s is { n?: string; c: number } {\n  return typeof (s as { n?: string; c: number }).c === 'number';\n}\n\nexport function fromStaticDump(\n  dump: IUpSetStaticDump,\n  config: IUpSetFromStaticDumpConfig<never> = {}\n): {\n  sets: ISets<never>;\n  combinations: ISetCombinations<never>;\n  selection?: ISetLike<never> | ((v: ISetLike<never>) => number);\n  queries: ReadonlyArray<UpSetCalcQuery<never> | UpSetSetQuery<never>>;\n} {\n  const toKey = config.toKey ?? toDefaultKey;\n  let computeF: (a: ISetLike<never>, b: ISetLike<never>) => number = () => 0;\n\n  function withOverlap<T extends ISetLike<never>>(s: T) {\n    s.overlap = (b: ISetLike<never>) => computeF(s, b);\n    return s;\n  }\n\n  const sets: ISets<never> = dump.sets.map((set) =>\n    withOverlap({\n      name: isCompressedSet(set) ? set.n : set.name,\n      cardinality: isCompressedSet(set) ? set.c : set.cardinality,\n      type: 'set',\n      elems: [] as never[],\n    })\n  );\n  const fromBit = (v: number) => {\n    return sets.filter((_, i) => {\n      const position = Math.pow(2, i);\n      return (v & position) === position;\n    });\n  };\n  const combinations: ISetCombinations<never> = dump.combinations.map((set) => {\n    const partOf = isCompressed(set) ? fromBit(set.s) : set.sets.map((i) => sets[i]);\n    const lookup = {\n      i: 'intersection' as const,\n      u: 'union' as const,\n      c: 'composite' as const,\n      d: 'distinctIntersection' as const,\n    };\n    const type = lookup[(set.type ?? 'i')[0] as 'i' | 'u' | 'c' | 'd'];\n    return withOverlap({\n      name: isCompressed(set) ? set.n ?? generateName(partOf, type) : set.name,\n      cardinality: isCompressed(set) ? set.c : set.cardinality,\n      type,\n      degree: partOf.length,\n      sets: new Set(partOf),\n      elems: [] as never[],\n    });\n  });\n\n  const { setIndex, combinationIndex, compute } = generateOverlapLookupFunction(\n    dump.overlaps,\n    sets,\n    combinations,\n    toKey\n  );\n  computeF = compute;\n\n  function fromSetRef(ref: IUpSetDumpRef): ISetLike<never> | undefined {\n    if (ref.type === 'set') {\n      return sets[ref.index];\n    }\n    return combinations[ref.index];\n  }\n\n  function generateOverlap(lookup: readonly number[]) {\n    return (v: ISetLike<never>) => {\n      const key = toKey(v);\n      const index = setIndex.has(key) ? setIndex.get(key)! : combinationIndex.get(key)!;\n      return index == null || index < 0 || index >= lookup.length ? 0 : lookup[index];\n    };\n  }\n\n  return {\n    sets,\n    combinations,\n    selection: dump.selection\n      ? Array.isArray(dump.selection)\n        ? generateOverlap(dump.selection)\n        : fromSetRef(dump.selection as IUpSetDumpRef)\n      : undefined,\n    queries: dump.queries.map((query) => {\n      if (query.set) {\n        return {\n          name: query.name,\n          color: query.color,\n          set: fromSetRef(query.set),\n        } as UpSetSetQuery<never>;\n      }\n      return {\n        name: query.name,\n        color: query.color,\n        overlap: generateOverlap(query.overlaps!),\n      } as UpSetCalcQuery<never>;\n    }),\n  };\n}\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nexport function extractStyleId(node: SVGSVGElement) {\n  return Array.from(node.classList)\n    .find((d) => d.startsWith('root-'))!\n    .slice('root-'.length);\n}\n\nexport function extractTitle(node: SVGSVGElement, styleId: string) {\n  return node.querySelector(`titleTextStyle-${styleId}`)?.textContent ?? 'UpSetJS';\n}\n\nexport function extractDescription(node: SVGSVGElement, styleId: string) {\n  return node.querySelector(`descTextStyle-${styleId}`)?.textContent ?? '';\n}\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type {\n  UpSetFontSizes,\n  UpSetMultiStyle,\n  UpSetExportOptions,\n  VennDiagramFontSizes,\n  VennDiagramMultiStyle,\n  KarnaughMapMultiStyle,\n  KarnaughMapFontSizes,\n} from './interfaces';\nimport type { GenerateSetCombinationsOptions } from '@upsetjs/model';\n\nexport const EMPTY_OBJECT = {};\nexport const EMPTY_ARRAY: any[] = [];\nexport const DEFAULT_FONT_SIZES: Required<UpSetFontSizes & VennDiagramFontSizes & KarnaughMapFontSizes> = {\n  setLabel: '16px',\n  axisTick: '10px',\n  chartLabel: '16px',\n  barLabel: '10px',\n  legend: '10px',\n  description: '16px',\n  title: '24px',\n  valueLabel: '12px',\n  exportLabel: '10px',\n};\nexport const DEFAULT_WIDTH_RATIO = [0.18, 0.12, 0.7];\nexport const DEFAULT_HEIGHT_RATIO = [0.6, 0.4];\nexport const DEFAULT_COMBINATIONS: GenerateSetCombinationsOptions = {\n  type: 'intersection',\n  order: ['cardinality:desc', 'name:asc'],\n};\n\nexport const FONT_SIZES_KEYS = /* #__PURE__ */ Object.keys(DEFAULT_FONT_SIZES) as (keyof (\n  | UpSetFontSizes\n  | VennDiagramFontSizes\n  | KarnaughMapFontSizes\n))[];\nexport const MULTI_STYLE_KEYS: (\n  | keyof UpSetMultiStyle<any>\n  | keyof VennDiagramMultiStyle<any>\n  | keyof KarnaughMapMultiStyle<any>\n)[] = [\n  'axisTick',\n  'bar',\n  'barLabel',\n  'chartLabel',\n  'dot',\n  'legend',\n  'title',\n  'description',\n  'setLabel',\n  'set',\n  'valueLabel',\n];\nexport const EXPORT_OPTION_KEYS: (keyof UpSetExportOptions)[] = ['dump', 'png', 'share', 'svg', 'vega'];\n\nexport const OVERFLOW_OPACITY_FACTOR = [0.7, 0.4];\nexport const OVERFLOW_PADDING_FACTOR = [0.15, 0.3];\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { ISets, ISetCombinations } from '@upsetjs/model';\n\nexport interface ITextLocation {\n  text: { x: number; y: number };\n}\n\nexport interface ICircle {\n  r: number;\n  cx: number;\n  cy: number;\n}\nexport interface IEllipse {\n  rx: number;\n  ry: number;\n  rotation: number;\n  cx: number;\n  cy: number;\n}\n\nexport interface ITextCircle extends ICircle, ITextLocation {\n  align: 'start' | 'end' | 'middle';\n  verticalAlign: 'top' | 'bottom';\n}\nexport interface ITextEllipse extends IEllipse, ITextLocation {\n  align: 'start' | 'end' | 'middle';\n  verticalAlign: 'top' | 'bottom';\n}\n\n// could be slice\nexport interface IArc {\n  x2: number;\n  y2: number;\n  sweep: boolean;\n  large: boolean;\n\n  ref: number;\n  mode: 'i' | 'o';\n}\n\nexport interface IArcSlice {\n  sets: readonly number[];\n  x1: number;\n  y1: number;\n  arcs: readonly IArc[];\n  path?: string;\n}\n\nexport interface ITextArcSlice extends IArcSlice, ITextLocation {}\n\nexport interface IUniverseSet extends IArcSlice {\n  width: number;\n  height: number;\n}\n\nexport interface ITextUniverseSet extends IUniverseSet, ITextLocation {}\n\nexport interface IVennDiagramLayoutGenerator {\n  readonly maxSets: number;\n  compute<T>(sets: ISets<T>, combinations: ISetCombinations<T>, width: number, height: number): IVennDiagramLayout;\n}\n\nexport interface IVennDiagramLayout {\n  sets: (ITextCircle | ITextEllipse)[];\n  universe?: ITextUniverseSet;\n  intersections: ITextArcSlice[];\n}\n\nexport function isEllipse(d: ICircle | IEllipse): d is IEllipse {\n  return typeof (d as ITextEllipse).rx === 'number';\n}\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { ISetCombinations, ISets } from '@upsetjs/model';\nimport venn0 from './data/venn0.json';\nimport venn1 from './data/venn1.json';\nimport venn2 from './data/venn2.json';\nimport venn3 from './data/venn3.json';\nimport venn4 from './data/venn4.json';\nimport venn5 from './data/venn5.json';\nimport { isEllipse, ITextArcSlice, ITextCircle, ITextEllipse, IVennDiagramLayoutGenerator } from './interfaces';\n\ninterface ILayout {\n  sets: (ITextCircle | ITextEllipse)[];\n  intersections: ITextArcSlice[];\n  bb: { x: number; y: number; width: number; height: number };\n}\n\nexport const vennDiagramLayout: IVennDiagramLayoutGenerator = {\n  maxSets: 5,\n  compute<T>(sets: ISets<T>, _combinations: ISetCombinations<T>, width: number, height: number) {\n    return layoutImpl(sets.length, width, height);\n  },\n};\n\nexport function layoutImpl(sets: number, width: number, height: number) {\n  const lookup = [venn0, venn1, venn2, venn3, venn4, venn5];\n  const r = lookup[Math.min(lookup.length - 1, sets)] as ILayout;\n  const f = Math.min(width / r.bb.width, height / r.bb.height);\n  const x = f * -r.bb.x + (width - f * r.bb.width) / 2;\n  const y = f * -r.bb.y + (height - f * r.bb.height) / 2;\n  const mx = (v: number) => x + f * v;\n  const my = (v: number) => y + f * v;\n\n  return {\n    sets: r.sets.map((c) =>\n      Object.assign(\n        {},\n        c,\n        {\n          cx: mx(c.cx),\n          cy: my(c.cy),\n          text: {\n            x: mx(c.text.x),\n            y: my(c.text.y),\n          },\n        },\n        isEllipse(c)\n          ? {\n              rx: c.rx * f,\n              ry: c.ry * f,\n            }\n          : {\n              r: c.r * f,\n            }\n      )\n    ),\n    intersections: r.intersections.map((c) => ({\n      text: {\n        x: mx(c.text.x),\n        y: my(c.text.y),\n      },\n      x1: mx(c.x1),\n      y1: my(c.y1),\n      sets: c.sets,\n      arcs: c.arcs.map((a) =>\n        Object.assign({}, a, {\n          x2: mx(a.x2),\n          y2: my(a.y2),\n        })\n      ),\n    })),\n  };\n}\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport React from 'react';\nimport { ISetCombinations, GenerateSetCombinationsOptions, toKey } from '@upsetjs/model';\nimport {\n  DEFAULT_COMBINATIONS,\n  DEFAULT_HEIGHT_RATIO,\n  EMPTY_ARRAY,\n  DEFAULT_FONT_SIZES,\n  EMPTY_OBJECT,\n  DEFAULT_WIDTH_RATIO,\n} from './defaults';\nimport type {\n  UpSetThemeProps,\n  UpSetProps,\n  UpSetFullProps,\n  UpSetFullPropsG,\n  VennDiagramProps,\n  VennDiagramFullProps,\n  VennDiagramFullPropsG,\n  UpSetPropsG,\n  VennDiagramPropsG,\n  VennDiagramThemeProps,\n  UpSetThemes,\n  KarnaughMapPropsG,\n  KarnaughMapFullPropsG,\n  KarnaughMapProps,\n  KarnaughMapFullProps,\n} from './interfaces';\nimport { vennDiagramLayout } from './venn/layout/vennDiagramLayout';\n\nexport declare type UpSetExtraTheme = {\n  backgroundColor: string;\n};\n\nconst lightTheme: Required<UpSetThemeProps & VennDiagramThemeProps & UpSetExtraTheme> = {\n  selectionColor: '#ffa500',\n  color: '#000000',\n  hasSelectionColor: '',\n  opacity: 1,\n  hasSelectionOpacity: -1,\n  textColor: '#000000',\n  hoverHintColor: '#cccccc',\n  notMemberColor: '#d3d3d3',\n  alternatingBackgroundColor: 'rgba(0,0,0,0.05)',\n  valueTextColor: '#000000',\n  strokeColor: '#000000',\n  backgroundColor: '#ffffff',\n  filled: false,\n};\n\nconst darkTheme: Required<UpSetThemeProps & VennDiagramThemeProps & UpSetExtraTheme> = {\n  selectionColor: '#ffa500',\n  color: '#cccccc',\n  hasSelectionColor: '',\n  opacity: 1,\n  hasSelectionOpacity: -1,\n  textColor: '#ffffff',\n  hoverHintColor: '#d9d9d9',\n  notMemberColor: '#666666',\n  alternatingBackgroundColor: 'rgba(255, 255, 255, 0.2)',\n  valueTextColor: '#ffffff',\n  strokeColor: '#ffffff',\n  backgroundColor: '#303030',\n  filled: false,\n};\n\nconst vegaTheme: Readonly<Required<UpSetThemeProps & VennDiagramThemeProps & UpSetExtraTheme>> = {\n  selectionColor: '#4c78a8',\n  color: '#4c78a8',\n  hasSelectionColor: '#c9d6e5',\n  opacity: 1,\n  hasSelectionOpacity: -1,\n  textColor: '#000000',\n  hoverHintColor: '#cccccc',\n  notMemberColor: '#d3d3d3',\n  alternatingBackgroundColor: 'rgba(0,0,0,0.05)',\n  valueTextColor: '#000000',\n  strokeColor: '#000000',\n  backgroundColor: '#ffffff',\n  filled: true,\n};\n\nexport function getDefaultTheme(\n  theme?: UpSetThemes\n): Readonly<Required<UpSetThemeProps & VennDiagramThemeProps & UpSetExtraTheme>> {\n  return theme === 'vega' ? vegaTheme : theme === 'dark' ? darkTheme : lightTheme;\n}\nfunction areCombinations<T>(\n  combinations: ISetCombinations<T> | GenerateSetCombinationsOptions\n): combinations is ISetCombinations<T> {\n  return Array.isArray(combinations);\n}\n\nfunction styleFactory(rules: string) {\n  return <style>{rules}</style>;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction fillGeneric<T extends {}>(\n  base: T,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  props: { theme?: UpSetThemes; fontSizes?: {}; queries?: readonly unknown[] },\n  others = {}\n) {\n  const theme = getDefaultTheme(props.theme);\n  return Object.assign(\n    base,\n    {\n      queryLegend: props.queries != null && props.queries.length > 0,\n      theme: 'light',\n      padding: 20,\n      selection: null,\n      title: '',\n      description: '',\n      fontFamily: 'sans-serif',\n      queries: EMPTY_ARRAY,\n      exportButtons: true,\n      className: '',\n      fontSizes: DEFAULT_FONT_SIZES,\n      classNames: EMPTY_OBJECT,\n      style: EMPTY_OBJECT,\n      styles: EMPTY_OBJECT,\n      toKey,\n      tooltips: true,\n      styleFactory,\n    },\n    theme,\n    props,\n    others,\n    props.fontSizes\n      ? {\n          fontSizes: Object.assign({}, DEFAULT_FONT_SIZES, props.fontSizes),\n        }\n      : EMPTY_OBJECT\n  );\n}\n\n/**\n * helper methods to fill up partial UpSet.js properties with their default values\n */\nexport function fillDefaultsG<T, C, N, L = N>(props: UpSetPropsG<T, C, N, L>): UpSetFullPropsG<T, C, N, L> {\n  return fillGeneric(\n    {\n      barPadding: 0.3,\n      dotPadding: 0.7,\n      combinations: DEFAULT_COMBINATIONS,\n      combinationName:\n        props.combinations != null && !areCombinations(props.combinations) && props.combinations.type === 'union'\n          ? 'Union Size'\n          : 'Intersection Size',\n      barLabelOffset: 2,\n      setNameAxisOffset: 'auto',\n      combinationNameAxisOffset: 'auto',\n      setName: 'Set Size',\n      widthRatios: DEFAULT_WIDTH_RATIO,\n      heightRatios: DEFAULT_HEIGHT_RATIO,\n      setLabelAlignment: 'center',\n      numericScale: 'linear',\n      bandScale: 'band',\n      childrenFactories: EMPTY_OBJECT,\n      setAddons: EMPTY_ARRAY,\n      combinationAddons: EMPTY_ARRAY,\n      setAddonPadding: 1,\n      combinationAddonPadding: 1,\n      emptySelection: true,\n    },\n    props\n  );\n}\n\nfunction valueFormat(v: number) {\n  return v.toLocaleString();\n}\n\nexport function fillDefaults<T = any>(props: UpSetProps<T>): UpSetFullProps<T> {\n  return fillDefaultsG<T, React.CSSProperties, React.ReactNode, React.ReactNode>(props);\n}\n\n/**\n * helper methods to fill up partial UpSet.js properties with their default values\n */\nexport function fillVennDiagramDefaultsG<T, C, N, L = N>(\n  props: VennDiagramPropsG<T, C, N, L>\n): VennDiagramFullPropsG<T, C, N, L> {\n  return fillGeneric(\n    {\n      valueFormat,\n      layout: vennDiagramLayout,\n      setLabelOffsets: EMPTY_ARRAY,\n    },\n    props,\n    {\n      exportButtons:\n        props.exportButtons === false\n          ? false\n          : Object.assign({}, props.exportButtons === true ? {} : props.exportButtons, { vega: false }),\n    }\n  );\n}\n\nexport function fillVennDiagramDefaults<T = any>(props: VennDiagramProps<T>): VennDiagramFullProps<T> {\n  return fillVennDiagramDefaultsG<T, React.CSSProperties, React.ReactNode, React.ReactNode>(props);\n}\n\n/**\n * helper methods to fill up partial UpSet.js properties with their default values\n */\nexport function fillKarnaughMapDefaultsG<T, C, N, L = N>(\n  props: KarnaughMapPropsG<T, C, N, L>\n): KarnaughMapFullPropsG<T, C, N, L> {\n  return fillGeneric(\n    {\n      numericScale: 'linear',\n      barPadding: 0.3,\n      barLabelOffset: 2,\n      combinationName: 'Intersection Size',\n      combinationNameAxisOffset: 'auto',\n    },\n    props,\n    {\n      exportButtons:\n        props.exportButtons === false\n          ? false\n          : Object.assign({}, props.exportButtons === true ? {} : props.exportButtons, { vega: false }),\n    }\n  );\n}\n\nexport function fillKarnaughMapDefaults<T = any>(props: KarnaughMapProps<T>): KarnaughMapFullProps<T> {\n  return fillKarnaughMapDefaultsG<T, React.CSSProperties, React.ReactNode, React.ReactNode>(props);\n}\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport { extractStyleId, extractTitle } from './utils';\nimport { getDefaultTheme } from '../fillDefaults';\nimport type { UpSetThemes } from '../interfaces';\n\nexport function createSVG(node: SVGSVGElement, toRemove?: string) {\n  const clone = node.cloneNode(true) as SVGSVGElement;\n  clone.style.backgroundColor = getDefaultTheme(node.dataset.theme as UpSetThemes).backgroundColor;\n\n  if (toRemove) {\n    Array.from(clone.querySelectorAll(toRemove)).forEach((d) => d.remove());\n  }\n  return new XMLSerializer().serializeToString(clone);\n}\n\n/**\n * helper method to export an download an SVG image\n * @param node the SVG element to download\n * @param options additional options\n */\nexport function exportSVG(\n  node: SVGSVGElement,\n  { type = 'png', title, toRemove }: { type?: 'png' | 'svg'; title?: string; toRemove?: string }\n): Promise<void> {\n  const b = new Blob([createSVG(node, toRemove)], {\n    type: 'image/svg+xml;charset=utf-8',\n  });\n  const styleId = extractStyleId(node);\n\n  const chartTitle = title ?? extractTitle(node, styleId);\n  const url = URL.createObjectURL(b);\n  if (type === 'svg') {\n    downloadUrl(url, `${chartTitle}.${type}`, node.ownerDocument!);\n    URL.revokeObjectURL(url);\n    return Promise.resolve();\n  }\n  return toPNG(url, node).then((purl) => {\n    downloadUrl(purl, `${chartTitle}.${type}`, node.ownerDocument!);\n    URL.revokeObjectURL(url);\n  });\n}\n\nfunction toPNG(url: string, node: SVGGElement) {\n  const canvas = node.ownerDocument!.createElement('canvas');\n  const bb = node.getBoundingClientRect();\n  canvas.width = bb.width;\n  canvas.height = bb.height;\n  const ctx = canvas.getContext('2d')!;\n  const img = new Image(canvas.width, canvas.height);\n\n  return new Promise<string>((resolve) => {\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0);\n      const png = canvas.toDataURL('image/png');\n      resolve(png);\n    };\n    img.src = url;\n  });\n}\n\n/**\n * helper method to download a given url in the browser\n * @param url the url to download\n * @param title the desired file name\n * @param doc the root document\n */\nexport function downloadUrl(url: string, title: string, doc: Document) {\n  const a = doc.createElement('a');\n  a.href = url;\n  a.style.position = 'absolute';\n  a.style.left = '-10000px';\n  a.style.top = '-10000px';\n  a.download = title;\n  doc.body.appendChild(a);\n  a.click();\n  a.remove();\n}\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport { downloadUrl } from './exportSVG';\nimport { extractDescription, extractTitle, extractStyleId } from './utils';\nimport type { UpSetThemes } from '../interfaces';\nimport { getDefaultTheme } from '../fillDefaults';\n\nexport function createVegaSpec(svg: SVGSVGElement, title?: string) {\n  const resolveStyle: (elt: Element, pseudoElt?: string | null | undefined) => CSSStyleDeclaration =\n    ((svg as any).getComputedStyle || svg.ownerDocument?.defaultView?.getComputedStyle) ?? window.getComputedStyle;\n  const styleId = extractStyleId(svg);\n\n  const chartTitle = title ?? extractTitle(svg, styleId);\n\n  const sets: { name: string; cardinality: number; selection?: number }[] = Array.from(\n    svg.querySelectorAll<HTMLElement>('[data-upset=sets] [data-cardinality]')\n  )\n    .map((set) => {\n      return {\n        name: set.querySelector(`text.setTextStyle-${styleId}`)!.textContent!,\n        cardinality: Number.parseInt(set.dataset.cardinality!, 10),\n      };\n    })\n    .reverse();\n  const barLabelOffset = -Number.parseFloat(svg.querySelector(`.sBarTextStyle-${styleId}`)!.getAttribute('dx')!);\n  const color = resolveStyle(svg.querySelector(`.fillPrimary-${styleId}`)!).fill;\n  const fillNotMember = resolveStyle(svg.querySelector(`.fillNotMember-${styleId}`)!).fill;\n  const textColor = resolveStyle(svg.querySelector('text')!).fill;\n  const csName = svg.querySelector(`.cChartTextStyle-${styleId}`)!.textContent!;\n  const setName = svg.querySelector(`.sChartTextStyle-${styleId}`)!.textContent!;\n\n  const combinations: { name: string; cardinality: number; selection?: number; sets: string[] }[] = Array.from(\n    svg.querySelectorAll<HTMLElement>('[data-upset=cs] [data-cardinality]')\n  ).map((set) => {\n    return {\n      name: set.querySelector(`text.hoverBarTextStyle-${styleId}`)!.textContent!,\n      cardinality: Number.parseInt(set.dataset.cardinality!, 10),\n      sets: Array.from(set.querySelectorAll<HTMLElement>(`.fillPrimary-${styleId} > title`)).map((n) => n.textContent!),\n    };\n  });\n\n  const translateX = (v: Element) => Number.parseFloat(v.getAttribute('transform')!.match(/([\\d.]+),/)![1]);\n  const translateY = (v: Element) => Number.parseFloat(v.getAttribute('transform')!.match(/,([\\d.]+)/)![1]);\n  const base = svg.querySelector('[data-upset=base]')!;\n  const padding = translateX(base);\n  // combination axis block\n  const setWidth = translateX(svg.querySelector('[data-upset=csaxis]')!);\n  // axisline\n  const csWidth = Number.parseFloat(base.querySelector('g')!.firstElementChild!.children[1]!.getAttribute('x2')!);\n  // set axis block\n  const csHeight = translateY(svg.querySelector('[data-upset=setaxis]')!);\n  // set label clip path\n  const labelWidth = Number.parseFloat(svg.querySelector('defs rect')!.getAttribute('width')!);\n  const setHeight = Number.parseFloat(svg.querySelector('defs rect')!.getAttribute('height')!);\n\n  const radius = Number.parseFloat(\n    svg.querySelector(`[data-cardinality] circle.fillPrimary-${styleId}`)!.getAttribute('r')!\n  );\n\n  const hasPrimarySelection = svg.querySelector('[data-upset=sets-s] [data-cardinality]') != null;\n  const hasQuery = svg.querySelector('[data-upset=sets-q] [data-cardinality]') != null;\n  const hasSelection = hasPrimarySelection || hasQuery;\n\n  let selectionColor = 'orange';\n  if (hasSelection) {\n    // inject the selection data\n    Array.from(\n      svg.querySelectorAll<HTMLElement>(\n        `[data-upset=sets-${hasPrimarySelection ? 's]' : 'q]:first-of-type'} [data-cardinality]`\n      )\n    ).forEach((elem) => {\n      // since artificially reversed\n      const i = sets.length - Number.parseInt(elem.dataset.i!, 10) - 1;\n      sets[i].selection = Number.parseInt(elem.dataset.cardinality!, 10);\n    });\n    Array.from(\n      svg.querySelectorAll<HTMLElement>(\n        `[data-upset=cs-${hasPrimarySelection ? 's]' : 'q]:first-of-type'} [data-cardinality]`\n      )\n    ).forEach((elem) => {\n      const i = Number.parseInt(elem.dataset.i!, 10);\n      combinations[i].selection = Number.parseInt(elem.dataset.cardinality!, 10);\n    });\n    selectionColor = resolveStyle(\n      svg.querySelector<HTMLElement>(`[data-upset=sets-${hasPrimarySelection ? 's' : 'q'}] [data-cardinality]`)!\n    ).fill;\n  }\n  const highlightedCombination = Number.parseInt(\n    svg.querySelector<HTMLElement>('[data-upset=cs-ss]')?.dataset.i ?? '-1',\n    10\n  );\n\n  const filter =\n    highlightedCombination >= 0\n      ? {\n          field: 'partOf',\n          oneOf: [1, 2],\n        }\n      : {\n          field: 'partOf',\n          equal: 1,\n        };\n\n  // part of: 0 ... negative list, 1 ... positive set list, 2, ... positive and selected\n  return {\n    $schema: 'https://vega.github.io/schema/vega-lite/v4.json',\n    title: chartTitle,\n    description: extractDescription(svg, styleId),\n    datasets: {\n      sets,\n      combinations: combinations\n        .map((c, i) =>\n          Object.assign({}, c, {\n            partOf: highlightedCombination === i ? 2 : 1, // has set list\n            nsets: [''],\n          })\n        )\n        .concat(\n          combinations.map((c) => ({\n            name: c.name,\n            cardinality: c.cardinality,\n            // no selection!\n            partOf: 0, // has not set list for full dots\n            sets: [''],\n            nsets: sets.filter((s) => !c.sets.includes(s.name)).map((s) => s.name),\n          }))\n        ),\n    },\n    vconcat: [\n      {\n        hconcat: [\n          {\n            mark: 'bar',\n            width: setWidth + labelWidth - 40, // for the axis of the set chart\n            height: csHeight,\n          },\n          {\n            width: csWidth,\n            height: csHeight,\n            data: {\n              name: 'combinations',\n            },\n            transform: [\n              {\n                filter,\n              },\n            ],\n            layer: [\n              {\n                mark: {\n                  type: 'bar',\n                  tooltip: true,\n                },\n              },\n              {\n                mark: {\n                  type: 'text',\n                  align: 'center',\n                  baseline: 'bottom',\n                  dy: -barLabelOffset,\n                },\n                encoding: {\n                  text: { field: 'cardinality', type: 'quantitative' },\n                },\n              },\n              hasSelection && {\n                mark: {\n                  type: 'bar',\n                  fill: selectionColor,\n                  tooltip: true,\n                },\n                encoding: {\n                  y: {\n                    field: 'selection',\n                    type: 'quantitative',\n                  },\n                },\n              },\n            ].filter(Boolean),\n            encoding: {\n              x: { field: 'name', type: 'ordinal', axis: null, sort: null },\n              y: {\n                field: 'cardinality',\n                type: 'quantitative',\n                axis: {\n                  grid: false,\n                },\n                title: csName,\n              },\n            },\n          },\n        ],\n      },\n      {\n        hconcat: [\n          {\n            width: setWidth,\n            height: setHeight,\n            data: {\n              name: 'sets',\n            },\n            layer: [\n              {\n                mark: {\n                  type: 'bar',\n                  tooltip: true,\n                },\n              },\n              {\n                mark: {\n                  type: 'text',\n                  align: 'right',\n                  baseline: 'middle',\n                  dx: -barLabelOffset,\n                },\n                encoding: {\n                  text: { field: 'cardinality', type: 'quantitative' },\n                },\n              },\n              hasSelection && {\n                mark: {\n                  type: 'bar',\n                  fill: selectionColor,\n                  tooltip: true,\n                },\n                encoding: {\n                  x: {\n                    field: 'selection',\n                    type: 'quantitative',\n                  },\n                },\n              },\n            ].filter(Boolean),\n            encoding: {\n              y: { field: 'name', type: 'ordinal', axis: null, sort: null },\n              x: {\n                field: 'cardinality',\n                type: 'quantitative',\n                title: setName,\n                sort: 'descending',\n                axis: {\n                  grid: false,\n                },\n              },\n            },\n          },\n          {\n            data: {\n              name: 'sets',\n            },\n            width: labelWidth,\n            height: setHeight,\n            mark: {\n              type: 'text',\n              align: 'center',\n              baseline: 'middle',\n              fontSize: Number.parseInt(resolveStyle(svg.querySelector(`.setTextStyle-${styleId}`)!).fontSize, 10),\n            },\n            encoding: {\n              y: { field: 'name', type: 'ordinal', axis: null, sort: null },\n              text: { field: 'name', type: 'ordinal' },\n            },\n          },\n          {\n            width: csWidth,\n            height: setHeight,\n            data: {\n              name: 'combinations',\n            },\n            transform: [\n              {\n                flatten: ['sets'],\n                as: ['has_set'],\n              },\n              {\n                flatten: ['nsets'],\n                as: ['has_not_set'],\n              },\n              {\n                calculate: 'datum.has_set+datum.has_not_set',\n                as: 'set',\n              },\n            ],\n            layer: [\n              {\n                mark: {\n                  type: 'circle',\n                  size: radius * radius * Math.PI, // area\n                  tooltip: true,\n                },\n                encoding: {\n                  color: {\n                    field: 'partOf',\n                    type: 'nominal',\n                    legend: null,\n                    scale: {\n                      range: [fillNotMember, color].concat(highlightedCombination >= 0 ? [selectionColor] : []),\n                    },\n                  },\n                  y: {\n                    field: 'set',\n                    type: 'ordinal',\n                    axis: null,\n                    sort: null,\n                    scale: {\n                      domain: sets.map((s) => s.name),\n                    },\n                  },\n                },\n              },\n              {\n                mark: 'rule',\n                transform: [\n                  {\n                    filter,\n                  },\n                  {\n                    calculate: 'datum.sets[datum.sets.length -1]',\n                    as: 'set_end',\n                  },\n                ],\n                encoding: {\n                  y: { field: 'sets[0]', type: 'ordinal', axis: null, sort: null },\n                  y2: { field: 'set_end' },\n                  ...(highlightedCombination < 0\n                    ? {}\n                    : {\n                        color: {\n                          field: 'partOf',\n                          type: 'nominal',\n                          legend: null,\n                          scale: {\n                            range: [color, selectionColor],\n                          },\n                        },\n                      }),\n                },\n              },\n            ],\n            encoding: {\n              x: { field: 'name', type: 'ordinal', axis: null, sort: null },\n            },\n          },\n        ],\n      },\n    ],\n    config: {\n      padding,\n      background: getDefaultTheme(svg.dataset.theme as UpSetThemes).backgroundColor,\n      concat: {\n        spacing: 0,\n      },\n      view: {\n        stroke: null,\n      },\n      // scale: {\n      //   bandPaddingInner: props.barPadding,\n      //   bandPaddingOuter: props.barPadding,\n      //   pointPadding: props.barPadding,\n      // },\n      bar: {\n        fill: color,\n      },\n      circle: {\n        opacity: 1,\n      },\n      rule: {\n        stroke: color,\n        strokeWidth: Number.parseInt(\n          resolveStyle(svg.querySelector(`[data-upset=cs] [data-cardinality] line`)!).strokeWidth,\n          10\n        ),\n      },\n      axis: {\n        labelColor: textColor,\n        labelFontSize: Number.parseInt(resolveStyle(svg.querySelector(`.axisTextStyle-${styleId}`)!).fontSize, 10),\n        titleColor: textColor,\n        titleFontSize: Number.parseInt(resolveStyle(svg.querySelector(`.cChartTextStyle-${styleId}`)!).fontSize, 10),\n      },\n      title: {\n        color: textColor,\n      },\n      text: {\n        fill: textColor,\n        fontSize: Number.parseInt(resolveStyle(svg.querySelector(`.sBarTextStyle-${styleId}`)!).fontSize, 10),\n      },\n    },\n  };\n}\n\nexport function exportVegaLite(svg: SVGSVGElement, { title }: { title?: string } = {}) {\n  const spec = createVegaSpec(svg, title);\n  const url = URL.createObjectURL(\n    new Blob([JSON.stringify(spec, null, 2)], {\n      type: 'application/json',\n    })\n  );\n  downloadUrl(url, `${spec.title}.json`, svg.ownerDocument!);\n  URL.revokeObjectURL(url);\n}\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\nimport type {\n  UpSetLayoutProps,\n  UpSetStyleProps,\n  UpSetThemeProps,\n  UpSetProps,\n  UpSetFontSizes,\n  VennDiagramFontSizes,\n  VennDiagramThemeProps,\n  VennDiagramLayoutProps,\n  VennDiagramStyleProps,\n  VennDiagramProps,\n  KarnaughMapProps,\n  KarnaughMapThemeProps,\n  KarnaughMapLayoutProps,\n  KarnaughMapStyleProps,\n} from '../interfaces';\nimport type { IUpSetDump, IUpSetStaticDump } from '@upsetjs/model';\nimport { fillDefaults } from '../fillDefaults';\nimport { FONT_SIZES_KEYS } from '../defaults';\n\nexport interface UpSetJSDumpProps\n  extends Partial<UpSetLayoutProps & KarnaughMapLayoutProps>,\n    UpSetThemeProps,\n    VennDiagramThemeProps,\n    KarnaughMapThemeProps,\n    Omit<UpSetStyleProps<string>, 'title' | 'description'> {\n  numericScale?: 'linear' | 'log';\n  bandScale?: 'band';\n}\n\nconst THEME_KEYS: (keyof (UpSetThemeProps & VennDiagramThemeProps & KarnaughMapThemeProps))[] = [\n  'selectionColor',\n  'color',\n  'textColor',\n  'hoverHintColor',\n  'notMemberColor',\n  'alternatingBackgroundColor',\n  'hasSelectionColor',\n  'hasSelectionOpacity',\n  'opacity',\n  'strokeColor',\n  'valueTextColor',\n];\nconst LAYOUT_KEYS: (keyof (UpSetLayoutProps & VennDiagramLayoutProps & KarnaughMapLayoutProps))[] = [\n  'padding',\n  'barPadding',\n  'dotPadding',\n  'widthRatios',\n  'heightRatios',\n];\nconst STYLE_KEYS: (keyof (UpSetStyleProps<any> & VennDiagramStyleProps<any> & KarnaughMapStyleProps<any>))[] = [\n  'fontSizes',\n  'combinationName',\n  'setName',\n  'barLabelOffset',\n  'setNameAxisOffset',\n  'combinationNameAxisOffset',\n  'theme',\n  'fontFamily',\n  'emptySelection',\n  'exportButtons',\n  'queryLegend',\n];\n\nconst DUMP_KEYS: (keyof UpSetJSDumpProps)[] = ['bandScale', 'numericScale'].concat(\n  THEME_KEYS as string[],\n  LAYOUT_KEYS as string[],\n  STYLE_KEYS as string[]\n) as (keyof UpSetJSDumpProps)[];\n\nexport interface IUpSetJSDump extends IUpSetDump {\n  $schema: string;\n  name: string;\n  description: string;\n  author?: string;\n  mode?: 'upset' | 'venn' | 'kmap';\n\n  elements: readonly (number | string | any)[];\n  attrs: readonly string[];\n  props: UpSetJSDumpProps;\n}\n\nfunction toDumpProps(\n  props: Partial<UpSetProps<any> & VennDiagramProps<any> & KarnaughMapProps<any>>\n): UpSetJSDumpProps {\n  const full = fillDefaults({\n    width: 0,\n    height: 0,\n    sets: props.sets ?? [],\n    combinations: props.combinations,\n    theme: props.theme,\n  });\n\n  const r: any = {};\n  DUMP_KEYS.forEach((key) => {\n    const value = props[key];\n    const defaultValue = (full as any)[key];\n    if (key === 'theme' && value !== 'light') {\n      // keep dark theme flag\n      r[key] = value;\n      return;\n    }\n    if (value == null || value === defaultValue) {\n      return;\n    }\n    if (key === 'fontSizes') {\n      // nested check\n      let empty = true;\n      const sub: UpSetFontSizes | VennDiagramFontSizes = {};\n      FONT_SIZES_KEYS.forEach((fKey) => {\n        const fValue = (value as UpSetFontSizes | VennDiagramFontSizes)[fKey];\n        const fDefaultValue = (defaultValue as UpSetFontSizes | VennDiagramFontSizes)[fKey];\n        if (fValue !== fDefaultValue) {\n          sub[fKey] = fValue;\n          empty = false;\n        }\n      });\n      if (!empty) {\n        r[key] = sub;\n      }\n    } else {\n      r[key] = value;\n    }\n  });\n  return r;\n}\n\nexport function toUpSetJSDump(\n  dump: IUpSetDump,\n  elements: readonly (number | string | any)[],\n  props: Partial<UpSetProps<any> & VennDiagramProps<any> & KarnaughMapProps<any>>,\n  author?: string,\n  mode?: 'venn' | 'kmap' | 'upset'\n): IUpSetJSDump {\n  return Object.assign(\n    {\n      $schema: 'https://upset.js.org/schema.1.0.0.json',\n      name: typeof props.title === 'string' ? props.title : 'UpSetJS',\n      description: typeof props.description === 'string' ? props.description : '',\n      mode,\n      author,\n      elements,\n      attrs: [],\n      props: toDumpProps(props),\n    },\n    dump\n  );\n}\n\nexport interface IUpSetJSStaticDump extends IUpSetStaticDump {\n  $schema: string;\n  name: string;\n  description: string;\n  author?: string;\n  props: UpSetJSDumpProps;\n  mode?: 'upset' | 'venn' | 'kmap';\n}\n\nexport function toUpSetJSStaticDump(\n  dump: IUpSetStaticDump,\n  props: Partial<UpSetProps<any> & VennDiagramProps<any> & KarnaughMapProps<any>>,\n  author?: string,\n  mode?: 'venn' | 'kmap' | 'upset'\n): IUpSetJSStaticDump {\n  return Object.assign(\n    {\n      $schema: 'https://upset.js.org/schema-static.1.0.0.json',\n      name: typeof props.title === 'string' ? props.title : 'UpSetJS',\n      description: typeof props.description === 'string' ? props.description : '',\n      mode,\n      author,\n      props: toDumpProps(props),\n    },\n    dump\n  );\n}\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport {\n  GenerateSetCombinationsOptions,\n  isElemQuery,\n  ISetCombinations,\n  isSetLike,\n  isSetQuery,\n  toDump,\n  toStaticDump,\n  UpSetElemQuery,\n  UpSetSetQuery,\n} from '@upsetjs/model';\nimport LZString from 'lz-string';\nimport { toUpSetJSDump, toUpSetJSStaticDump } from '../dump';\nimport type { UpSetProps } from '../interfaces';\nimport { downloadUrl } from './exportSVG';\n\ndeclare type IDumpDataInfo = { cs: { v: ISetCombinations<any> } };\n\nexport function exportDumpData(\n  props: UpSetProps<any>,\n  data: IDumpDataInfo,\n  compress = false,\n  mode?: 'kmap' | 'venn' | 'upset'\n) {\n  const elems: any[] = [];\n  const lookup = new Map<any, number>();\n  const toElemIndex = (elem: any) => {\n    if (lookup.has(elem)) {\n      return lookup.get(elem)!;\n    }\n    lookup.set(elem, elems.length);\n    elems.push(elem);\n    return elems.length - 1;\n  };\n  const dump = toDump(\n    {\n      sets: props.sets,\n      queries: props.queries?.filter((d): d is UpSetElemQuery | UpSetSetQuery => isElemQuery(d) || isSetQuery(d)) ?? [],\n      toElemIndex,\n      selection: props.selection && isSetLike(props.selection) ? props.selection : undefined,\n      combinations: data.cs.v,\n      combinationOptions: Array.isArray(props.combinations)\n        ? {}\n        : (props.combinations as GenerateSetCombinationsOptions<any>),\n    },\n    {\n      compress: compress ? 'yes' : 'no',\n    }\n  );\n\n  return toUpSetJSDump(dump, elems, props, undefined, mode);\n}\n\nexport function exportStaticDumpData(\n  props: UpSetProps<any>,\n  data: IDumpDataInfo,\n  compress = false,\n  mode?: 'kmap' | 'venn' | 'upset'\n) {\n  const dump = toStaticDump(\n    {\n      sets: props.sets,\n      queries: props.queries?.filter((d): d is UpSetElemQuery | UpSetSetQuery => isElemQuery(d) || isSetQuery(d)) ?? [],\n      selection: props.selection && isSetLike(props.selection) ? props.selection : undefined,\n      combinations: data.cs.v,\n    },\n    {\n      compress: compress ? 'yes' : 'no',\n    }\n  );\n\n  return toUpSetJSStaticDump(dump, props, undefined, mode);\n}\n\nexport function exportDump(\n  svg: SVGSVGElement,\n  props: UpSetProps<any>,\n  data: IDumpDataInfo,\n  mode?: 'kmap' | 'venn' | 'upset'\n) {\n  const dump = exportDumpData(props, data, false, mode);\n  const url = URL.createObjectURL(\n    new Blob([JSON.stringify(dump, null, 2)], {\n      type: 'application/json',\n    })\n  );\n  downloadUrl(url, `${dump.name}.json`, svg.ownerDocument!);\n  URL.revokeObjectURL(url);\n}\n\nexport const MAX_URL_LENGTH = 2048 * 2;\n\nexport function exportSharedLink(props: UpSetProps<any>, data: IDumpDataInfo, mode?: 'kmap' | 'venn' | 'upset') {\n  const r: any = exportDumpData(props, data, true, mode);\n  delete r.$schema;\n  const arg = LZString.compressToEncodedURIComponent(JSON.stringify(r));\n  const url = new URL('https://upset.js.org/app/embed.html');\n  url.searchParams.set('p', arg);\n\n  if (url.toString().length < MAX_URL_LENGTH) {\n    window.open(url.toString(), '_blank');\n    return true;\n  }\n\n  // try other compression\n  const r2: any = exportStaticDumpData(props, data, true, mode);\n  delete r2.$schema;\n  const arg2 = LZString.compressToEncodedURIComponent(JSON.stringify(r2));\n  url.searchParams.set('p', arg2);\n\n  if (url.toString().length < MAX_URL_LENGTH) {\n    window.open(url.toString(), '_blank');\n    return true;\n  }\n\n  // send via frame message\n  url.searchParams.delete('p');\n  const w = window.open(url.toString(), '_blank');\n  w?.addEventListener('load', () => {\n    w?.postMessage(r, url.origin);\n  });\n  return false;\n}\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\nimport { ISetLike, ISetOverlapFunction, setElemOverlapFactory, setOverlapFactory } from '@upsetjs/model';\nimport type { UpSetSelection } from './interfaces';\n\nexport function clsx(...classNames: (boolean | string | undefined)[]) {\n  return classNames.filter(Boolean).join(' ');\n}\n\nexport function generateId(_args?: any) {\n  return `upset-${Math.random().toString(36).slice(4)}`;\n}\n\nexport function isSetLike<T>(s?: UpSetSelection<T>): s is ISetLike<T> {\n  return s != null && !Array.isArray(s);\n}\n\nfunction elemOverlapOf<T>(query: Set<T> | readonly T[], toElemKey?: (e: T) => string) {\n  const f = setOverlapFactory(query, toElemKey);\n  return (s: ISetLike<T>) => {\n    return f(s.elems).intersection;\n  };\n}\n\nexport function noGuessPossible() {\n  return -1;\n}\n\nexport function generateSelectionOverlap<T>(\n  selection: UpSetSelection<T>,\n  overlapGuesser: ISetOverlapFunction<T>,\n  toElemKey?: (e: T) => string\n): (s: ISetLike<T>) => number {\n  if (!selection) {\n    return noOverlap;\n  }\n  if (typeof selection === 'function') {\n    return selection;\n  }\n  if (Array.isArray(selection)) {\n    return elemOverlapOf(selection, toElemKey);\n  }\n  const ss = selection as ISetLike<T>;\n  if (ss.overlap) {\n    return ss.overlap.bind(ss);\n  }\n  let f: ((v: ISetLike<T>) => number) | null = null;\n  return (s) => {\n    if (s.overlap) {\n      return s.overlap(ss);\n    }\n    const guess = overlapGuesser(s, ss);\n    if (guess >= 0) {\n      return guess;\n    }\n    if (!f) {\n      f = elemOverlapOf(ss.elems, toElemKey);\n    }\n    return f(s);\n  };\n}\n\nexport function generateSelectionName<T>(selection?: UpSetSelection<T>) {\n  return Array.isArray(selection)\n    ? `Array(${selection.length})`\n    : typeof selection === 'function'\n    ? '?'\n    : (selection as ISetLike<T>)?.name;\n}\n\nexport function elemElemOverlapOf<T>(query: Set<T> | readonly T[], toElemKey?: (e: T) => string) {\n  const f = setElemOverlapFactory(query, toElemKey);\n  return (s: ISetLike<T>) => {\n    return f(s.elems).intersection;\n  };\n}\n\nexport function noOverlap() {\n  return 0;\n}\n\nexport function parseFontSize(v?: string) {\n  if (v == null) {\n    return 10;\n  }\n  if (v.endsWith('pt')) {\n    return Math.floor((4 / 3) * Number.parseInt(v, 10));\n  }\n  return Number.parseInt(v, 10);\n}\n\nexport function toAnchor(alignment: 'left' | 'center' | 'right') {\n  const alignments = {\n    left: 'start',\n    center: 'middle',\n    right: 'end',\n  };\n  return alignments[alignment] ?? 'middle';\n}\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport {\n  ISetCombinations,\n  ISets,\n  NumericScaleLike,\n  NumericScaleFactory,\n  BandScaleFactory,\n  GenerateSetCombinationsOptions,\n  generateCombinations,\n  linearScale,\n  logScale,\n  bandScale,\n  ISetLike,\n  ISet,\n  ISetCombination,\n  generateOverlapFunction,\n  ISetOverlapFunction,\n} from '@upsetjs/model';\nimport type { ReactNode } from 'react';\nimport type { UpSetSizeInfo } from './deriveSizeDependent';\nimport { generateId, noGuessPossible } from '../utils';\nimport { DEFAULT_COMBINATIONS } from '../defaults';\nimport type { UpSetAddon, UpSetDataProps } from '../interfaces';\n\nexport function resolveNumericScale(\n  factory: NonNullable<UpSetDataProps<any, any>['numericScale']>\n): NumericScaleFactory {\n  if (factory === 'linear') {\n    return linearScale;\n  }\n  if (factory === 'log') {\n    return logScale;\n  }\n  return factory;\n}\n\nfunction resolveBandScale(factory: NonNullable<UpSetDataProps<any, any>['bandScale']>): BandScaleFactory {\n  return factory === 'band' ? bandScale : factory;\n}\n\nexport interface UpSetDataInfo<T> {\n  id: string;\n  r: number;\n  triangleSize: number;\n  sets: {\n    v: ISets<T>;\n    keys: readonly string[];\n    rv: ISets<T>;\n    x: NumericScaleLike;\n    xAxisWidth: number;\n    y(s: ISet<T>): number;\n    max: number;\n    bandWidth: number;\n    cy: number;\n    format(v: number): string;\n    labelOffset: number;\n  };\n  cs: {\n    v: ISetCombinations<T>;\n    keys: readonly string[];\n    x(s: ISetCombination<T>): number;\n    max: number;\n    y: NumericScaleLike;\n    yAxisWidth: number;\n    bandWidth: number;\n    cx: number;\n    format(v: number): string;\n    has(v: ISetCombination<T>, s: ISet<T>): boolean;\n    labelOffset: number;\n  };\n  toKey(s: ISetLike<T>): string;\n  toElemKey?(e: T): string;\n  overlapGuesser: ISetOverlapFunction<T>;\n}\n\nexport function areCombinations<T>(\n  combinations: ISetCombinations<T> | GenerateSetCombinationsOptions\n): combinations is ISetCombinations<T> {\n  return Array.isArray(combinations);\n}\n\nexport default function deriveDataDependent<T>(\n  sets: ISets<T>,\n  combinations: ISetCombinations<T> | GenerateSetCombinationsOptions,\n  sizes: UpSetSizeInfo,\n  numericScale: NonNullable<UpSetDataProps<any, any>['numericScale']>,\n  bandScale: NonNullable<UpSetDataProps<any, any>['bandScale']>,\n  barLabelFontSize: number,\n  dotPadding: number,\n  barPadding: number,\n  tickFontSize: number,\n  combinationAddons: readonly UpSetAddon<any, any, ReactNode>[],\n  toKey: (s: ISetLike<T>) => string,\n  toElemKey?: (e: T) => string,\n  id?: string,\n  setMaxScale?: number,\n  combinationMaxScale?: number\n): UpSetDataInfo<T> {\n  const numericScaleFactory = resolveNumericScale(numericScale);\n  const bandScaleFactory = resolveBandScale(bandScale);\n  const cs = areCombinations(combinations)\n    ? combinations\n    : generateCombinations(sets, Object.assign({ toElemKey }, DEFAULT_COMBINATIONS, combinations));\n\n  const csKeys = cs.map(toKey);\n  const combinationX = bandScaleFactory(csKeys, sizes.cs.w, sizes.padding);\n  const dataCSCardinality = cs.reduce((acc, d) => Math.max(acc, d.cardinality), 0);\n  const maxCSCardinality = combinationMaxScale ?? dataCSCardinality;\n  const combinationYEnd = maxCSCardinality > dataCSCardinality ? 0 : barLabelFontSize;\n  const combinationY = numericScaleFactory(maxCSCardinality, [sizes.cs.h, combinationYEnd], {\n    orientation: 'vertical',\n    fontSizeHint: tickFontSize,\n  });\n  const labelSize = (text: string) => Math.floor((barLabelFontSize / 1.4) * 0.7 * text.length);\n  const guessLabelWidth = (v: number) => labelSize(combinationY.tickFormat()(v));\n\n  const dataSetCardinality = sets.reduce((acc, d) => Math.max(acc, d.cardinality), 0);\n  const maxSetCardinality = setMaxScale ?? dataSetCardinality;\n  const largestSetLabelWidth = guessLabelWidth(maxSetCardinality);\n  let largestCSLabelWidth = guessLabelWidth(maxCSCardinality);\n\n  for (const addon of combinationAddons) {\n    if (!addon.scale) {\n      continue;\n    }\n    const ticks = addon.scale.ticks(3);\n    const f = addon.scale.tickFormat();\n    for (const tick of ticks) {\n      const l = typeof tick === 'number' ? f(tick) : tick.label ?? f(tick.value);\n      const size = labelSize(l);\n      if (size > largestCSLabelWidth) {\n        largestCSLabelWidth = size;\n      }\n    }\n  }\n\n  const setShift = maxSetCardinality > dataSetCardinality ? 0 : largestSetLabelWidth;\n  const setX = numericScaleFactory(maxSetCardinality, [sizes.sets.w, setShift], {\n    orientation: 'horizontal',\n    fontSizeHint: tickFontSize,\n  });\n  const setKeys = sets.map(toKey);\n  const setY = bandScaleFactory(\n    setKeys.slice().reverse(), // reverse order\n    sizes.sets.h,\n    sizes.padding\n  );\n  const r = (Math.min(setY.bandwidth(), combinationX.bandwidth()) / 2) * dotPadding;\n\n  const triangleSize = Math.max(2, (Math.min(setY.bandwidth(), combinationX.bandwidth()) / 2) * barPadding);\n\n  return {\n    id: id ? id : generateId(),\n    r,\n    triangleSize,\n    sets: {\n      v: sets,\n      keys: setKeys,\n      rv: sets.slice().reverse(),\n      x: setX,\n      xAxisWidth: sizes.sets.w - setShift,\n      y: (s) => setY(toKey(s))!,\n      max: maxSetCardinality,\n      bandWidth: setY.bandwidth(),\n      cy: setY.bandwidth() / 2 + sizes.cs.h,\n      format: setX.tickFormat(),\n      labelOffset: barLabelFontSize + 9 + 2,\n    },\n    cs: {\n      v: cs,\n      keys: cs.map(toKey),\n      x: (s) => combinationX(toKey(s))!,\n      max: maxCSCardinality,\n      y: combinationY,\n      yAxisWidth: sizes.cs.h - combinationYEnd,\n      cx: combinationX.bandwidth() / 2,\n      bandWidth: combinationX.bandwidth(),\n      format: combinationY.tickFormat(),\n      has: (v, s) => {\n        const sk = toKey(s);\n        return Array.from(v.sets).some((ss) => toKey(ss) === sk);\n      },\n      labelOffset: largestCSLabelWidth + 9 + 6,\n    },\n    toKey,\n    toElemKey,\n    overlapGuesser: generateOverlapFunction(cs, noGuessPossible, toKey),\n  };\n}\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { ReactNode } from 'react';\nimport type { UpSetAddon, UpSetLayoutProps } from '../interfaces';\nimport { generateId } from '../utils';\n\nexport default function deriveSizeDependent(\n  width: number,\n  height: number,\n  margin: number,\n  barPadding: number,\n  widthRatios: NonNullable<UpSetLayoutProps['widthRatios']>,\n  heightRatios: NonNullable<UpSetLayoutProps['heightRatios']>,\n  setAddons: readonly UpSetAddon<any, any, ReactNode>[],\n  combinationAddons: readonly UpSetAddon<any, any, ReactNode>[],\n  id: string,\n  setAddonPadding: number,\n  combinationAddonPadding: number\n) {\n  const setAddonsBefore = setAddons.reduce(\n    (acc, a) => acc + (a.position === 'before' ? a.size + setAddonPadding : 0),\n    0\n  );\n  const setAddonsAfter = setAddons.reduce(\n    (acc, a) => acc + (a.position !== 'before' ? a.size + setAddonPadding : 0),\n    0\n  );\n  const combinationAddonsBefore = combinationAddons.reduce(\n    (acc, a) => acc + (a.position === 'before' ? a.size + setAddonPadding : 0),\n    0\n  );\n  const combinationAddonsAfter = combinationAddons.reduce(\n    (acc, a) => acc + (a.position !== 'before' ? a.size + setAddonPadding : 0),\n    0\n  );\n  const h = height - 2 * margin - 20 - combinationAddonsAfter - combinationAddonsBefore;\n  const w = width - 2 * margin - setAddonsBefore - setAddonsAfter;\n\n  const setWidth = widthRatios[0] > 1 ? widthRatios[0] : w * widthRatios[0];\n  const labelsWidth = widthRatios[1] > 1 ? widthRatios[1] : w * widthRatios[1];\n  const combinationHeight = heightRatios[0] > 1 ? heightRatios[0] : h * heightRatios[0];\n  return {\n    id: id ? id : generateId(),\n    cs: {\n      before: combinationAddonsBefore,\n      after: combinationAddonsAfter,\n      x: setAddonsBefore + setWidth + labelsWidth,\n      y: combinationAddonsBefore,\n      w: w - setWidth - labelsWidth,\n      h: combinationHeight,\n      addons: combinationAddons,\n      addonPadding: combinationAddonPadding,\n    },\n    labels: {\n      x: setAddonsBefore + setWidth,\n      y: combinationAddonsBefore + combinationHeight,\n      w: labelsWidth,\n      h: h - combinationHeight,\n    },\n    sets: {\n      before: setAddonsBefore,\n      after: setAddonsAfter,\n      x: setAddonsBefore,\n      y: combinationAddonsBefore + combinationHeight,\n      w: setWidth,\n      h: h - combinationHeight,\n      addons: setAddons,\n      addonPadding: setAddonPadding,\n    },\n    padding: barPadding,\n    legend: {\n      x: width / 2,\n    },\n    margin: margin,\n    w: width,\n    h: height,\n  };\n}\n\nexport declare type UpSetSizeInfo = ReturnType<typeof deriveSizeDependent>;\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { CSSProperties, ReactNode } from 'react';\nimport type { UpSetLayoutProps, UpSetMultiStyle, UpSetStyleClassNames, UpSetThemes } from '../interfaces';\n\nexport default function deriveStyleDependent(\n  theme: UpSetThemes,\n  styles: UpSetMultiStyle<CSSProperties>,\n  classNames: UpSetStyleClassNames,\n  combinationName: string | ReactNode,\n  combinationNameAxisOffset: number | 'auto',\n  setName: string | ReactNode,\n  setNameAxisOffset: number | 'auto',\n  styleId: string,\n  barLabelOffset: number,\n  selectionColor: string,\n  emptySelection: boolean,\n  title: string | ReactNode,\n  description: string | ReactNode,\n  tooltips: boolean,\n  setLabelAlignment: NonNullable<UpSetLayoutProps['setLabelAlignment']>\n) {\n  return {\n    theme,\n    styles,\n    classNames: classNames,\n    cs: {\n      name: combinationName,\n      offset: combinationNameAxisOffset,\n    },\n    sets: {\n      name: setName,\n      offset: setNameAxisOffset,\n    },\n    emptySelection,\n    id: styleId,\n    barLabelOffset,\n    selectionColor,\n    title,\n    description,\n    tooltips,\n    setLabelAlignment,\n  };\n}\n\nexport declare type UpSetStyleInfo = ReturnType<typeof deriveStyleDependent>;\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport React from 'react';\nimport type { UpSetExportOptions } from '../interfaces';\n\nexport default function ExportButtons({\n  transform,\n  styleId,\n  exportButtons,\n  exportChart,\n}: {\n  transform: string;\n  styleId: string;\n  exportButtons?: boolean | UpSetExportOptions;\n  exportChart: (evt: React.MouseEvent<SVGElement>) => void;\n}) {\n  if (!exportButtons) {\n    return null;\n  }\n  const svgWidth = 26;\n  const pngWidth = 26;\n  const vegaWidth = 34;\n  const dumpWidth = 34;\n  const shareWidth = 42;\n  const space = 2;\n  let acc = 0;\n  const buttons: React.ReactNode[] = [];\n  if (exportButtons === true || exportButtons.svg !== false) {\n    acc += svgWidth;\n    buttons.push(\n      <g\n        key=\"svg\"\n        className={`exportButton-${styleId}`}\n        onClick={exportChart}\n        data-type=\"svg\"\n        transform={`translate(-${acc}, 0)`}\n      >\n        <title>Download SVG Image</title>\n        <rect y={-9} width={svgWidth} height={11} rx={2} ry={2} />\n        <text className={`exportTextStyle-${styleId}`} x={svgWidth / 2}>\n          SVG\n        </text>\n      </g>\n    );\n    acc += space;\n  }\n  if (exportButtons === true || exportButtons.png !== false) {\n    acc += pngWidth;\n    buttons.push(\n      <g\n        key=\"png\"\n        className={`exportButton-${styleId}`}\n        onClick={exportChart}\n        data-type=\"png\"\n        transform={`translate(-${acc}, 0)`}\n      >\n        <title>Download PNG Image</title>\n        <rect y={-9} width={pngWidth} height={11} rx={2} ry={2} />\n        <text className={`exportTextStyle-${styleId}`} x={pngWidth / 2}>\n          PNG\n        </text>\n      </g>\n    );\n    acc += space;\n  }\n  if (exportButtons === true || exportButtons.vega !== false) {\n    acc += vegaWidth;\n    buttons.push(\n      <g\n        key=\"vega\"\n        className={`exportButton-${styleId}`}\n        onClick={exportChart}\n        data-type=\"vega\"\n        transform={`translate(-${acc}, 0)`}\n      >\n        <title>Download VEGA-Lite Specification</title>\n        <rect y={-9} width={vegaWidth} height={11} rx={2} ry={2} />\n        <text className={`exportTextStyle-${styleId}`} x={vegaWidth / 2}>\n          VEGA\n        </text>\n      </g>\n    );\n    acc += space;\n  }\n  if (exportButtons === true || exportButtons.dump !== false) {\n    acc += dumpWidth;\n    buttons.push(\n      <g\n        key=\"dump\"\n        className={`exportButton-${styleId}`}\n        onClick={exportChart}\n        data-type=\"dump\"\n        transform={`translate(-${acc}, 0)`}\n      >\n        <title>Download UpSet.js JSON Dump</title>\n        <rect y={-9} width={dumpWidth} height={11} rx={2} ry={2} />\n        <text className={`exportTextStyle-${styleId}`} x={dumpWidth / 2}>\n          DUMP\n        </text>\n      </g>\n    );\n    acc += space;\n  }\n  if (exportButtons === true || exportButtons.share !== false) {\n    acc += shareWidth;\n    buttons.push(\n      <g\n        key=\"share\"\n        className={`exportButton-${styleId}`}\n        onClick={exportChart}\n        data-type=\"share\"\n        transform={`translate(-${acc}, 0)`}\n      >\n        <title>Open a shareable URL</title>\n        <rect y={-9} width={shareWidth} height={11} rx={2} ry={2} />\n        <text className={`exportTextStyle-${styleId}`} x={shareWidth / 2}>\n          SHARE\n        </text>\n      </g>\n    );\n    acc += space;\n  }\n  return (\n    <g className={`exportButtons-${styleId}`} transform={transform}>\n      {buttons}\n    </g>\n  );\n}\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport React, { PropsWithChildren } from 'react';\nimport { UpSetQuery, isSetQuery, isElemQuery } from '@upsetjs/model';\nimport { clsx } from '../utils';\n\nconst QueryLegend = /*!#__PURE__*/ React.memo(function QueryLegend<T>({\n  queries,\n  x,\n  style,\n  data,\n}: PropsWithChildren<{\n  queries: readonly UpSetQuery<T>[];\n  x: number;\n  style: { id: string; styles: { legend?: React.CSSProperties }; classNames: { legend?: string } };\n  data: { id: string; sets: { format(v: number): string } };\n}>) {\n  return (\n    <text\n      transform={`translate(${x},4)`}\n      style={style.styles.legend}\n      className={clsx(`legendTextStyle-${style.id}`, style.classNames.legend)}\n    >\n      {queries.map((q, i) => {\n        let count: number | null = null;\n        if (isSetQuery(q)) {\n          count = q.set.cardinality;\n        } else if (isElemQuery(q)) {\n          count = q.elems instanceof Set ? q.elems.size : q.elems.length;\n        }\n        return (\n          <React.Fragment key={q.name}>\n            <tspan className={`fillQ${i}-${data.id}`}>{'  ⬤ '}</tspan>\n            <tspan>\n              {q.name}\n              {count != null ? `: ${data.sets.format(count)}` : ''}\n            </tspan>\n          </React.Fragment>\n        );\n      })}\n    </text>\n  );\n});\n\nexport default QueryLegend;\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { NumericScaleLike } from '@upsetjs/model';\nimport React, { PropsWithChildren, CSSProperties } from 'react';\nimport { clsx } from '../utils';\n\nexport type AxisProps = {\n  scale: NumericScaleLike;\n  orient: 'top' | 'bottom' | 'left' | 'right';\n  tickSizeInner?: number;\n  tickSizeOuter?: number;\n  tickPadding?: number;\n  size: number;\n  start: number;\n  style: AxisStyle;\n  transform?: string;\n};\n\nexport type AxisStyle = {\n  id: string;\n  classNames: { axisTick?: string };\n  styles: { axisTick?: CSSProperties };\n};\n\ndeclare type TickProps = {\n  pos: number;\n  spacing: number;\n  tickSizeInner: number;\n  orient: 'top' | 'bottom' | 'left' | 'right';\n  name?: string;\n  style: AxisStyle;\n};\n\nconst HorizontalTick = /*!#__PURE__*/ React.memo(function HorizontalTick({\n  pos,\n  spacing,\n  tickSizeInner,\n  orient,\n  name,\n  style,\n}: PropsWithChildren<TickProps>) {\n  const k = orient === 'top' || orient === 'left' ? -1 : 1;\n  return (\n    <g transform={`translate(0, ${pos + 0.5})`}>\n      {name && (\n        <text\n          x={k * spacing}\n          dy={'0.32em'}\n          className={clsx(\n            `axisTextStyle-${style.id}`,\n            orient === 'right' ? `startText-${style.id}` : `endText-${style.id}`,\n            style.classNames.axisTick\n          )}\n          style={style.styles.axisTick}\n        >\n          {name}\n        </text>\n      )}\n      <line x2={k * tickSizeInner} className={`axisLine-${style.id}`} />\n    </g>\n  );\n});\n\nconst VerticalTick = /*!#__PURE__*/ React.memo(function VerticalTick({\n  pos,\n  name,\n  spacing,\n  orient,\n  tickSizeInner,\n  style,\n}: PropsWithChildren<TickProps>) {\n  const k = orient === 'top' || orient === 'left' ? -1 : 1;\n  return (\n    <g transform={`translate(${pos + 0.5}, 0)`}>\n      {name && (\n        <text\n          y={k * spacing}\n          dy={orient === 'top' ? '0em' : '0.71em'}\n          className={clsx(`axisTextStyle-${style.id}`, style.classNames.axisTick)}\n          style={style.styles.axisTick}\n        >\n          {name}\n        </text>\n      )}\n      <line y2={k * tickSizeInner} className={`axisLine-${style.id}`} />\n    </g>\n  );\n});\n\nexport default function Axis({\n  scale,\n  orient,\n  tickSizeInner = 6,\n  tickSizeOuter = 6,\n  tickPadding = 3,\n  size,\n  start,\n  style,\n  transform,\n}: PropsWithChildren<AxisProps>) {\n  const spacing = Math.max(tickSizeInner, 0) + tickPadding;\n  const range0 = start;\n  const range1 = size;\n\n  const k = orient === 'top' || orient === 'left' ? -1 : 1;\n  const Tick = orient === 'left' || orient === 'right' ? HorizontalTick : VerticalTick;\n\n  const values: readonly { value: number; label?: string }[] = scale\n    .ticks()\n    .map((d) => (typeof d === 'number' ? { value: d, label: d.toLocaleString() } : d));\n\n  return (\n    <g transform={transform}>\n      {values.map((d) => (\n        <Tick\n          key={d.value}\n          pos={scale(d.value)}\n          name={d.label}\n          spacing={spacing}\n          tickSizeInner={tickSizeInner}\n          orient={orient}\n          style={style}\n        />\n      ))}\n      <path\n        className={`axisLine-${style.id}`}\n        d={\n          orient === 'left' || orient === 'right'\n            ? tickSizeOuter\n              ? `M${k * tickSizeOuter},${range0}H0.5V${range1}H${k * tickSizeOuter}`\n              : `M0.5,${range0}V${range1}`\n            : tickSizeOuter\n            ? `M${range0},${k * tickSizeOuter}V0.5H${range1}V${k * tickSizeOuter}`\n            : `M${range0},0.5H${range1}`\n        }\n      />\n    </g>\n  );\n}\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport React, { PropsWithChildren, useRef, useLayoutEffect, useState } from 'react';\nimport { clsx } from '../utils';\n\nconst MultilineText = /*!#__PURE__*/ React.memo(function MultilineText({\n  width,\n  text,\n  dy,\n  x,\n  style,\n  className,\n}: {\n  width: number;\n  text: React.ReactNode;\n  x?: string | number;\n  dy: string;\n  className?: string;\n  style?: React.CSSProperties;\n}) {\n  const ref = useRef<SVGTSpanElement>(null);\n  const [lines, setLines] = useState<string[]>(typeof text === 'string' ? [text] : []);\n\n  // update state upon text update\n  useLayoutEffect(() => {\n    if (typeof text === 'string') {\n      setLines([text]);\n    } else {\n      setLines([]);\n    }\n  }, [text]);\n\n  useLayoutEffect(() => {\n    if (\n      !ref.current ||\n      ref.current.childElementCount > 0 ||\n      typeof text !== 'string' ||\n      typeof ref.current.getComputedTextLength !== 'function'\n    ) {\n      // already multi lines\n      return;\n    }\n    const len = ref.current.getComputedTextLength();\n    const lines: string[] = [];\n    let lineWidth = width;\n    let start = 0;\n    // compute line splits\n    const p = ref.current.getStartPositionOfChar(0);\n    while (len > lineWidth) {\n      p.x = lineWidth;\n      const num = ref.current.getCharNumAtPosition(p);\n      const space = text.lastIndexOf(' ', num);\n      if (space < start) {\n        break;\n      }\n      lines.push(text.slice(start, space + 1));\n      const used = ref.current.getEndPositionOfChar(space + 1).x;\n      start = space + 1;\n      // new line with in the used part + a new line\n      lineWidth = used + width;\n    }\n    lines.push(text.slice(start));\n    setLines(lines);\n  }, [ref, text, width]);\n\n  if (!text) {\n    return null;\n  }\n  return (\n    <tspan ref={ref} dy={dy} style={style} x={x} className={className}>\n      {lines.length > 1\n        ? lines.map((l, i) => (\n            <tspan key={l} x={0} dy={i > 0 ? '1.2em' : dy}>\n              {l}\n            </tspan>\n          ))\n        : text}\n    </tspan>\n  );\n});\n\nexport default /*!#__PURE__*/ React.memo(function UpSetTitle({\n  width,\n  descriptionWidth = width,\n  style,\n}: PropsWithChildren<{\n  width: number;\n  descriptionWidth?: number;\n  style: {\n    id: string;\n    title?: React.ReactNode;\n    description?: React.ReactNode;\n    styles: { title?: React.CSSProperties; description?: React.CSSProperties };\n    classNames: { title?: string; description?: string };\n  };\n}>) {\n  if (!style.title && !style.description) {\n    return null;\n  }\n  return (\n    <text>\n      <MultilineText\n        text={style.title}\n        width={width}\n        dy=\"10px\"\n        className={clsx(`titleTextStyle-${style.id}`, style.classNames.title)}\n        style={style.styles.title}\n      />\n      <MultilineText\n        x={0}\n        width={descriptionWidth}\n        dy={style.title ? '2em' : '10px'}\n        text={style.description}\n        className={clsx(`descTextStyle-${style.id}`, style.classNames.description)}\n        style={style.styles.description}\n      />\n    </text>\n  );\n});\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { ISetLike } from '@upsetjs/model';\nimport type { UpSetAddonHandlerInfos, UpSetAddons } from '../interfaces';\n\nfunction noop() {\n  return undefined;\n}\n\nexport function wrap<T>(f?: (set: ISetLike<T>, evt: MouseEvent, addonInfos: UpSetAddonHandlerInfos) => void) {\n  if (!f) {\n    return noop;\n  }\n  return (set: ISetLike<T>, addons: UpSetAddons<ISetLike<T>, T, any>) => {\n    return function (this: any, evt: React.MouseEvent) {\n      return f.call(\n        this,\n        set,\n        evt.nativeEvent,\n        addons.map((a) => (a.createOnHandlerData ? a.createOnHandlerData(set) : null))\n      );\n    };\n  };\n}\n\nexport function addonPositionGenerator(total: number, padding: number) {\n  let beforeAcc = 0;\n  let afterAcc = 0;\n  return (addon: { position?: 'before' | 'after'; size: number }) => {\n    let x = 0;\n    if (addon.position === 'before') {\n      beforeAcc += addon.size + padding;\n      x = -beforeAcc;\n    } else {\n      x = total + afterAcc + padding;\n      afterAcc += addon.size + padding;\n    }\n    return x;\n  };\n}\n\nexport function mergeColor(style?: React.CSSProperties, color?: string, prop = 'fill') {\n  if (!color) {\n    return style;\n  }\n  if (!style) {\n    return !color ? undefined : { [prop]: color };\n  }\n  return Object.assign({ [prop]: color }, style);\n}\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport React, { PropsWithChildren, ReactElement } from 'react';\nimport Axis from './Axis';\nimport UpSetTitle from './UpSetTitle';\nimport type { UpSetDataInfo } from '../derive/deriveDataDependent';\nimport type { UpSetSizeInfo } from '../derive/deriveSizeDependent';\nimport type { UpSetStyleInfo } from '../derive/deriveStyleDependent';\nimport { addonPositionGenerator } from './utils';\nimport { clsx } from '../utils';\n\nexport type UpSetAxisProps<T> = PropsWithChildren<{\n  size: UpSetSizeInfo;\n  style: UpSetStyleInfo;\n  data: UpSetDataInfo<T>;\n}>;\n\nconst UpSetAxis = /*!#__PURE__*/ React.memo(function UpSetAxis<T>({ size, style, data }: UpSetAxisProps<T>) {\n  const setPosGen = addonPositionGenerator(size.sets.w + size.labels.w + size.cs.w, size.sets.addonPadding);\n  const combinationPosGen = addonPositionGenerator(size.cs.h + size.sets.h, size.cs.addonPadding);\n  const csNameOffset = style.cs.offset === 'auto' ? data.cs.labelOffset : style.cs.offset;\n  const setNameOffset = style.sets.offset === 'auto' ? data.sets.labelOffset : style.sets.offset;\n  return (\n    <g>\n      <UpSetTitle style={style} width={size.cs.x - csNameOffset - 20} />\n      {size.cs.h > 0 && (\n        <g transform={`translate(${size.cs.x},${size.cs.y})`} data-upset=\"csaxis\">\n          <Axis scale={data.cs.y} orient=\"left\" size={size.cs.h} start={size.cs.h - data.cs.yAxisWidth} style={style} />\n          <line x1={0} x2={size.cs.w} y1={size.cs.h + 1} y2={size.cs.h + 1} className={`axisLine-${style.id}`} />\n          <text\n            className={clsx(`cChartTextStyle-${style.id}`, style.classNames.chartLabel)}\n            style={style.styles.chartLabel}\n            transform={`translate(${-csNameOffset}, ${size.cs.h / 2})rotate(-90)`}\n          >\n            {style.cs.name}\n          </text>\n          {size.cs.addons.map((addon) => {\n            const pos = combinationPosGen(addon);\n            const title = (\n              <text\n                key={addon.name}\n                className={clsx(`cChartTextStyle-${style.id}`, style.classNames.chartLabel)}\n                style={style.styles.chartLabel}\n                transform={`translate(${-csNameOffset}, ${pos + addon.size / 2})rotate(-90)`}\n              >\n                {addon.name}\n              </text>\n            );\n            if (!addon.scale) {\n              return title;\n            }\n            return (\n              <React.Fragment key={addon.name}>\n                <Axis\n                  scale={addon.scale}\n                  orient=\"left\"\n                  size={addon.size}\n                  start={0}\n                  style={style}\n                  transform={`translate(0,${pos})`}\n                />\n                {title}\n              </React.Fragment>\n            );\n          })}\n        </g>\n      )}\n      {size.sets.w > 0 && (\n        <g transform={`translate(${size.sets.x},${size.sets.y})`} data-upset=\"setaxis\">\n          <Axis\n            scale={data.sets.x}\n            orient=\"bottom\"\n            size={size.sets.w}\n            start={size.sets.w - data.sets.xAxisWidth}\n            transform={`translate(0, ${size.sets.h})`}\n            style={style}\n          />\n          <text\n            className={clsx(`sChartTextStyle-${style.id}`, style.classNames.chartLabel)}\n            style={style.styles.chartLabel}\n            transform={`translate(${size.sets.w / 2}, ${size.sets.h + setNameOffset})`}\n          >\n            {style.sets.name}\n          </text>\n          {size.sets.addons.map((addon) => {\n            const pos = setPosGen(addon);\n            const title = (\n              <text\n                key={addon.name}\n                className={clsx(`sChartTextStyle-${style.id}`, style.classNames.chartLabel)}\n                style={style.styles.chartLabel}\n                transform={`translate(${pos + addon.size / 2}, ${size.sets.h + setNameOffset})`}\n              >\n                {addon.name}\n              </text>\n            );\n            if (!addon.scale) {\n              return title;\n            }\n            return (\n              <React.Fragment key={addon.name}>\n                <Axis\n                  scale={addon.scale}\n                  orient=\"bottom\"\n                  size={addon.size}\n                  start={0}\n                  transform={`translate(${pos}, ${size.sets.h})`}\n                  style={style}\n                />\n                {title}\n              </React.Fragment>\n            );\n          })}\n        </g>\n      )}\n    </g>\n  );\n});\n\nexport default UpSetAxis as <T>(props: UpSetAxisProps<T>) => ReactElement;\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport React, { PropsWithChildren } from 'react';\nimport { mergeColor } from './utils';\n\nconst UpSetDot = /*!#__PURE__*/ React.memo(function UpSetDot({\n  cx,\n  r,\n  cy,\n  name,\n  className,\n  style,\n  fill,\n}: PropsWithChildren<{\n  r: number;\n  cx: number;\n  cy: number;\n  className: string;\n  fill?: string;\n  name: string;\n  style?: React.CSSProperties;\n}>) {\n  return (\n    <circle r={r} cx={cx} cy={cy} className={className} style={mergeColor(style, fill)}>\n      {name && <title>{name}</title>}\n    </circle>\n  );\n});\n\nexport default UpSetDot;\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { ISetCombination } from '@upsetjs/model';\nimport React, { PropsWithChildren, ReactElement } from 'react';\nimport type { UpSetDataInfo } from '../derive/deriveDataDependent';\nimport type { UpSetSizeInfo } from '../derive/deriveSizeDependent';\nimport type { UpSetStyleInfo } from '../derive/deriveStyleDependent';\nimport type { UpSetSelection } from './interfaces';\nimport UpSetDot from './UpSetDot';\nimport { addonPositionGenerator, mergeColor } from './utils';\nimport { clsx } from '../utils';\nimport { OVERFLOW_PADDING_FACTOR } from '../defaults';\n\nexport function computeOverflowValues(value: number, max: number, scale: (v: number) => number) {\n  const scaled = [scale(value)];\n  for (let i = 0; i < OVERFLOW_PADDING_FACTOR.length && value > max; i++) {\n    value -= max;\n    scaled.push(scale(value));\n  }\n  return scaled;\n}\n\nexport type CombinationChartProps<T> = PropsWithChildren<{\n  d: ISetCombination<T>;\n  size: UpSetSizeInfo;\n  style: UpSetStyleInfo;\n  data: UpSetDataInfo<T>;\n  className?: string;\n  h: UpSetSelection;\n}>;\n\nconst CombinationChart = /*!#__PURE__*/ React.memo(function CombinationChart<T>({\n  d,\n  h,\n  className,\n  data,\n  size,\n  style,\n  children,\n}: CombinationChartProps<T>) {\n  const yValues = computeOverflowValues(d.cardinality, data.cs.max, data.cs.y);\n\n  const genPosition = addonPositionGenerator(size.cs.h + size.sets.h, size.cs.addonPadding);\n  return (\n    <g\n      transform={`translate(${data.cs.x(d)}, 0)`}\n      onMouseEnter={h.onMouseEnter(d, size.cs.addons)}\n      onMouseLeave={h.onMouseLeave}\n      onClick={h.onClick(d, size.cs.addons)}\n      onContextMenu={h.onContextMenu(d, size.cs.addons)}\n      onMouseMove={h.onMouseMove(d, size.cs.addons)}\n      className={className}\n      data-cardinality={d.cardinality}\n    >\n      {style.tooltips && (\n        <title>\n          {d.name}: {data.cs.format(d.cardinality)}\n        </title>\n      )}\n      <rect\n        y={-size.cs.before}\n        width={data.cs.bandWidth}\n        height={size.sets.h + size.cs.h + size.cs.before + size.cs.after}\n        className={`hoverBar-${style.id}`}\n      />\n      {size.cs.h > 0 && (\n        <>\n          {yValues.map((y, i) => {\n            const offset = i > 0 ? Math.floor(data.cs.bandWidth * OVERFLOW_PADDING_FACTOR[i - 1]) : 0;\n            return (\n              <rect\n                key={i}\n                x={offset}\n                y={y}\n                height={size.cs.h - y}\n                width={data.cs.bandWidth - offset * 2}\n                className={clsx(\n                  `fillPrimary-${style.id}`,\n                  i < yValues.length - 1 && `fillOverflow${yValues.length - 1 - i}-${style.id}`,\n                  style.classNames.bar\n                )}\n                style={mergeColor(style.styles.bar, d.color)}\n              />\n            );\n          })}\n          <text\n            y={yValues[0] - style.barLabelOffset}\n            x={data.cs.bandWidth / 2}\n            style={style.styles.barLabel}\n            className={clsx(`cBarTextStyle-${style.id}`, style.classNames.barLabel)}\n          >\n            {data.cs.format(d.cardinality)}\n          </text>\n        </>\n      )}\n      <text\n        y={-style.barLabelOffset - size.cs.before}\n        x={data.cs.bandWidth / 2}\n        style={style.styles.barLabel}\n        className={clsx(`hoverBarTextStyle-${style.id}`, style.classNames.barLabel)}\n      >\n        {d.name}\n      </text>\n      {data.sets.v.map((s, i) => {\n        if (data.cs.has(d, s)) {\n          // only not\n          return null;\n        }\n        return (\n          <UpSetDot\n            key={data.sets.keys[i]}\n            r={data.r}\n            cx={data.cs.cx}\n            cy={data.sets.y(s)! + data.sets.cy}\n            name={style.tooltips ? d.name : ''}\n            style={style.styles.dot}\n            fill={undefined}\n            className={clsx(`fillNotMember-${style.id}`, style.classNames.dot)}\n          />\n        );\n      })}\n      {d.sets.size > 1 && (\n        <line\n          x1={data.cs.cx}\n          y1={data.sets.y(data.sets.v.find((p) => data.cs.has(d, p))!)! + data.sets.cy - (data.r - 1)}\n          x2={data.cs.cx}\n          y2={data.sets.y(data.sets.rv.find((p) => data.cs.has(d, p))!)! + data.sets.cy + (data.r - 1)}\n          style={d.color ? { stroke: d.color } : undefined}\n          className={`upsetLine-${data.id}`}\n        />\n      )}\n      {data.sets.v.map((s, i) => {\n        if (!data.cs.has(d, s)) {\n          // only has\n          return null;\n        }\n        return (\n          <UpSetDot\n            key={data.sets.keys[i]}\n            r={data.r}\n            cx={data.cs.cx}\n            cy={data.sets.y(s)! + data.sets.cy}\n            name={style.tooltips ? s.name : ''}\n            style={style.styles.dot}\n            fill={s.color ?? d.color}\n            className={clsx(`fillPrimary-${style.id}`, style.classNames.dot)}\n          />\n        );\n      })}\n      {size.cs.addons.map((addon) => (\n        <g key={addon.name} transform={`translate(0,${genPosition(addon)})`}>\n          {addon.render({ set: d, width: data.cs.bandWidth, height: addon.size, theme: style.theme })}\n        </g>\n      ))}\n      {children}\n    </g>\n  );\n});\n\nexport default CombinationChart as <T>(props: CombinationChartProps<T>) => ReactElement;\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { ISet } from '@upsetjs/model';\nimport React, { PropsWithChildren, ReactElement } from 'react';\nimport type { UpSetDataInfo } from '../derive/deriveDataDependent';\nimport type { UpSetSizeInfo } from '../derive/deriveSizeDependent';\nimport type { UpSetStyleInfo } from '../derive/deriveStyleDependent';\nimport type { UpSetSelection } from './interfaces';\nimport { addonPositionGenerator, mergeColor } from './utils';\nimport { clsx } from '../utils';\nimport { OVERFLOW_PADDING_FACTOR } from '../defaults';\nimport { computeOverflowValues } from './CombinationChart';\n\nexport type SetChartProps<T> = PropsWithChildren<{\n  d: ISet<T>;\n  i: number;\n  className?: string;\n  size: UpSetSizeInfo;\n  style: UpSetStyleInfo;\n  data: UpSetDataInfo<T>;\n  h: UpSetSelection;\n}>;\n\nconst SetChart = /*!#__PURE__*/ React.memo(function SetChart<T>({\n  d,\n  i,\n  h,\n  className,\n  size,\n  data,\n  style,\n  children,\n}: SetChartProps<T>) {\n  const xValues = computeOverflowValues(d.cardinality, data.sets.max, data.sets.x);\n  const genPosition = addonPositionGenerator(size.sets.w + size.labels.w + size.cs.w, size.sets.addonPadding);\n  const anchorOffset =\n    style.setLabelAlignment === 'center'\n      ? size.labels.w / 2\n      : style.setLabelAlignment === 'left'\n      ? 2\n      : size.labels.w - 2;\n  return (\n    <g\n      transform={`translate(0, ${data.sets.y(d)})`}\n      onMouseEnter={h.onMouseEnter(d, size.sets.addons)}\n      onMouseLeave={h.onMouseLeave}\n      onClick={h.onClick(d, size.sets.addons)}\n      onContextMenu={h.onContextMenu(d, size.sets.addons)}\n      onMouseMove={h.onMouseMove(d, size.sets.addons)}\n      className={className}\n      data-cardinality={d.cardinality}\n    >\n      {style.tooltips && (\n        <title>\n          {d.name}: {data.sets.format(d.cardinality)}\n        </title>\n      )}\n      <rect\n        x={-size.sets.before}\n        width={size.sets.w + size.labels.w + size.cs.w + size.sets.after}\n        height={data.sets.bandWidth}\n        className={`hoverBar-${style.id}`}\n      />\n      {i % 2 === 1 && (\n        <rect\n          x={size.sets.w}\n          width={size.labels.w + size.cs.w + size.sets.after}\n          height={data.sets.bandWidth}\n          className={`fillAlternating-${style.id}`}\n        />\n      )}\n      {size.sets.w > 0 && (\n        <>\n          {xValues.map((x, i) => {\n            const offset = i > 0 ? Math.floor(data.sets.bandWidth * OVERFLOW_PADDING_FACTOR[i - 1]) : 0;\n            return (\n              <rect\n                key={i}\n                x={x}\n                y={offset}\n                width={size.sets.w - x}\n                height={data.sets.bandWidth - offset * 2}\n                className={clsx(\n                  `fillPrimary-${style.id}`,\n                  i < xValues.length - 1 && `fillOverflow${xValues.length - 1 - i}-${style.id}`,\n                  style.classNames.bar\n                )}\n                style={mergeColor(style.styles.bar, d.color)}\n              />\n            );\n          })}\n          <text\n            x={xValues[0]}\n            dx={-style.barLabelOffset}\n            y={data.sets.bandWidth / 2}\n            style={style.styles.barLabel}\n            className={clsx(`sBarTextStyle-${style.id}`, style.classNames.barLabel)}\n          >\n            {data.sets.format(d.cardinality)}\n          </text>\n        </>\n      )}\n      <text\n        x={size.sets.w + anchorOffset}\n        y={data.sets.bandWidth / 2}\n        className={clsx(`setTextStyle-${style.id}`, style.classNames.setLabel)}\n        style={style.styles.setLabel}\n        clipPath={`url(#clip-${size.id})`}\n      >\n        {d.name}\n      </text>\n      {size.sets.addons.map((addon) => (\n        <g key={addon.name} transform={`translate(${genPosition(addon)},0)`}>\n          {addon.render({ set: d, width: addon.size, height: data.sets.bandWidth, theme: style.theme })}\n        </g>\n      ))}\n      {children}\n    </g>\n  );\n});\n\nexport default SetChart as <T>(props: SetChartProps<T>) => ReactElement;\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { ISetCombination, ISet } from '@upsetjs/model';\nimport React, { PropsWithChildren, ReactElement } from 'react';\nimport CombinationChart from './CombinationChart';\nimport type { UpSetDataInfo } from '../derive/deriveDataDependent';\nimport type { UpSetSizeInfo } from '../derive/deriveSizeDependent';\nimport type { UpSetStyleInfo } from '../derive/deriveStyleDependent';\nimport SetChart from './SetChart';\nimport type { Handlers } from '../hooks/useHandler';\n\ndeclare type UpSetChartProps<T> = PropsWithChildren<{\n  size: UpSetSizeInfo;\n  style: UpSetStyleInfo;\n  data: UpSetDataInfo<T>;\n  h: Handlers;\n  setChildrenFactory?: (set: ISet<T>) => React.ReactNode;\n  combinationChildrenFactory?: (combination: ISetCombination<T>) => React.ReactNode;\n}>;\n\nconst UpSetChart = /*!#__PURE__*/ React.memo(function UpSetChart<T>({\n  data,\n  size,\n  style,\n  h,\n  setChildrenFactory,\n  combinationChildrenFactory,\n}: UpSetChartProps<T>) {\n  return (\n    <g className={h.hasClick ? `clickAble-${style.id}` : undefined}>\n      <g transform={`translate(${size.sets.x},${size.sets.y})`} data-upset=\"sets\">\n        {data.sets.v.map((d, i) => (\n          <SetChart\n            key={data.sets.keys[i]}\n            d={d}\n            i={i}\n            h={h}\n            className={h.hasClick || h.hasHover ? `interactive-${style.id}` : undefined}\n            data={data}\n            style={style}\n            size={size}\n          >\n            {setChildrenFactory && setChildrenFactory(d)}\n          </SetChart>\n        ))}\n      </g>\n\n      <g transform={`translate(${size.cs.x},${size.cs.y})`} data-upset=\"cs\">\n        {data.cs.v.map((d, i) => (\n          <CombinationChart\n            key={data.cs.keys[i]}\n            d={d}\n            h={h}\n            className={h.hasClick || h.hasHover ? `interactive-${style.id}` : undefined}\n            data={data}\n            style={style}\n            size={size}\n          >\n            {combinationChildrenFactory && combinationChildrenFactory(d)}\n          </CombinationChart>\n        ))}\n      </g>\n    </g>\n  );\n});\n\nexport default UpSetChart as <T>(props: UpSetChartProps<T>) => ReactElement;\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { ISetLike, ISetCombination } from '@upsetjs/model';\nimport React, { PropsWithChildren, ReactNode } from 'react';\nimport type { UpSetAddons } from '../interfaces';\nimport type { UpSetDataInfo } from '../derive/deriveDataDependent';\nimport type { UpSetSizeInfo } from '../derive/deriveSizeDependent';\nimport type { UpSetStyleInfo } from '../derive/deriveStyleDependent';\nimport { addonPositionGenerator, mergeColor } from './utils';\nimport { clsx } from '../utils';\nimport { computeOverflowValues } from './CombinationChart';\nimport { OVERFLOW_PADDING_FACTOR } from '../defaults';\n\nfunction CombinationSelectionChart<T>({\n  data,\n  size,\n  style,\n  elemOverlap,\n  secondary,\n  tooltip,\n  suffix,\n  transform,\n  empty,\n  combinationAddons,\n}: PropsWithChildren<{\n  transform?: string;\n  data: UpSetDataInfo<T>;\n  size: UpSetSizeInfo;\n  style: UpSetStyleInfo;\n  suffix: string;\n  empty?: boolean;\n  elemOverlap: (s: ISetLike<T>) => number;\n  secondary?: boolean;\n  tooltip?: string;\n  combinationAddons: UpSetAddons<ISetCombination<T>, T, ReactNode>;\n}>) {\n  const width = data.cs.bandWidth;\n  const totalHeight = size.cs.h + size.sets.h;\n  const height = size.cs.h;\n  const className = clsx(`fill${suffix}`, !tooltip && `pnone-${style.id}`, style.classNames.bar);\n  return (\n    <g transform={transform} data-upset={secondary ? 'cs-q' : 'cs-s'}>\n      {data.cs.v.map((d, i) => {\n        const x = data.cs.x(d)!;\n        const key = data.cs.keys[i];\n        if (empty && !secondary) {\n          return (\n            <rect\n              key={key}\n              x={x}\n              y={height}\n              height={0}\n              width={width}\n              className={className}\n              style={mergeColor(style.styles.bar, !style.selectionColor ? d.color : undefined)}\n            >\n              {tooltip && <title></title>}\n            </rect>\n          );\n        }\n        const o = elemOverlap(d);\n        if (o === 0) {\n          return null;\n        }\n        const yValues = computeOverflowValues(o, data.cs.max, data.cs.y);\n\n        const title = tooltip && <title>{`${d.name} ∩ ${tooltip}: ${o}`}</title>;\n        const content = secondary ? (\n          <path\n            key={key}\n            transform={`translate(${x}, ${yValues[0]})`}\n            d={`M0,-1 l${width},0 l0,2 l${-width},0 L-${data.triangleSize},-${data.triangleSize} L-${\n              data.triangleSize\n            },${data.triangleSize} Z`}\n            className={className}\n            data-i={i}\n            data-cardinality={o}\n            style={mergeColor(undefined, !style.selectionColor ? d.color : undefined)}\n          >\n            {title}\n          </path>\n        ) : (\n          yValues.map((y, j) => {\n            const offset = j > 0 ? Math.floor(data.cs.bandWidth * OVERFLOW_PADDING_FACTOR[j - 1]) : 0;\n            return (\n              <rect\n                key={j}\n                x={x + offset}\n                y={y}\n                height={height - y}\n                width={width - offset * 2}\n                data-i={j > 0 ? null : i}\n                data-cardinality={j > 0 ? null : o}\n                className={clsx(\n                  className,\n                  j < yValues.length - 1 && `fillOverflow${yValues.length - 1 - j}-${style.id}`\n                )}\n                style={mergeColor(style.styles.bar, !style.selectionColor ? d.color : undefined)}\n              >\n                {title}\n              </rect>\n            );\n          })\n        );\n\n        const genPosition = addonPositionGenerator(totalHeight, size.cs.addonPadding);\n        const addons = combinationAddons\n          .map((addon) => {\n            const v = genPosition(addon);\n            const content = addon.render({ set: d, width, height: addon.size, theme: style.theme });\n            if (!content) {\n              return null;\n            }\n            return (\n              <g key={addon.name} transform={`translate(${x},${v})`}>\n                {content}\n              </g>\n            );\n          })\n          .filter(Boolean);\n\n        if (addons.length === 0) {\n          return content;\n        }\n        return (\n          <g key={key}>\n            {content}\n            {addons}\n          </g>\n        );\n      })}\n    </g>\n  );\n}\n\nexport default CombinationSelectionChart;\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { ISetLike, ISet } from '@upsetjs/model';\nimport React, { PropsWithChildren } from 'react';\nimport type { UpSetAddons } from '../interfaces';\nimport type { UpSetDataInfo } from '../derive/deriveDataDependent';\nimport type { UpSetSizeInfo } from '../derive/deriveSizeDependent';\nimport type { UpSetStyleInfo } from '../derive/deriveStyleDependent';\nimport { addonPositionGenerator, mergeColor } from './utils';\nimport { clsx } from '../utils';\nimport { computeOverflowValues } from './CombinationChart';\nimport { OVERFLOW_PADDING_FACTOR } from '../defaults';\n\nfunction SetSelectionChart<T>({\n  data,\n  size,\n  style,\n  elemOverlap,\n  suffix,\n  secondary,\n  empty,\n  tooltip,\n  setAddons,\n  transform,\n}: PropsWithChildren<{\n  data: UpSetDataInfo<T>;\n  size: UpSetSizeInfo;\n  style: UpSetStyleInfo;\n  suffix: string;\n  empty?: boolean;\n  elemOverlap: (s: ISetLike<T>) => number;\n  secondary?: boolean;\n  tooltip?: string;\n  transform?: string;\n  setAddons: UpSetAddons<ISet<T>, T, React.ReactNode>;\n}>) {\n  const width = size.sets.w;\n  const totalWidth = size.sets.w + size.labels.w + size.cs.w;\n  const height = data.sets.bandWidth;\n  const className = clsx(`fill${suffix}`, !tooltip && ` pnone-${style.id}`, style.classNames.bar);\n  return (\n    <g transform={transform} data-upset={secondary ? 'sets-q' : 'sets-s'}>\n      {data.sets.v.map((d, i) => {\n        const y = data.sets.y(d)!;\n        const key = data.sets.keys[i];\n        if (empty && !secondary) {\n          return (\n            <rect\n              key={key}\n              x={width}\n              y={y}\n              width={0}\n              height={height}\n              className={className}\n              style={mergeColor(style.styles.bar, !style.selectionColor ? d.color : undefined)}\n            >\n              {style.tooltips && tooltip && <title></title>}\n            </rect>\n          );\n        }\n        const o = elemOverlap(d);\n        if (o === 0) {\n          return null;\n        }\n        const xValues = computeOverflowValues(o, data.sets.max, data.sets.x);\n        const title = style.tooltips && tooltip && <title>{`${d.name} ∩ ${tooltip}: ${o}`}</title>;\n\n        const content = secondary ? (\n          <path\n            key={key}\n            transform={`translate(${xValues[0]}, ${y + height})`}\n            d={`M1,0 l0,${-height} l-2,0 l0,${height} L-${data.triangleSize},${data.triangleSize} L${\n              data.triangleSize\n            },${data.triangleSize} Z`}\n            data-i={i}\n            data-cardinality={o}\n            className={className}\n            style={mergeColor(undefined, !style.selectionColor ? d.color : undefined)}\n          >\n            {title}\n          </path>\n        ) : (\n          xValues.map((x, j) => {\n            const offset = j > 0 ? Math.floor(data.sets.bandWidth * OVERFLOW_PADDING_FACTOR[j - 1]) : 0;\n            return (\n              <rect\n                key={j}\n                data-i={j > 0 ? null : i}\n                data-cardinality={j > 0 ? null : o}\n                x={x}\n                y={y + offset}\n                width={width - x}\n                height={height - offset * 2}\n                className={clsx(\n                  className,\n                  j < xValues.length - 1 && `fillOverflow${xValues.length - 1 - j}-${style.id}`\n                )}\n                style={mergeColor(style.styles.bar, !style.selectionColor ? d.color : undefined)}\n              >\n                {title}\n              </rect>\n            );\n          })\n        );\n\n        const genPosition = addonPositionGenerator(totalWidth, size.sets.addonPadding);\n        const addons = setAddons\n          .map((addon) => {\n            const v = genPosition(addon);\n            const content = addon.render({ set: d, width: addon.size, height, theme: style.theme });\n            if (!content) {\n              return null;\n            }\n            return (\n              <g key={addon.name} transform={`translate(${v},${y})`}>\n                {content}\n              </g>\n            );\n          })\n          .filter(Boolean);\n\n        if (addons.length === 0) {\n          return content;\n        }\n        return (\n          <g key={key}>\n            {content}\n            {addons}\n          </g>\n        );\n      })}\n    </g>\n  );\n}\n\nexport default SetSelectionChart;\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport { ISetLike, queryElemOverlap, queryOverlap, UpSetQuery } from '@upsetjs/model';\nimport React, { PropsWithChildren, useMemo } from 'react';\nimport type { UpSetAddon, UpSetAddonProps } from '../interfaces';\nimport CombinationSelectionChart from './CombinationSelectionChart';\nimport type { UpSetDataInfo } from '../derive/deriveDataDependent';\nimport type { UpSetSizeInfo } from '../derive/deriveSizeDependent';\nimport type { UpSetStyleInfo } from '../derive/deriveStyleDependent';\nimport SetSelectionChart from './SetSelectionChart';\n\nconst EMPTY_ARRAY: any[] = [];\n\nexport type UpSetQueriesProps<T> = PropsWithChildren<{\n  size: UpSetSizeInfo;\n  style: UpSetStyleInfo;\n  data: UpSetDataInfo<T>;\n  hasHover?: boolean;\n  secondary: boolean;\n  queries: readonly UpSetQuery<T>[];\n}>;\n\nexport const UpSetQueries = /*!#__PURE__*/ React.memo(function UpSetQueries<T>({\n  size,\n  data,\n  style,\n  hasHover,\n  secondary,\n  queries,\n}: UpSetQueriesProps<T>) {\n  const someAddon =\n    size.sets.addons.some((s) => s.renderQuery != null) || size.cs.addons.some((s) => s.renderQuery != null);\n  const qs = useMemo(\n    () =>\n      queries.map((q) => ({\n        ...q,\n        overlap: queryOverlap(q, 'intersection', data.toElemKey),\n        elemOverlap: someAddon ? queryElemOverlap(q, 'intersection', data.toElemKey) : null,\n      })),\n    [queries, someAddon, data.toElemKey]\n  );\n\n  function wrapAddon<S extends ISetLike<T>>(\n    addon: UpSetAddon<S, T, React.ReactNode>,\n    query: UpSetQuery<T>,\n    index: number,\n    overlapper: (set: S) => readonly T[] | null,\n    secondary: boolean\n  ) {\n    return {\n      ...addon,\n      render: (props: UpSetAddonProps<S, T>) => {\n        const overlap = overlapper(props.set);\n        return addon.renderQuery ? addon.renderQuery({ query, overlap, index, secondary, ...props }) : null;\n      },\n    };\n  }\n\n  return (\n    <g className={hasHover && !secondary ? `pnone-${style.id}` : undefined}>\n      <g transform={`translate(${size.sets.x},${size.sets.y})`}>\n        {qs.map((q, i) => (\n          <SetSelectionChart\n            key={q.name}\n            data={data}\n            size={size}\n            style={style}\n            elemOverlap={q.overlap}\n            suffix={`Q${i}-${data.id}`}\n            secondary={secondary || i > 0}\n            tooltip={hasHover && !(secondary || i > 0) ? undefined : q.name}\n            setAddons={\n              size.sets.addons.length === 0\n                ? EMPTY_ARRAY\n                : size.sets.addons.map((a, i) => wrapAddon(a, q, i, q.elemOverlap!, secondary || i > 0))\n            }\n          />\n        ))}\n      </g>\n      <g transform={`translate(${size.cs.x},${size.cs.y})`}>\n        {qs.map((q, i) => (\n          <CombinationSelectionChart\n            key={q.name}\n            data={data}\n            size={size}\n            style={style}\n            elemOverlap={q.overlap}\n            suffix={`Q${i}-${data.id}`}\n            secondary={secondary || i > 0}\n            tooltip={hasHover && !(secondary || i > 0) ? undefined : q.name}\n            combinationAddons={\n              size.cs.addons.length === 0\n                ? EMPTY_ARRAY\n                : size.cs.addons.map((a, i) => wrapAddon(a, q, i, q.elemOverlap!, secondary || i > 0))\n            }\n          />\n        ))}\n      </g>\n    </g>\n  );\n});\n\nexport default UpSetQueries as <T>(props: UpSetQueriesProps<T>) => React.ReactElement;\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { ISetLike } from '@upsetjs/model';\nimport React, { PropsWithChildren } from 'react';\nimport type { UpSetDataInfo } from '../derive/deriveDataDependent';\nimport type { UpSetSizeInfo } from '../derive/deriveSizeDependent';\nimport type { UpSetStyleInfo } from '../derive/deriveStyleDependent';\n\nexport default function LabelsSelection<T>({\n  data,\n  size,\n  style,\n  selection,\n}: PropsWithChildren<{\n  data: UpSetDataInfo<T>;\n  size: UpSetSizeInfo;\n  style: UpSetStyleInfo;\n  selection: ISetLike<T> | null;\n}>) {\n  if (!selection || selection.type !== 'set' || !data.sets.keys.includes(data.toKey(selection))) {\n    return null;\n  }\n  const d = selection;\n  return (\n    <rect\n      y={data.sets.y(d)}\n      width={size.labels.w + size.cs.w + size.sets.after}\n      height={data.sets.bandWidth}\n      className={`selectionHint-${style.id}`}\n    />\n  );\n}\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { ISetLike } from '@upsetjs/model';\nimport React, { PropsWithChildren } from 'react';\nimport type { UpSetDataInfo } from '../derive/deriveDataDependent';\nimport type { UpSetSizeInfo } from '../derive/deriveSizeDependent';\nimport type { UpSetStyleInfo } from '../derive/deriveStyleDependent';\nimport UpSetDot from './UpSetDot';\nimport { clsx } from '../utils';\nimport { mergeColor } from './utils';\n\nfunction UpSetSelectionChart<T>({\n  data,\n  size,\n  style,\n  selection,\n}: PropsWithChildren<{\n  data: UpSetDataInfo<T>;\n  size: UpSetSizeInfo;\n  style: UpSetStyleInfo;\n  selection: ISetLike<T> | null;\n}>) {\n  const cy = data.sets.bandWidth / 2;\n  const cx = data.cs.cx;\n  const r = data.r;\n  const height = size.sets.h + size.sets.after;\n  const width = data.cs.bandWidth;\n\n  if (!selection || selection.type === 'set' || !data.cs) {\n    return null;\n  }\n  const d = selection;\n  const index = data.cs.keys.indexOf(data.toKey(d));\n  if (index < 0) {\n    return null;\n  }\n\n  return (\n    <g transform={`translate(${size.labels.w + data.cs.x(d)!}, 0)`} data-upset=\"cs-ss\" data-i={index}>\n      <rect width={width} height={height} className={`selectionHint-${style.id}`} />\n      {d.sets.size > 1 && (\n        <line\n          x1={cx}\n          y1={data.sets.y(data.sets.v.find((p) => data.cs.has(d, p))!)! + cy - (data.r - 1)}\n          x2={cx}\n          y2={data.sets.y(data.sets.rv.find((p) => data.cs.has(d, p))!)! + cy + (data.r - 1)}\n          className={`upsetSelectionLine-${data.id}`}\n          style={mergeColor(undefined, !style.selectionColor ? d.color : undefined, 'stroke')}\n        />\n      )}\n      {data.sets.v\n        .filter((s) => data.cs.has(d, s))\n        .map((s) => (\n          <UpSetDot\n            key={data.toKey(s)}\n            r={r * 1.1}\n            cx={cx}\n            cy={data.sets.y(s)! + cy}\n            name={style.tooltips ? s.name : ''}\n            className={clsx(`fillSelection-${style.id}`, `pnone-${style.id}`, style.classNames.dot)}\n            style={mergeColor(style.styles.dot, !style.selectionColor ? s.color : undefined)}\n          />\n        ))}\n    </g>\n  );\n}\n\nexport default UpSetSelectionChart;\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { ISetLike } from '@upsetjs/model';\nimport React, { PropsWithChildren } from 'react';\nimport type { UpSetAddon, UpSetAddonProps } from '../interfaces';\nimport CombinationSelectionChart from './CombinationSelectionChart';\nimport type { UpSetDataInfo } from '../derive/deriveDataDependent';\nimport type { UpSetSizeInfo } from '../derive/deriveSizeDependent';\nimport type { UpSetStyleInfo } from '../derive/deriveStyleDependent';\nimport LabelsSelection from './LabelsSelection';\nimport SetSelectionChart from './SetSelectionChart';\nimport UpSetSelectionChart from './UpSetSelectionChart';\nimport { generateSelectionOverlap, elemElemOverlapOf, isSetLike, generateSelectionName } from '../utils';\n\nconst EMPTY_ARRAY: any[] = [];\n\nexport default function UpSetSelection<T>({\n  size,\n  data,\n  style,\n  selection,\n  hasHover,\n}: PropsWithChildren<{\n  size: UpSetSizeInfo;\n  style: UpSetStyleInfo;\n  data: UpSetDataInfo<T>;\n  hasHover?: boolean;\n  selection: ISetLike<T> | null | readonly T[] | ((s: ISetLike<T>) => number);\n}>) {\n  const empty = style.emptySelection;\n\n  const selectionOverlap = generateSelectionOverlap(selection, data.overlapGuesser, data.toElemKey);\n  const selectionName = generateSelectionName(selection);\n\n  const someAddon =\n    size.sets.addons.some((s) => s.renderSelection != null) || size.cs.addons.some((s) => s.renderSelection != null);\n  const selectionElemOverlap =\n    selection && typeof selection !== 'function' && someAddon\n      ? elemElemOverlapOf(Array.isArray(selection) ? selection : (selection as ISetLike<T>).elems, data.toElemKey)\n      : null;\n\n  function wrapAddon<S extends ISetLike<T>>(addon: UpSetAddon<S, T, React.ReactNode>) {\n    return {\n      ...addon,\n      render: (props: UpSetAddonProps<S, T>) => {\n        const overlap = selectionElemOverlap ? selectionElemOverlap(props.set) : null;\n        return addon.renderSelection\n          ? addon.renderSelection({\n              selection,\n              selectionColor: style.selectionColor || props.set.color || 'orange',\n              overlap,\n              ...props,\n            })\n          : null;\n      },\n    };\n  }\n\n  return (\n    <g className={hasHover ? `pnone-${style.id}` : undefined}>\n      {(selection || empty) && (\n  Array.isArray(selection)\n    ? selection.map((set, index) => (\n        <CombinationSelectionChart\n          key={index}\n          data={data}\n          size={size}\n          style={style}\n          transform={`translate(${size.cs.x},${size.cs.y})`}\n          empty={empty && !set}\n          elemOverlap={generateSelectionOverlap(set, data.overlapGuesser, data.toElemKey)}\n          suffix={`Selection-${style.id}-${index}`}\n          tooltip={hasHover ? undefined : generateSelectionName(set)}\n          combinationAddons={size.cs.addons.length === 0 ? EMPTY_ARRAY : size.cs.addons.map(wrapAddon)}\n        />\n      ))\n    : <CombinationSelectionChart\n        data={data}\n        size={size}\n        style={style}\n        transform={`translate(${size.cs.x},${size.cs.y})`}\n        empty={empty && !selection}\n        elemOverlap={selectionOverlap}\n        suffix={`Selection-${style.id}`}\n        tooltip={hasHover ? undefined : selectionName}\n        combinationAddons={size.cs.addons.length === 0 ? EMPTY_ARRAY : size.cs.addons.map(wrapAddon)}\n      />\n)}\n      {(selection || empty) && (\n        <SetSelectionChart\n          data={data}\n          size={size}\n          style={style}\n          transform={`translate(${size.sets.x},${size.sets.y})`}\n          empty={empty && !selection}\n          elemOverlap={selectionOverlap}\n          suffix={`Selection-${style.id}`}\n          tooltip={hasHover ? undefined : selectionName}\n          setAddons={size.sets.addons.length === 0 ? EMPTY_ARRAY : size.sets.addons.map(wrapAddon)}\n        />\n      )}\n      <g transform={`translate(${size.labels.x},${size.labels.y})`}>\n        {isSetLike(selection) && <LabelsSelection data={data} size={size} style={style} selection={selection} />}\n        {isSetLike(selection) && <UpSetSelectionChart data={data} size={size} style={style} selection={selection} />}\n      </g>\n    </g>\n  );\n}\n", "import { OVERFLOW_OPACITY_FACTOR } from './defaults';\nimport type { UpSetBaseFontSizes, UpSetBaseThemeProps } from './interfaces';\n\nfunction propRule(value: string | number | undefined | false, prop = 'font-size') {\n  return value ? `${prop}: ${value};` : '';\n}\n\nexport function baseRules(\n  styleId: string,\n  theme: Required<UpSetBaseThemeProps>,\n  fontFamily: string | false,\n  fontSizes: UpSetBaseFontSizes\n) {\n  const hasS: string[] = [];\n  if (theme.hasSelectionColor) {\n    hasS.push(`fill: ${theme.hasSelectionColor};`);\n  }\n  const hasSelectionOpacity = theme.hasSelectionOpacity != null && theme.hasSelectionOpacity >= 0;\n  if (hasSelectionOpacity) {\n    hasS.push(`fill-opacity: ${theme.hasSelectionOpacity};`);\n  }\n  return {\n    p: propRule,\n    root: `\n  .root-${styleId} {\n    ${propRule(fontFamily, 'font-family')}\n  }\n  `,\n    text: `\n  .titleTextStyle-${styleId} {\n    fill: ${theme.textColor};\n    ${propRule(fontSizes.title)}\n  }\n  .descTextStyle-${styleId} {\n    fill: ${theme.textColor};\n    ${propRule(fontSizes.description)}\n  }\n\n  .legendTextStyle-${styleId} {\n    fill: ${theme.textColor};\n    ${propRule(fontSizes.legend)}\n    text-anchor: middle;\n    dominant-baseline: hanging;\n    pointer-events: none;\n  }\n  `,\n    hasSFill: hasS.join(' '),\n    hasSStroke: hasS.join(' ').replace('fill:', 'stroke:').replace('fill-', 'stroke-'),\n    fill: `\n  .fillPrimary-${styleId} { fill: ${theme.color}; fill-opacity: ${theme.opacity}; }\n  .fillOverflow1-${styleId} { fill-opacity: ${theme.opacity * OVERFLOW_OPACITY_FACTOR[0]}; }\n  .fillOverflow2-${styleId} { fill-opacity: ${theme.opacity * OVERFLOW_OPACITY_FACTOR[1]}; }\n  ${hasS.length > 0 ? `.root-${styleId}[data-selection] .fillPrimary-${styleId} { ${hasS.join(' ')} }` : ''}\n  ${\n    hasSelectionOpacity\n      ? `\n      .root-${styleId}[data-selection] .fillOverflow1-${styleId} { fill-opacity: ${\n          theme.opacity * OVERFLOW_OPACITY_FACTOR[0]\n        }; }\n      .root-${styleId}[data-selection] .fillOverflow2-${styleId} { fill-opacity: ${\n          theme.opacity * OVERFLOW_OPACITY_FACTOR[1]\n        }; }`\n      : ''\n  }\n  ${theme.selectionColor ? `.fillSelection-${styleId} { fill: ${theme.selectionColor}; }` : ''}\n  .fillTransparent-${styleId} { fill: transparent; }\n\n  .selectionHint-${styleId} {\n    fill: transparent;\n    pointer-events: none;\n    ${propRule(theme.selectionColor, 'stroke')}\n  }\n  .clickAble-${styleId} {\n    cursor: pointer;\n  }\n\n  .startText-${styleId} {\n    text-anchor: start;\n  }\n  .endText-${styleId} {\n    text-anchor: end;\n  }\n  .pnone-${styleId} {\n    pointer-events: none;\n  }`,\n    export: `\n  .exportTextStyle-${styleId} {\n    fill: ${theme.textColor};\n    ${propRule(fontSizes.exportLabel)}\n  }\n  .exportButtons-${styleId} {\n    text-anchor: middle;\n  }\n  .exportButton-${styleId} {\n    cursor: pointer;\n    opacity: 0.5;\n  }\n  .exportButton-${styleId}:hover {\n    opacity: 1;\n  }\n  .exportButton-${styleId} > rect {\n    fill: none;\n    stroke: ${theme.textColor};\n  }\n  `,\n  };\n}\n", "import { useMemo } from 'react';\nimport { wrap } from '../components/utils';\nimport type { UpSetSelectionProps } from '../interfaces';\n\nexport default function useHandler(p: UpSetSelectionProps) {\n  const onClick = p.onClick;\n  return useMemo(\n    () => ({\n      hasClick: onClick != null,\n      hasHover: p.onHover != null,\n      onClick: wrap(onClick),\n      onMouseEnter: wrap(p.onHover),\n      onContextMenu: wrap(p.onContextMenu),\n      onMouseLeave: p.onHover ? (evt: React.MouseEvent) => p.onHover!(null, evt.nativeEvent, []) : undefined,\n      onMouseMove: wrap(p.onMouseMove),\n      reset: (evt: React.MouseEvent<SVGElement>) => (onClick ? onClick(null, evt.nativeEvent, []) : null),\n    }),\n    [onClick, p.onHover, p.onContextMenu, p.onMouseMove]\n  );\n}\n\nexport declare type Handlers = ReturnType<typeof useHandler>;\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport React, { useMemo, Ref, useCallback } from 'react';\nimport type { UpSetProps } from './interfaces';\nimport { exportSVG, exportVegaLite } from './exporter';\nimport { exportDump, exportSharedLink } from './exporter/exportDump';\nimport deriveDataDependent from './derive/deriveDataDependent';\nimport deriveSizeDependent from './derive/deriveSizeDependent';\nimport deriveStyleDependent from './derive/deriveStyleDependent';\nimport ExportButtons from './components/ExportButtons';\nimport QueryLegend from './components/QueryLegend';\nimport UpSetAxis from './components/UpSetAxis';\nimport UpSetChart from './components/UpSetChart';\nimport UpSetQueries from './components/UpSetQueries';\nimport UpSetSelection from './components/UpSetSelection';\nimport { generateId, clsx, generateSelectionName, parseFontSize, toAnchor } from './utils';\nimport { fillDefaults } from './fillDefaults';\nimport { baseRules } from './rules';\nimport useHandler from './hooks/useHandler';\n\n/**\n * UpSetJS main pure functional stateless React component, the generic argument T refers to the type of the elements\n *\n * with React.forwardRef support to specify a reference to the SVG element\n */\nexport const UpSetJS = /*!#__PURE__*/ React.forwardRef(function UpSetJS<T = any>(\n  props: UpSetProps<T>,\n  ref: Ref<SVGSVGElement>\n) {\n  const p = fillDefaults<T>(props);\n  const { selection = null, queries = [], fontSizes } = p;\n\n  // generate a \"random\" but attribute stable id to avoid styling conflicts\n  const styleId = useMemo(\n    () =>\n      p.id\n        ? p.id\n        : generateId([\n            p.fontFamily,\n            fontSizes.axisTick,\n            fontSizes.barLabel,\n            fontSizes.chartLabel,\n            fontSizes.legend,\n            fontSizes.setLabel,\n            fontSizes.title,\n            fontSizes.exportLabel,\n            fontSizes.description,\n            p.textColor,\n            p.hoverHintColor,\n            p.color,\n            p.hasSelectionColor,\n            p.selectionColor,\n            p.notMemberColor,\n            p.alternatingBackgroundColor,\n            p.opacity,\n            p.hasSelectionOpacity,\n          ]),\n    [\n      p.id,\n      p.fontFamily,\n      fontSizes.axisTick,\n      fontSizes.barLabel,\n      fontSizes.chartLabel,\n      fontSizes.legend,\n      fontSizes.setLabel,\n      fontSizes.title,\n      fontSizes.exportLabel,\n      fontSizes.description,\n      p.textColor,\n      p.hoverHintColor,\n      p.color,\n      p.hasSelectionColor,\n      p.selectionColor,\n      p.notMemberColor,\n      p.alternatingBackgroundColor,\n      p.opacity,\n      p.hasSelectionOpacity,\n    ]\n  );\n  const styleInfo = useMemo(\n    () =>\n      deriveStyleDependent(\n        p.theme,\n        p.styles,\n        p.classNames,\n        p.combinationName,\n        p.combinationNameAxisOffset,\n        p.setName,\n        p.setNameAxisOffset,\n        styleId,\n        p.barLabelOffset,\n        p.selectionColor,\n        p.emptySelection,\n        p.title,\n        p.description,\n        p.tooltips,\n        p.setLabelAlignment\n      ),\n    [\n      p.theme,\n      p.styles,\n      p.classNames,\n      p.barLabelOffset,\n      p.combinationName,\n      p.combinationNameAxisOffset,\n      p.setName,\n      p.setNameAxisOffset,\n      styleId,\n      p.selectionColor,\n      p.emptySelection,\n      p.title,\n      p.description,\n      p.tooltips,\n      p.setLabelAlignment,\n    ]\n  );\n\n  const sizeInfo = useMemo(\n    () =>\n      deriveSizeDependent(\n        p.width,\n        p.height,\n        p.padding,\n        p.barPadding,\n        p.widthRatios,\n        p.heightRatios,\n        p.setAddons,\n        p.combinationAddons,\n        p.id,\n        p.setAddonPadding,\n        p.combinationAddonPadding\n      ),\n    [\n      p.width,\n      p.height,\n      p.padding,\n      p.barPadding,\n      p.widthRatios,\n      p.heightRatios,\n      p.setAddons,\n      p.combinationAddons,\n      p.id,\n      p.setAddonPadding,\n      p.combinationAddonPadding,\n    ]\n  );\n\n  const dataInfo = useMemo(\n    () =>\n      deriveDataDependent(\n        p.sets,\n        p.combinations,\n        sizeInfo,\n        p.numericScale,\n        p.bandScale,\n        p.barLabelOffset + parseFontSize(fontSizes.barLabel),\n        p.dotPadding,\n        p.barPadding,\n        parseFontSize(fontSizes.axisTick),\n        p.combinationAddons,\n        p.toKey,\n        p.toElemKey,\n        p.id,\n        p.setMaxScale,\n        p.combinationMaxScale\n      ),\n    [\n      p.sets,\n      p.combinations,\n      sizeInfo,\n      p.numericScale,\n      p.bandScale,\n      p.barLabelOffset,\n      fontSizes.barLabel,\n      p.dotPadding,\n      p.barPadding,\n      fontSizes.axisTick,\n      p.combinationAddons,\n      p.toKey,\n      p.toElemKey,\n      p.id,\n      p.setMaxScale,\n      p.combinationMaxScale,\n    ]\n  );\n\n  const rulesHelper = baseRules(styleId, p, p.fontFamily, fontSizes);\n\n  const h = useHandler(p);\n\n  const rules = `\n  ${rulesHelper.root}\n  ${rulesHelper.text}\n\n  .axisTextStyle-${styleId} {\n    fill: ${p.textColor};\n    ${rulesHelper.p(fontSizes.axisTick)}\n    text-anchor: middle;\n  }\n  .barTextStyle-${styleId} {\n    fill: ${p.textColor};\n    ${rulesHelper.p(fontSizes.barLabel)}\n  }\n  .cBarTextStyle-${styleId} {\n    fill: ${p.textColor};\n    ${rulesHelper.p(fontSizes.barLabel)}\n    text-anchor: middle;\n  }\n  .sBarTextStyle-${styleId} {\n    fill: ${p.textColor};\n    ${rulesHelper.p(fontSizes.barLabel)}\n    text-anchor: end;\n    dominant-baseline: central;\n  }\n  .hoverBarTextStyle-${styleId} {\n    ${rulesHelper.p(fontSizes.barLabel)}\n    fill: ${p.hoverHintColor};\n    display: none;\n    text-anchor: middle;\n  }\n  .setTextStyle-${styleId} {\n    fill: ${p.textColor};\n    ${rulesHelper.p(fontSizes.setLabel)}\n    text-anchor: ${toAnchor(p.setLabelAlignment)};\n    dominant-baseline: central;\n  }\n  .cChartTextStyle-${styleId} {\n    fill: ${p.textColor};\n    ${rulesHelper.p(fontSizes.chartLabel)}\n    text-anchor: middle;\n  }\n  .sChartTextStyle-${styleId} {\n    fill: ${p.textColor};\n    ${rulesHelper.p(fontSizes.chartLabel)}\n    text-anchor: middle;\n    dominant-baseline: hanging;\n  }\n\n  ${rulesHelper.fill}\n  .fillNotMember-${styleId} { fill: ${p.notMemberColor}; }\n  .fillAlternating-${styleId} { fill: ${p.alternatingBackgroundColor || 'transparent'}; }\n\n  .axisLine-${styleId} {\n    fill: none;\n    stroke: ${p.textColor};\n  }\n  .hoverBar-${styleId} {\n    fill: transparent;\n  }\n\n  .interactive-${styleId}:hover > .hoverBar-${styleId} {\n    stroke: ${p.hoverHintColor};\n  }\n  .interactive-${styleId}:hover > .hoverBarTextStyle-${styleId} {\n    display: unset;\n  }\n\n  ${rulesHelper.export}\n\n  .upsetLine-${dataInfo.id} {\n    stroke-width: ${dataInfo.r * 0.6};\n    stroke: ${p.color};\n    stroke-opacity: ${p.opacity};\n  }\n  ${\n    rulesHelper.hasSStroke\n      ? `.root-${styleId}[data-selection] .upsetLine-${dataInfo.id} { ${rulesHelper.hasSStroke} }`\n      : ''\n  }\n\n  .upsetSelectionLine-${dataInfo.id} {\n    stroke-width: ${dataInfo.r * 0.6 * 1.1};\n    ${rulesHelper.p(p.selectionColor, 'stroke')}\n    pointer-events: none;\n  }\n\n  ${queries\n    .map(\n      (q, i) => `.fillQ${i}-${dataInfo.id} {\n    fill: ${q.color};\n  }`\n    )\n    .join('\\n')}\n  `;\n\n  const exportChart = useCallback(\n    (evt: React.MouseEvent<SVGElement>) => {\n      const svg = evt.currentTarget.closest('svg') as SVGSVGElement;\n      const type = (evt.currentTarget.dataset.type || 'png') as 'svg' | 'png' | 'vega' | 'dump' | 'share';\n      switch (type) {\n        case 'vega':\n          exportVegaLite(svg);\n          break;\n        case 'dump':\n          exportDump(svg, props, dataInfo);\n          break;\n        case 'share':\n          exportSharedLink(props, dataInfo);\n          break;\n        case 'svg':\n        case 'png':\n          exportSVG(svg, {\n            type,\n            toRemove: `.${evt.currentTarget.getAttribute('class')}`,\n          });\n      }\n    },\n    [dataInfo, props]\n  );\n\n  const selectionName = generateSelectionName(selection);\n\n  return (\n    <svg\n      id={p.id}\n      className={clsx(`root-${styleId}`, p.className)}\n      style={p.style}\n      width={p.width}\n      height={p.height}\n      ref={ref}\n      viewBox={`0 0 ${p.width} ${p.height}`}\n      data-theme={p.theme ?? 'light'}\n      data-selection={selectionName ? selectionName : undefined}\n    >\n      {p.styleFactory(rules)}\n      <defs>\n        <clipPath id={`clip-${sizeInfo.id}`}>\n          <rect x={sizeInfo.sets.w} y={0} width={sizeInfo.labels.w} height={sizeInfo.sets.h} />\n        </clipPath>\n      </defs>\n      {p.queryLegend && <QueryLegend queries={queries} x={sizeInfo.legend.x} style={styleInfo} data={dataInfo} />}\n      <ExportButtons\n        transform={`translate(${sizeInfo.w - 2},${sizeInfo.h - 3})`}\n        styleId={styleId}\n        exportButtons={p.exportButtons}\n        exportChart={exportChart}\n      />\n      <g transform={`translate(${p.padding},${p.padding})`} data-upset=\"base\">\n        {p.onClick && (\n          <rect\n            width={sizeInfo.cs.x}\n            height={sizeInfo.sets.y}\n            onClick={h.reset}\n            className={`fillTransparent-${styleId}`}\n          />\n        )}\n        <UpSetAxis size={sizeInfo} style={styleInfo} data={dataInfo} />\n        <UpSetChart<T>\n          size={sizeInfo}\n          style={styleInfo}\n          data={dataInfo}\n          h={h}\n          setChildrenFactory={p.setChildrenFactory}\n          combinationChildrenFactory={p.combinationChildrenFactory}\n        />\n        <UpSetSelection size={sizeInfo} style={styleInfo} data={dataInfo} hasHover={h.hasHover} selection={selection} />\n        <UpSetQueries\n          size={sizeInfo}\n          style={styleInfo}\n          data={dataInfo}\n          hasHover={h.hasHover}\n          queries={queries}\n          secondary={p.onHover != null || selection != null}\n        />\n      </g>\n      {props.children}\n    </svg>\n  );\n});\n\n/**\n * UpSetJS main pure functional stateless React component, the generic argument T refers to the type of the elements\n *\n * with React.forwardRef support to specify a reference to the SVG element\n */\nexport default UpSetJS as <T>(p: UpSetProps<T> & React.RefAttributes<SVGSVGElement>) => React.ReactElement;\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\nimport type { ISetCombinations } from '@upsetjs/model';\nimport React, { Ref } from 'react';\nimport ExportButtons from '../../components/ExportButtons';\nimport QueryLegend from '../../components/QueryLegend';\nimport type { Handlers } from '../../hooks/useHandler';\nimport type {\n  UpSetBaseElementProps,\n  UpSetBaseLayoutProps,\n  UpSetBaseMultiStyle,\n  UpSetBaseStyleProps,\n  UpSetBaseThemeProps,\n  UpSetSelectionProps,\n} from '../../interfaces';\nimport { clsx } from '../../utils';\n\nexport interface SVGWrapperStyle {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  styles: UpSetBaseMultiStyle<React.CSSProperties>;\n  classNames: UpSetBaseMultiStyle<string>;\n}\n\nexport interface SVGWrapperData {\n  id: string;\n  cs: { v: ISetCombinations<any> };\n  sets: { format(v: number): string };\n}\n\nexport default function SVGWrapper<T>({\n  rules,\n  style,\n  size,\n  p,\n  data,\n  tRef,\n  children,\n  exportChart,\n  selectionName,\n  h,\n}: React.PropsWithChildren<{\n  rules: string;\n  style: SVGWrapperStyle;\n  selectionName?: string;\n  size: { w: number; h: number; legend: { x: number }; area: { w: number } };\n  p: UpSetBaseElementProps<React.CSSProperties, React.ReactNode> &\n    UpSetBaseLayoutProps &\n    UpSetBaseThemeProps &\n    UpSetBaseStyleProps<React.ReactNode> &\n    UpSetSelectionProps<T> &\n    UpSetBaseLayoutProps & {\n      children?: React.ReactNode;\n    };\n  data: SVGWrapperData;\n  tRef: Ref<SVGSVGElement>;\n  h: Handlers;\n  exportChart: (evt: React.MouseEvent<SVGElement>) => void;\n}>) {\n  return (\n    <svg\n      id={p.id}\n      className={clsx(`root-${style.id}`, p.className)}\n      style={p.style}\n      width={p.width}\n      height={p.height}\n      ref={tRef}\n      viewBox={`0 0 ${p.width} ${p.height}`}\n      data-theme={p.theme ?? 'light'}\n      data-selection={selectionName ? selectionName : undefined}\n    >\n      {p.styleFactory!(rules)}\n      {p.onClick && <rect width={size.w} height={size.h} onClick={h.reset} className={`fillTransparent-${style.id}`} />}\n      {p.queryLegend && <QueryLegend queries={p.queries ?? []} x={size.legend.x} style={style} data={data} />}\n      <ExportButtons\n        transform={`translate(${size.w - 2},${size.h - 3})`}\n        styleId={style.id}\n        exportButtons={p.exportButtons}\n        exportChart={exportChart}\n      />\n      <g transform={`translate(${p.padding},${p.padding})`} data-upset=\"base\">\n        {children}\n      </g>\n      {p.children}\n    </svg>\n  );\n}\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport { IArcSlice, IEllipse, ICircle, isEllipse, IUniverseSet } from './interfaces';\n\nexport function generateUniverseSetPath(l: IUniverseSet, refs: readonly (ICircle | IEllipse)[]) {\n  const { width: w, height: h, x1, y1 } = l;\n  const arcs = l.arcs\n    .map((arc) => {\n      const ref = refs[arc.ref];\n      const rx = isEllipse(ref) ? ref.rx : ref.r;\n      const ry = isEllipse(ref) ? ref.ry : ref.r;\n      const rot = isEllipse(ref) ? ref.rotation : 0;\n      return `A ${rx} ${ry} ${rot} ${arc.large ? 1 : 0} ${arc.sweep ? 1 : 0} ${arc.x2} ${arc.y2}`;\n    })\n    .join(' ');\n  return y1 < h / 2\n    ? `M 0 0 L ${x1} 0 L ${x1} ${y1} ${arcs} L ${x1} 0 L ${w} 0 L ${w} ${h} L 0 ${h} Z`\n    : `M ${w} ${h} L ${x1} ${h} L ${x1} ${y1} ${arcs} L ${x1} ${h} L 0 ${h} L 0 0 L ${w} 0 Z`;\n}\n\nexport function generateArcSlicePath(s: IArcSlice, refs: readonly { l: ICircle | IEllipse }[], p = 0) {\n  if (s.path) {\n    return s.path;\n  }\n  return `M ${s.x1 - p},${s.y1 - p} ${s.arcs\n    .map((arc) => {\n      const ref = refs[arc.ref].l;\n      const rx = isEllipse(ref) ? ref.rx : ref.r;\n      const ry = isEllipse(ref) ? ref.ry : ref.r;\n      const rot = isEllipse(ref) ? ref.rotation : 0;\n      return `A ${rx - p} ${ry - p} ${rot} ${arc.large ? 1 : 0} ${arc.sweep ? 1 : 0} ${arc.x2 - p} ${arc.y2 - p}`;\n    })\n    .join(' ')}`;\n}\n", "import React from 'react';\n\nexport default function SelectionPattern(p: {\n  id: string;\n  suffix: string;\n  v: number;\n  rotate?: number;\n  bgFill?: string;\n  bgFilled?: boolean;\n  fill?: string;\n  styleId: string;\n}) {\n  if (p.v >= 1 || p.v <= 0) {\n    return null;\n  }\n  const ratio = Math.round(p.v * 10.0) / 100;\n  return (\n    <defs>\n      <pattern\n        id={p.id}\n        width=\"1\"\n        height=\"0.1\"\n        patternContentUnits=\"objectBoundingBox\"\n        patternTransform={`rotate(${p.rotate ?? 0})`}\n      >\n        {p.bgFilled && (\n          <rect x=\"0\" y=\"0\" width=\"1\" height=\"0.1\" style={{ fill: p.bgFill }} className={`fillPrimary-${p.styleId}`} />\n        )}\n        <rect\n          x=\"0\"\n          y=\"0\"\n          width=\"1\"\n          height={ratio}\n          className={`fill${p.suffix}`}\n          style={p.fill ? { fill: p.fill } : undefined}\n        />\n      </pattern>\n    </defs>\n  );\n}\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { ISetLike, UpSetQueries } from '@upsetjs/model';\nimport React, { PropsWithChildren } from 'react';\nimport { clsx } from '../../utils';\nimport type { VennDiagramStyleInfo } from '../derive/deriveVennStyleDependent';\nimport type { ITextArcSlice } from '../layout/interfaces';\nimport type { UpSetSelection } from '../../components/interfaces';\nimport type { VennDiagramDataInfo } from '../derive/deriveVennDataDependent';\nimport { generateArcSlicePath } from '../layout/generate';\nimport type { VennDiagramSizeInfo } from '../derive/deriveVennSizeDependent';\nimport { mergeColor } from '../../components/utils';\nimport SelectionPattern from './SelectionPattern';\n\nfunction sliceRotate(slice: ITextArcSlice, center: { cx: number; cy: number }) {\n  if (slice.text.x === center.cx) {\n    return 0;\n  }\n  if (slice.text.x > center.cx) {\n    return slice.text.y <= center.cy ? 60 : -60;\n  }\n  return slice.text.y <= center.cy ? -60 : 60;\n}\n\nfunction generateTitle(\n  d: ISetLike<any>,\n  s: number,\n  sName: string | undefined,\n  secondary: boolean,\n  qs: number[],\n  queries: UpSetQueries<any>,\n  data: VennDiagramDataInfo<any>,\n  cx: number\n) {\n  const dc = data.format(d.cardinality);\n  const baseName = !sName ? d.name : `${d.name} ∩ ${sName}`;\n  const baseCardinality = !sName ? dc : `${data.format(s)}/${dc}`;\n  if (qs.length === 0) {\n    return {\n      tooltip: `${baseName}: ${baseCardinality}`,\n      title:\n        d.type === 'set' ? (\n          <>\n            <tspan dy=\"-0.6em\">{d.name}</tspan>\n            <tspan x={cx} dy=\"1.2em\">\n              {baseCardinality}\n            </tspan>\n          </>\n        ) : (\n          baseCardinality\n        ),\n    };\n  }\n\n  if (qs.length === 1 && !secondary && !sName) {\n    return {\n      tooltip: `${d.name} ∩ ${queries[0].name}: ${data.format(qs[0])}/${dc}`,\n      title:\n        d.type === 'set' ? (\n          <>\n            <tspan dy=\"-0.6em\">{d.name}</tspan>\n            <tspan x={cx} dy=\"1.2em\">\n              {`${data.format(qs[0])}/${dc}`}\n            </tspan>\n          </>\n        ) : (\n          `${data.format(qs[0])}/${dc}`\n        ),\n    };\n  }\n\n  const queryLine = (\n    <tspan x={cx} dy=\"1.2em\">\n      {queries.map((q, i) => (\n        <React.Fragment key={q.name}>\n          <tspan className={`fillQ${i}-${data.id}`}>{'⬤'}</tspan>\n          <tspan>{` ${data.format(qs[i])}/${dc}${i < queries.length - 1 ? ' ' : ''}`}</tspan>\n        </React.Fragment>\n      ))}\n    </tspan>\n  );\n\n  return {\n    tooltip: `${baseName}: ${baseCardinality}\\n${queries\n      .map((q, i) => `${d.name} ∩ ${q.name}: ${data.format(qs[i])}/${dc}`)\n      .join('\\n')}`,\n    title:\n      d.type === 'set' ? (\n        <>\n          <tspan dy=\"-1.2em\">{d.name}</tspan>\n          <tspan x={cx} dy=\"1.2em\">\n            {baseCardinality}\n          </tspan>\n          {queryLine}\n        </>\n      ) : (\n        <>\n          <tspan dy=\"-0.6em\">{baseCardinality}</tspan>\n          {queryLine}\n        </>\n      ),\n  };\n}\n\nexport default function VennArcSliceSelection<T>({\n  slice,\n  d,\n  i,\n  data,\n  style,\n  elemOverlap,\n  selected,\n  selectionName,\n  h,\n  queries,\n  size,\n  fill,\n  qs,\n}: PropsWithChildren<{\n  slice: ITextArcSlice;\n  i: number;\n  d: ISetLike<T>;\n  selected: boolean;\n  elemOverlap: null | ((s: ISetLike<T>) => number);\n  selectionName?: string;\n  style: VennDiagramStyleInfo;\n  data: VennDiagramDataInfo<T>;\n  size: VennDiagramSizeInfo;\n  fill: boolean;\n  queries: UpSetQueries<T>;\n  qs: readonly ((s: ISetLike<T>) => number)[];\n  h: UpSetSelection;\n}>) {\n  const p = generateArcSlicePath(slice, data.sets.d);\n  const rotate = sliceRotate(slice, size.area);\n\n  const o = elemOverlap ? elemOverlap(d) : 0;\n  const fillFullSelection = (o === d.cardinality && d.cardinality > 0) || selected;\n  const className = clsx(\n    `arc-${style.id}`,\n    o === 0 && !selected && `${fill ? 'fillPrimary' : 'arcP'}-${style.id}`,\n    fillFullSelection && `fillSelection-${style.id}`,\n    style.classNames.set\n  );\n  const id = `upset-${style.id}-${i}`;\n  const secondary = elemOverlap != null || h.onMouseLeave != null;\n  const qsOverlaps = qs.map((q) => q(d));\n\n  const { title, tooltip } = generateTitle(d, o, selectionName, secondary, qsOverlaps, queries, data, slice.text.x);\n\n  return (\n    <g>\n      <SelectionPattern\n        id={id}\n        v={o === 0 ? 0 : o / d.cardinality}\n        suffix={`Selection-${style.id}`}\n        rotate={rotate}\n        bgFill={d.color}\n        bgFilled={d.color != null || fill}\n        fill={!style.selectionColor ? d.color : undefined}\n        styleId={style.id}\n      />\n      <path\n        onMouseEnter={h.onMouseEnter(d, [])}\n        onMouseLeave={h.onMouseLeave}\n        onClick={h.onClick(d, [])}\n        onContextMenu={h.onContextMenu(d, [])}\n        onMouseMove={h.onMouseMove(d, [])}\n        d={p}\n        className={className}\n        style={mergeColor(\n          style.styles.set,\n          o > 0 && o < d.cardinality ? `url(#${id})` : !fillFullSelection || !style.selectionColor ? d.color : undefined\n        )}\n      >\n        {style.tooltips && <title>{tooltip}</title>}\n      </path>\n      <text\n        x={slice.text.x}\n        y={slice.text.y}\n        className={clsx(\n          `${d.type === 'set' ? 'set' : 'value'}TextStyle-${style.id}`,\n          `pnone-${style.id}`,\n          d.type === 'set' ? style.classNames.setLabel : style.classNames.valueLabel\n          // circle.align === 'left' && `startText-${style.id}`,\n          // circle.align === 'right' && `endText-${style.id}`\n        )}\n      >\n        {title}\n      </text>\n    </g>\n  );\n}\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport {\n  generateCombinations,\n  ISetCombinations,\n  ISetLike,\n  ISets,\n  ISet,\n  ISetCombination,\n  GenerateSetCombinationsOptions,\n  ISetOverlapFunction,\n  generateDistinctOverlapFunction,\n} from '@upsetjs/model';\nimport { generateId, noGuessPossible } from '../../utils';\nimport type { ITextCircle, ITextArcSlice, IVennDiagramLayoutGenerator, ITextEllipse } from '../layout/interfaces';\nimport type { VennDiagramSizeInfo } from './deriveVennSizeDependent';\nimport { areCombinations } from '../../derive/deriveDataDependent';\n\nexport interface VennDiagramDataInfo<T> {\n  id: string;\n  format(v: number): string;\n  sets: {\n    d: readonly { v: ISet<T>; l: ITextCircle | ITextEllipse; key: string; offset: { x: number; y: number } }[];\n    v: ISets<T>;\n    format(v: number): string;\n  };\n  cs: {\n    d: readonly { v: ISetCombination<T>; l: ITextArcSlice; key: string }[];\n    v: ISetCombinations<T>;\n    has(v: ISetCombination<T>, s: ISet<T>): boolean;\n  };\n  toKey(s: ISetLike<T>): string;\n  toElemKey?(e: T): string;\n  overlapGuesser: ISetOverlapFunction<T>;\n}\n\nexport default function deriveVennDataDependent<T>(\n  sets: ISets<T>,\n  combinations: ISetCombinations<T> | GenerateSetCombinationsOptions,\n  size: VennDiagramSizeInfo,\n  layout: IVennDiagramLayoutGenerator,\n  format: (v: number) => string,\n  toKey: (s: ISetLike<T>) => string,\n  toElemKey?: (e: T) => string,\n  id?: string,\n  setLabelOffsets?: readonly { x: number; y: number }[]\n): VennDiagramDataInfo<T> {\n  const ss = sets.length > layout.maxSets ? sets.slice(0, layout.maxSets) : sets;\n  const { cs, setKeys, csKeys } = calculateCombinations<T>(ss, toKey, combinations);\n\n  const l = layout.compute(ss, cs, size.area.w, size.area.h);\n\n  return {\n    id: id ? id : generateId(),\n    sets: {\n      d: l.sets.map((l, i) => ({\n        v: ss[i],\n        l,\n        key: setKeys[i],\n        offset: setLabelOffsets != null && i < setLabelOffsets.length ? setLabelOffsets[i] : { x: 0, y: 0 },\n      })),\n      v: ss,\n      format,\n    },\n    format,\n    cs: {\n      d: l.intersections.map((l, i) => ({ v: cs[i], l, key: csKeys[i] })),\n      v: cs,\n      has: (v, s) => {\n        const sk = toKey(s);\n        return Array.from(v.sets).some((ss) => toKey(ss) === sk);\n      },\n    },\n    toKey,\n    toElemKey,\n    overlapGuesser: generateDistinctOverlapFunction(cs, noGuessPossible, toKey),\n  };\n}\n\nexport function calculateCombinations<T>(\n  ss: ISets<T>,\n  toKey: (s: ISetLike<T>) => string,\n  combinations: GenerateSetCombinationsOptions<any> | ISetCombinations<T>,\n  options: GenerateSetCombinationsOptions<any> = { min: 1 }\n) {\n  const setKeys = ss.map(toKey);\n\n  let cs: ISetCombinations<T> = [];\n  if (areCombinations(combinations)) {\n    const given = new Map(combinations.map((c) => [Array.from(c.sets).map(toKey).sort().join('#'), c]));\n    const helperSets = ss.map((s) => ({\n      type: 'set' as const,\n      cardinality: 0,\n      elems: [],\n      name: s.name,\n      s,\n    }));\n    // generate dummy ones and map to given data\n    cs = generateCombinations(\n      helperSets,\n      Object.assign(\n        {\n          type: 'distinctIntersection',\n          empty: true,\n          order: ['degree:asc', 'group:asc'],\n        },\n        options\n      )\n    ).map((c) => {\n      const key = Array.from(c.sets)\n        .map((s) => toKey((s as unknown as { s: ISet<T> }).s))\n        .sort()\n        .join('#');\n      if (given.has(key)) {\n        return given.get(key)!;\n      }\n      // generate a dummy one\n      return {\n        name: c.name,\n        cardinality: 0,\n        degree: c.degree,\n        elems: [],\n        sets: new Set(Array.from(c.sets).map((s) => (s as unknown as { s: ISet<T> }).s)),\n        type: 'distinctIntersection',\n      } as ISetCombination<T>;\n    });\n  } else {\n    cs = generateCombinations(\n      ss,\n      Object.assign(\n        {\n          type: 'distinctIntersection',\n          empty: true,\n          order: ['degree:asc', 'group:asc'],\n        },\n        options,\n        combinations ?? {}\n      )\n    );\n  }\n\n  const csKeys = cs.map(toKey);\n  return { cs, setKeys, csKeys };\n}\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport { generateId } from '../../utils';\n\nexport default function deriveVennSizeDependent(width: number, height: number, margin: number, id: string) {\n  const h = height - 2 * margin;\n  const w = width - 2 * margin;\n  const r = Math.min(w, h) / 2;\n  return {\n    id: id ? id : generateId(),\n    legend: {\n      x: width / 2,\n    },\n    area: {\n      w,\n      h,\n      cx: w / 2,\n      cy: h / 2,\n      r,\n    },\n    margin: margin,\n    w: width,\n    h: height,\n  };\n}\n\nexport declare type VennDiagramSizeInfo = ReturnType<typeof deriveVennSizeDependent>;\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { CSSProperties, ReactNode } from 'react';\nimport type { VennDiagramMultiStyle, UpSetThemes } from '../../interfaces';\n\nexport default function deriveVennStyleDependent(\n  theme: UpSetThemes,\n  styles: VennDiagramMultiStyle<CSSProperties>,\n  classNames: VennDiagramMultiStyle<string>,\n  styleId: string,\n  selectionColor: string,\n  title: string | ReactNode,\n  description: string | ReactNode,\n  tooltips: boolean\n) {\n  return {\n    theme,\n    styles,\n    classNames: classNames,\n    id: styleId,\n    selectionColor,\n    title,\n    description,\n    tooltips,\n  };\n}\n\nexport declare type VennDiagramStyleInfo = ReturnType<typeof deriveVennStyleDependent>;\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\nimport { ISetCombinations, ISetLike, queryOverlap } from '@upsetjs/model';\nimport React, { useCallback, useMemo } from 'react';\nimport { exportSVG } from '../../exporter';\nimport { exportDump, exportSharedLink } from '../../exporter/exportDump';\nimport useHandler, { Handlers } from '../../hooks/useHandler';\nimport type {\n  UpSetBaseDataProps,\n  UpSetExportOptions,\n  UpSetProps,\n  VennDiagramDataProps,\n  VennDiagramFullProps,\n} from '../../interfaces';\nimport { baseRules } from '../../rules';\nimport { generateId } from '../../utils';\nimport deriveVennSizeDependent, { VennDiagramSizeInfo } from '../derive/deriveVennSizeDependent';\nimport deriveVennStyleDependent, { VennDiagramStyleInfo } from '../derive/deriveVennStyleDependent';\n\nexport function useCreateCommon<T>(\n  p: Omit<VennDiagramFullProps, keyof VennDiagramDataProps<T>> &\n    UpSetBaseDataProps<T> & { toKey: (set: ISetLike<T>) => string }\n) {\n  const { queries = [], fontSizes } = p;\n  // generate a \"random\" but attribute stable id to avoid styling conflicts\n  const styleId = useMemo(\n    () =>\n      p.id\n        ? p.id\n        : generateId([\n            p.fontFamily,\n            fontSizes.valueLabel,\n            fontSizes.legend,\n            fontSizes.setLabel,\n            fontSizes.title,\n            fontSizes.exportLabel,\n            fontSizes.description,\n            p.textColor,\n            p.color,\n            p.hasSelectionColor,\n            p.strokeColor,\n            p.valueTextColor,\n            p.selectionColor,\n            p.opacity,\n            p.hasSelectionOpacity,\n          ]),\n    [\n      p.id,\n      p.fontFamily,\n      fontSizes.valueLabel,\n      fontSizes.legend,\n      fontSizes.setLabel,\n      fontSizes.title,\n      fontSizes.exportLabel,\n      fontSizes.description,\n      p.textColor,\n      p.color,\n      p.hasSelectionColor,\n      p.strokeColor,\n      p.valueTextColor,\n      p.selectionColor,\n      p.opacity,\n      p.hasSelectionOpacity,\n    ]\n  );\n\n  const styleInfo = useMemo(\n    () =>\n      deriveVennStyleDependent(\n        p.theme,\n        p.styles,\n        p.classNames,\n        styleId,\n        p.selectionColor,\n        p.title,\n        p.description,\n        p.tooltips\n      ),\n    [p.theme, p.styles, p.classNames, styleId, p.selectionColor, p.title, p.description, p.tooltips]\n  );\n\n  const sizeInfo = useMemo(\n    () => deriveVennSizeDependent(p.width, p.height, p.padding, p.id),\n    [p.width, p.height, p.padding, p.id]\n  );\n\n  const h = useHandler(p);\n  const qs = React.useMemo(\n    () => queries.map((q) => queryOverlap(q, 'intersection', p.toElemKey)),\n    [queries, p.toElemKey]\n  );\n\n  const rulesHelper = baseRules(styleId, p, p.fontFamily, fontSizes);\n\n  return {\n    styleId,\n    size: sizeInfo,\n    style: styleInfo,\n    h,\n    qs,\n    rulesHelper,\n  };\n}\n\nexport declare type CreateCommon = {\n  selectionName?: string;\n  styleId: string;\n  size: VennDiagramSizeInfo;\n  style: VennDiagramStyleInfo;\n  h: Handlers;\n  exportButtons: UpSetExportOptions | boolean;\n};\n\nexport function useExportChart(\n  dataInfo: { cs: { v: ISetCombinations<any> } },\n  props: UpSetProps<any>,\n  mode: 'kmap' | 'venn'\n) {\n  return useCallback(\n    (evt: React.MouseEvent<SVGElement>) => {\n      const svg = evt.currentTarget.closest('svg') as SVGSVGElement;\n      const type = (evt.currentTarget.dataset.type || 'png') as 'svg' | 'png' | 'dump' | 'share';\n      switch (type) {\n        case 'dump':\n          exportDump(svg, props, dataInfo, mode);\n          break;\n        case 'share':\n          exportSharedLink(props, dataInfo, mode);\n          break;\n        case 'svg':\n        case 'png':\n          exportSVG(svg, {\n            type,\n            toRemove: `.${evt.currentTarget.getAttribute('class')}`,\n          });\n      }\n    },\n    [dataInfo, props, mode]\n  );\n}\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\nimport { isSet, isSetLike } from '@upsetjs/model';\nimport React, { Ref, useMemo } from 'react';\nimport { fillVennDiagramDefaults } from '../fillDefaults';\nimport type { VennDiagramProps } from '../interfaces';\nimport { clsx, generateSelectionName, generateSelectionOverlap } from '../utils';\nimport SVGWrapper from './components/SVGWrapper';\nimport VennArcSliceSelection from './components/VennArcSliceSelection';\nimport deriveVennDataDependent from './derive/deriveVennDataDependent';\nimport { useCreateCommon, useExportChart } from './hooks';\nimport UpSetTitle from '../components/UpSetTitle';\nimport { isEllipse } from './layout/interfaces';\n\nexport const VennDiagram = /*!#__PURE__*/ React.forwardRef(function VennDiagram<T = any>(\n  props: VennDiagramProps<T>,\n  ref: Ref<SVGSVGElement>\n) {\n  const p = fillVennDiagramDefaults<T>(props);\n  const { selection = null, queries = [], fontSizes } = p;\n  const v = useCreateCommon(p);\n  const { size, style, rulesHelper } = v;\n\n  const dataInfo = useMemo(\n    () =>\n      deriveVennDataDependent(\n        p.sets,\n        p.combinations,\n        size,\n        p.layout,\n        p.valueFormat,\n        p.toKey,\n        p.toElemKey,\n        p.id,\n        p.setLabelOffsets\n      ),\n    [p.sets, p.combinations, size, p.valueFormat, p.toKey, p.toElemKey, p.id, p.layout, p.setLabelOffsets]\n  );\n\n  const selectionKey = selection != null && isSetLike(selection) ? p.toKey(selection) : null;\n  const selectionOverlap =\n    selection == null ? null : generateSelectionOverlap(selection, dataInfo.overlapGuesser, dataInfo.toElemKey);\n  const selectionName = generateSelectionName(selection);\n\n  const rules = `\n  ${rulesHelper.root}\n  ${rulesHelper.text}\n\n  .valueTextStyle-${style.id} {\n    fill: ${p.valueTextColor};\n    ${rulesHelper.p(fontSizes.valueLabel)}\n    text-anchor: middle;\n    dominant-baseline: central;\n  }\n  .setTextStyle-${style.id} {\n    fill: ${p.textColor};\n    ${rulesHelper.p(fontSizes.setLabel)}\n    text-anchor: middle;\n  }\n\n  .topText-${style.id} {\n    dominant-baseline: hanging;\n  }\n\n  .stroke-circle-${style.id} {\n    fill: none;\n    stroke: ${p.strokeColor};\n  }\n\n  .arc-${style.id} {\n    fill-rule: evenodd;\n  }\n  .arcP-${style.id} {\n    fill: transparent;\n    fill-opacity: ${p.opacity};\n  }\n  ${rulesHelper.fill}\n  ${rulesHelper.export}\n\n  ${rulesHelper.hasSFill ? `.root-${style.id}[data-selection] .arcP-${style.id} { ${rulesHelper.hasSFill} }` : ''}\n\n  ${queries\n    .map(\n      (q, i) => `.fillQ${i}-${dataInfo.id} {\n    fill: ${q.color};\n  }`\n    )\n    .join('\\n')}\n  `;\n\n  const exportChart = useExportChart(dataInfo, p, 'venn');\n\n  const maxWidth = dataInfo.sets.d.reduce(\n    (acc, d) => Math.min(acc, d.l.cx - (isEllipse(d.l) ? d.l.rx : d.l.r)),\n    size.area.w\n  );\n\n  return (\n    <SVGWrapper\n      rules={rules}\n      style={style}\n      selectionName={selectionName}\n      size={size}\n      p={p}\n      data={dataInfo}\n      tRef={ref}\n      h={v.h}\n      exportChart={exportChart}\n    >\n      <UpSetTitle style={style} width={maxWidth} />\n      <g className={clsx(p.onClick && `clickAble-${style.id}`)}>\n        {dataInfo.sets.d.map((d, i) => (\n          <text\n            key={d.key}\n            x={d.l.text.x + d.offset.x}\n            y={d.l.text.y + d.offset.y}\n            onClick={v.h.onClick(dataInfo.sets.v[i], [])}\n            onMouseEnter={v.h.onMouseEnter(dataInfo.sets.v[i], [])}\n            onMouseLeave={v.h.onMouseLeave}\n            onContextMenu={v.h.onContextMenu(dataInfo.sets.v[i], [])}\n            onMouseMove={v.h.onMouseMove(dataInfo.sets.v[i], [])}\n            className={clsx(\n              `setTextStyle-${style.id}`,\n              `${d.l.align}Text-${style.id}`,\n              `${d.l.verticalAlign}Text-${style.id}`,\n              style.classNames.setLabel\n            )}\n          >\n            {style.tooltips && (\n              <title>\n                {dataInfo.sets.v[i].name}: {dataInfo.format(dataInfo.sets.v[i].cardinality)}\n              </title>\n            )}\n            {dataInfo.sets.v[i].name}\n          </text>\n        ))}\n      </g>\n      <g className={clsx(p.onClick && `clickAble-${style.id}`)}>\n        {dataInfo.cs.d.map((l, i) => (\n          <VennArcSliceSelection\n            key={l.key}\n            d={l.v}\n            i={i}\n            slice={l.l}\n            size={size}\n            style={style}\n            data={dataInfo}\n            fill={p.filled}\n            h={v.h}\n            selectionName={selectionName}\n            selected={selectionKey === l.key || (isSet(selection) && dataInfo.cs.has(l.v, selection))}\n            elemOverlap={selectionOverlap}\n            queries={queries}\n            qs={v.qs}\n          />\n        ))}\n      </g>\n      <g>\n        {dataInfo.sets.d.map((l) =>\n          isEllipse(l.l) ? (\n            <ellipse\n              key={l.key}\n              rx={l.l.rx}\n              ry={l.l.ry}\n              transform={`translate(${l.l.cx},${l.l.cy})rotate(${l.l.rotation})`}\n              className={clsx(`stroke-circle-${style.id}`, style.classNames.set)}\n              style={style.styles.set}\n            />\n          ) : (\n            <circle\n              key={l.key}\n              cx={l.l.cx}\n              cy={l.l.cy}\n              r={l.l.r}\n              className={clsx(`stroke-circle-${style.id}`, style.classNames.set)}\n              style={style.styles.set}\n            />\n          )\n        )}\n      </g>\n    </SVGWrapper>\n  );\n});\n\n/**\n * VennDiagram main pure functional stateless React component, the generic argument T refers to the type of the elements\n *\n * with React.forwardRef support to specify a reference to the SVG element\n */\nexport default VennDiagram as <T>(p: VennDiagramProps<T> & React.RefAttributes<SVGSVGElement>) => React.ReactElement;\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { ISetCombination } from '@upsetjs/model';\nimport React, { PropsWithChildren, ReactElement } from 'react';\nimport { mergeColor } from '../../components/utils';\nimport { clsx } from '../../utils';\nimport type { KMapDataInfo } from '../derive/deriveDataDependent';\nimport type { KMapStyleInfo } from '../derive/deriveStyleDependent';\nimport type { UpSetSelection } from '../../components/interfaces';\n\nexport type KMapCellProps<T> = PropsWithChildren<{\n  d: ISetCombination<T>;\n  i: number;\n  style: KMapStyleInfo;\n  data: KMapDataInfo<T>;\n  className?: string;\n  h: UpSetSelection;\n}>;\n\nconst KMapCell = /*!#__PURE__*/ React.memo(function KMapCell<T>({ d, i, h, className, data, style }: KMapCellProps<T>) {\n  const l = data.cs.l[i];\n  const y = data.cs.scale(d.cardinality);\n  const x = (data.cell - data.cs.bandWidth) / 2;\n  return (\n    <g\n      transform={`translate(${l.x}, ${l.y})`}\n      onMouseEnter={h.onMouseEnter(d, [])}\n      onMouseLeave={h.onMouseLeave}\n      onClick={h.onClick(d, [])}\n      onContextMenu={h.onContextMenu(d, [])}\n      onMouseMove={h.onMouseMove(d, [])}\n      className={className}\n      data-cardinality={d.cardinality}\n    >\n      {style.tooltips && (\n        <title>\n          {d.name}: {data.sets.format(d.cardinality)}\n        </title>\n      )}\n      <rect width={data.cell} height={data.cell} className={`fillTransparent-${style.id}`} />\n      <rect\n        x={x}\n        y={y}\n        height={data.cell - y}\n        width={data.cs.bandWidth}\n        className={clsx(`fillPrimary-${style.id}`, style.classNames.bar)}\n        style={mergeColor(style.styles.bar, d.color)}\n      />\n      <text\n        y={y - style.barLabelOffset}\n        x={data.cell / 2}\n        style={style.styles.barLabel}\n        className={clsx(`barTextStyle-${style.id}`, style.classNames.barLabel)}\n      >\n        {data.sets.format(d.cardinality)}\n      </text>\n    </g>\n  );\n});\n\nexport default KMapCell as <T>(props: KMapCellProps<T>) => ReactElement;\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport React, { ReactElement } from 'react';\nimport Axis from '../../components/Axis';\nimport type { Handlers } from '../../hooks/useHandler';\nimport { clsx } from '../../utils';\nimport type { KMapDataInfo } from '../derive/deriveDataDependent';\nimport type { KMapStyleInfo } from '../derive/deriveStyleDependent';\nimport KMapCell from './KMapCell';\nimport type { VennDiagramSizeInfo } from '../../venn/derive/deriveVennSizeDependent';\n\nexport function generateGridPath(cell: number, vCells: number, hCells: number, level: { x: number[]; y: number[] }) {\n  const h = cell * vCells;\n  const w = cell * hCells;\n  return [level.x.map((x) => `M ${x * cell},0 l0,${h}`), level.y.map((y) => `M 0,${y * cell} l${w},0`)]\n    .flat()\n    .join(' ');\n}\n\nexport type KMapChartProps<T> = {\n  style: KMapStyleInfo;\n  data: KMapDataInfo<T>;\n  size: VennDiagramSizeInfo;\n  h: Handlers;\n};\n\nconst KMapChart = /*!#__PURE__*/ React.memo(function KMapChart<T>({ data, style, size, h }: KMapChartProps<T>) {\n  const csNameOffset = style.cs.offset === 'auto' ? data.cs.labelOffset : style.cs.offset;\n  return (\n    <g>\n      <g transform={`translate(${size.w - csNameOffset - 2}, ${size.h - data.cell - 50})`}>\n        <Axis scale={data.cs.scale} orient=\"left\" size={data.cell} start={data.cs.barLabelFontSize} style={style} />\n        <text\n          className={clsx(`cChartTextStyle-${style.id}`, style.classNames.chartLabel)}\n          style={style.styles.chartLabel}\n          transform={`translate(${-csNameOffset}, ${data.cell})rotate(-90)`}\n        >\n          {style.cs.name}\n        </text>\n      </g>\n      <g>\n        {data.sets.l.map((l, i) => {\n          const s = data.sets.v[i];\n          const name = s.name;\n          return (\n            <g\n              key={name}\n              onClick={h.onClick(s, [])}\n              onMouseEnter={h.onMouseEnter(s, [])}\n              onMouseLeave={h.onMouseLeave}\n              onContextMenu={h.onContextMenu(s, [])}\n              onMouseMove={h.onMouseMove(s, [])}\n              className={clsx(h.hasClick && `clickAble-${style.id}`)}\n            >\n              {l.text.map((p, i) => (\n                <text\n                  key={i}\n                  transform={`translate(${p.x},${p.y})${!l.hor ? 'rotate(-90)' : ''}`}\n                  className={clsx(`setTextStyle-${style.id}`)}\n                >\n                  {name}\n                </text>\n              ))}\n            </g>\n          );\n        })}\n        {data.sets.l.map((l, i) => {\n          const name = data.sets.v[i].name;\n          return (\n            <React.Fragment key={name}>\n              {l.notText.map((p, i) => (\n                <text\n                  key={i}\n                  transform={`translate(${p.x},${p.y})${!l.hor ? 'rotate(-90)' : ''}`}\n                  className={clsx(`setTextStyle-${style.id}`, `not-${style.id}`)}\n                >\n                  {name}\n                </text>\n              ))}\n            </React.Fragment>\n          );\n        })}\n      </g>\n      <g className={clsx(h.hasClick && `clickAble-${style.id}`)}>\n        {data.cs.v.map((c, i) => {\n          return <KMapCell key={data.cs.keys[i]} d={c} i={i} h={h} style={style} data={data} />;\n        })}\n      </g>\n      <g transform={`translate(${data.grid.x}, ${data.grid.y})`}>\n        {data.grid.levels.map((l, i) => (\n          <path\n            key={i}\n            d={generateGridPath(data.cell, data.grid.vCells, data.grid.hCells, l)}\n            className={`gridStyle-${style.id} gridStyle-${style.id}-${i}`}\n          />\n        ))}\n      </g>\n    </g>\n  );\n});\n\nexport default KMapChart as <T>(props: KMapChartProps<T>) => ReactElement;\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { ISetLike } from '@upsetjs/model';\nimport React, { PropsWithChildren } from 'react';\nimport { mergeColor } from '../../components/utils';\nimport { clsx } from '../../utils';\nimport type { KMapDataInfo } from '../derive/deriveDataDependent';\nimport type { KMapStyleInfo } from '../derive/deriveStyleDependent';\n\nfunction KMapQueries<T>({\n  data,\n  style,\n  elemOverlap,\n  secondary,\n  tooltip,\n  suffix,\n  empty,\n}: PropsWithChildren<{\n  data: KMapDataInfo<T>;\n  style: KMapStyleInfo;\n  suffix: string;\n  empty?: boolean;\n  elemOverlap: (s: ISetLike<T>) => number;\n  secondary?: boolean;\n  tooltip?: string;\n}>) {\n  const width = data.cs.bandWidth;\n  const offset = (data.cell - width) / 2;\n  const className = clsx(`fill${suffix}`, !tooltip && `pnone-${style.id}`, style.classNames.bar);\n  return (\n    <g data-upset={secondary ? 'cs-q' : 'cs-s'}>\n      {data.cs.v.map((d, i) => {\n        const l = data.cs.l[i];\n        const key = data.cs.keys[i];\n        if (empty && !secondary) {\n          return (\n            <rect\n              key={key}\n              x={l.x + offset}\n              y={l.y + data.cell}\n              height={0}\n              width={width}\n              className={className}\n              style={mergeColor(style.styles.bar, !style.selectionColor ? d.color : undefined)}\n            >\n              {tooltip && <title></title>}\n            </rect>\n          );\n        }\n        const o = elemOverlap(d);\n        if (o === 0) {\n          return null;\n        }\n        const y = data.cs.scale(o);\n\n        const title = tooltip && <title>{`${d.name} ∩ ${tooltip}: ${o}`}</title>;\n        return secondary ? (\n          <path\n            key={key}\n            transform={`translate(${l.x + offset}, ${l.y + y})`}\n            d={`M0,-1 l${width},0 l0,2 l${-width},0 L-${data.triangleSize},-${data.triangleSize} L-${\n              data.triangleSize\n            },${data.triangleSize} Z`}\n            className={className}\n            data-i={i}\n            data-cardinality={o}\n            style={mergeColor(undefined, !style.selectionColor ? d.color : undefined)}\n          >\n            {title}\n          </path>\n        ) : (\n          <rect\n            key={key}\n            x={l.x + offset}\n            y={l.y + y}\n            height={data.cell - y}\n            data-i={i}\n            data-cardinality={o}\n            width={width}\n            className={className}\n            style={mergeColor(style.styles.bar, !style.selectionColor ? d.color : undefined)}\n          >\n            {title}\n          </rect>\n        );\n      })}\n    </g>\n  );\n}\n\nexport default KMapQueries;\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport { queryOverlap, UpSetQuery } from '@upsetjs/model';\nimport React, { PropsWithChildren, ReactElement, useMemo } from 'react';\nimport KMapSelectionChart from './KMapSelectionChart';\nimport type { KMapDataInfo } from '../derive/deriveDataDependent';\nimport type { KMapStyleInfo } from '../derive/deriveStyleDependent';\n\nexport type KMapQueriesProps<T> = PropsWithChildren<{\n  style: KMapStyleInfo;\n  data: KMapDataInfo<T>;\n  hasHover?: boolean;\n  secondary: boolean;\n  queries: readonly UpSetQuery<T>[];\n}>;\n\nconst KMapQueries = /*!#__PURE__*/ React.memo(function KMapQueries<T>({\n  data,\n  style,\n  hasHover,\n  secondary,\n  queries,\n}: KMapQueriesProps<T>) {\n  const qs = useMemo(\n    () =>\n      queries.map((q) => ({\n        ...q,\n        overlap: queryOverlap(q, 'intersection', data.toElemKey),\n      })),\n    [queries, data.toElemKey]\n  );\n\n  return (\n    <g className={hasHover && !secondary ? `pnone-${style.id}` : undefined}>\n      {qs.map((q, i) => (\n        <KMapSelectionChart\n          key={q.name}\n          data={data}\n          style={style}\n          elemOverlap={q.overlap}\n          suffix={`Q${i}-${data.id}`}\n          secondary={secondary || i > 0}\n          tooltip={hasHover && !(secondary || i > 0) ? undefined : q.name}\n        />\n      ))}\n    </g>\n  );\n});\n\nexport default KMapQueries as <T>(props: KMapQueriesProps<T>) => ReactElement;\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { ISetLike } from '@upsetjs/model';\nimport React, { PropsWithChildren } from 'react';\nimport { generateSelectionName, generateSelectionOverlap } from '../../utils';\nimport type { KMapDataInfo } from '../derive/deriveDataDependent';\nimport type { KMapStyleInfo } from '../derive/deriveStyleDependent';\nimport KMapSelectionChart from './KMapSelectionChart';\n\nexport default function KMapSelection<T>({\n  data,\n  style,\n  selection,\n  hasHover,\n}: PropsWithChildren<{\n  style: KMapStyleInfo;\n  data: KMapDataInfo<T>;\n  hasHover?: boolean;\n  selection: ISetLike<T> | null | readonly T[] | ((s: ISetLike<T>) => number);\n}>) {\n  const empty = style.emptySelection;\n\n  const selectionOverlap = generateSelectionOverlap(selection, data.overlapGuesser, data.toElemKey);\n  const selectionName = generateSelectionName(selection);\n\n  return (\n    <g className={hasHover ? `pnone-${style.id}` : undefined}>\n      {(selection || empty) && (\n        <KMapSelectionChart\n          data={data}\n          style={style}\n          empty={empty && !selection}\n          elemOverlap={selectionOverlap}\n          suffix={`Selection-${style.id}`}\n          tooltip={hasHover ? undefined : selectionName}\n        />\n      )}\n    </g>\n  );\n}\n", "export interface IGenerateOptions {\n  width: number;\n  height: number;\n  labelHeight: number;\n}\n\nexport function ranged<U>(count: number, cb: (i: number) => U) {\n  return Array(count)\n    .fill(0)\n    .map((_, i) => cb(i));\n}\n\nexport function generateLevels(numSets: number) {\n  // all lines and the value is the thickness\n  const lines = Array(Math.pow(2, numSets)).fill(0);\n  ranged(numSets, (i) => {\n    const shift = Math.pow(2, i);\n    for (let i = 0; i < lines.length; i += shift) {\n      lines[i]++;\n    }\n  });\n\n  const levels: number[][] = ranged(Math.max(numSets, 1), () => []);\n  lines.forEach((l, i) => {\n    const level = Math.max(0, l - 1);\n    // l -1 cause l is at least 1\n    levels[level].push(i);\n  });\n  // push the last index to the last level\n  levels[levels.length - 1].push(lines.length);\n  return levels;\n}\n\nexport function generate<S, C>(\n  sets: readonly S[],\n  cs: readonly C[],\n  has: (cs: C, s: S) => boolean,\n  options: IGenerateOptions\n) {\n  const { xBefore, yBefore, cell, hCells, vCells, horizontalSets, verticalSets } = bounds(sets.length, options);\n\n  const s = setLabels(sets.length, options);\n\n  const shifts = generateShiftLookup<S, C>(sets, hCells, vCells, has);\n\n  const c = cs.map((c) => {\n    const [i, j] = shifts.reduceRight((acc, s) => s(c, acc), [0, 0]);\n    return {\n      x: xBefore + i * cell,\n      y: yBefore + j * cell,\n    };\n  });\n\n  const hLevels = generateLevels(horizontalSets);\n  const vLevels = generateLevels(verticalSets);\n\n  return {\n    s,\n    c,\n    cell,\n    grid: {\n      x: xBefore,\n      y: yBefore,\n      hCells,\n      vCells,\n      levels: hLevels.map((l, i) => ({\n        x: l,\n        y: i < vLevels.length ? vLevels[i] : [],\n      })),\n    },\n  };\n}\n\nexport function generateShiftLookup<S, C>(\n  sets: readonly S[],\n  hCells: number,\n  vCells: number,\n  has: (cs: C, s: S) => boolean\n) {\n  return sets.map((s, k) => {\n    const index = Math.floor(k / 2);\n    const hor = k % 2 === 0;\n    const numLabels = Math.pow(2, index);\n    const span = (hor ? hCells : vCells) / numLabels / 2;\n\n    return (cs: C, [i, j]: [number, number]): [number, number] => {\n      if (has(cs, s)) {\n        return [i, j];\n      }\n      if (span > 1) {\n        // flip previous and shift\n        if (hor) {\n          return [span - 1 - i + span, j];\n        }\n        return [i, span - 1 - j + span];\n      }\n      // shift only\n      if (hor) {\n        return [i + span, j];\n      }\n      return [i, j + span];\n    };\n  });\n}\n\nexport function setLabels(sets: number, options: IGenerateOptions) {\n  const { xOffset, yOffset, cell, xBefore, yBefore, hCells, vCells } = bounds(sets, options);\n\n  const xAfterEnd = options.width - xOffset;\n  const yAfterEnd = options.height - yOffset;\n\n  return ranged(sets, (k) => {\n    const index = Math.floor(k / 2);\n    const hor = k % 2 === 0;\n    const numLabels = Math.pow(2, index);\n    const span = (hor ? hCells : vCells) / numLabels / 2;\n    const xPos = hor ? xBefore : yBefore;\n\n    const labels = [\n      {\n        v: true,\n        x: xPos + span * cell * 0.5,\n      },\n      {\n        v: false, // value\n        x: xPos + span * cell * 1.5,\n      },\n    ];\n    for (let i = 1; i <= index; i++) {\n      // duplicate and mirror\n      const offset = span * Math.pow(2, i) * cell;\n      const l = labels.length - 1;\n      labels.push(\n        ...labels.map((li, i) => ({\n          v: labels[l - i].v,\n          x: li.x + offset,\n        }))\n      );\n    }\n    const inAfterGroup = index % 2 === 1;\n    const withinGroupIndex = Math.floor(index / 2);\n\n    let yPos = 0;\n    if (inAfterGroup) {\n      const end = hor ? yAfterEnd : xAfterEnd;\n      yPos = end - options.labelHeight * (0.5 + withinGroupIndex);\n    } else {\n      const start = hor ? yOffset : xOffset;\n      yPos = start + options.labelHeight * (0.5 + withinGroupIndex);\n    }\n    if (hor) {\n      return {\n        hor: true,\n        span,\n        text: labels.filter((d) => d.v).map((l) => ({ x: l.x, y: yPos })),\n        notText: labels.filter((d) => !d.v).map((l) => ({ x: l.x, y: yPos })),\n      };\n    }\n    return {\n      hor: false,\n      span,\n      text: labels.filter((d) => d.v).map((l) => ({ x: yPos, y: l.x })),\n      notText: labels.filter((d) => !d.v).map((l) => ({ x: yPos, y: l.x })),\n    };\n  });\n}\n\nexport function bounds(sets: number, options: IGenerateOptions) {\n  const horizontalSets = Math.ceil(sets / 2);\n  const verticalSets = Math.floor(sets / 2);\n\n  const hCells = Math.pow(2, horizontalSets);\n  const vCells = Math.pow(2, verticalSets);\n\n  const cell = Math.floor(\n    Math.min(\n      (options.width - options.labelHeight * verticalSets) / hCells,\n      (options.height - options.labelHeight * horizontalSets) / vCells\n    )\n  );\n  const xOffset = (options.width - hCells * cell - options.labelHeight * verticalSets) / 2;\n  const yOffset = (options.height - vCells * cell - options.labelHeight * horizontalSets) / 2;\n\n  const xBefore = xOffset + Math.ceil(verticalSets / 2) * options.labelHeight;\n  const yBefore = yOffset + Math.ceil(horizontalSets / 2) * options.labelHeight;\n\n  return { xOffset, horizontalSets, yOffset, verticalSets, cell, xBefore, yBefore, hCells, vCells };\n}\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport {\n  GenerateSetCombinationsOptions,\n  ISet,\n  ISetCombination,\n  ISetCombinations,\n  ISetLike,\n  ISets,\n  NumericScaleLike,\n  generateCombinations,\n  generateOverlapFunction,\n  ISetOverlapFunction,\n} from '@upsetjs/model';\nimport { generateId, noGuessPossible } from '../../utils';\nimport type { VennDiagramSizeInfo } from '../../venn/derive/deriveVennSizeDependent';\nimport { generate } from '../layout';\nimport { resolveNumericScale, areCombinations } from '../../derive/deriveDataDependent';\nimport type { KarnaughMapDataProps } from 'interfaces';\n\nexport declare type IPoints = readonly { x: number; y: number }[];\n\nexport interface KMapDataInfo<T> {\n  id: string;\n  grid: {\n    x: number;\n    y: number;\n    hCells: number;\n    vCells: number;\n    levels: { x: number[]; y: number[] }[];\n  };\n  triangleSize: number;\n  cell: number;\n  sets: {\n    keys: string[];\n    labelHeight: number;\n    l: readonly { hor: boolean; span: number; text: IPoints; notText: IPoints }[];\n    v: ISets<T>;\n    format(v: number): string;\n  };\n  cs: {\n    barLabelFontSize: number;\n    keys: string[];\n    l: { x: number; y: number }[];\n    v: ISetCombinations<T>;\n    has(v: ISetCombination<T>, s: ISet<T>): boolean;\n    scale: NumericScaleLike;\n    bandWidth: number;\n    labelOffset: number;\n  };\n  toKey(s: ISetLike<T>): string;\n  toElemKey?(e: T): string;\n  overlapGuesser: ISetOverlapFunction<T>;\n}\n\nexport default function deriveKarnaughDataDependent<T>(\n  sets: ISets<T>,\n  combinations: ISetCombinations<T> | GenerateSetCombinationsOptions,\n  size: VennDiagramSizeInfo,\n  numericScale: NonNullable<KarnaughMapDataProps<any>['numericScale']>,\n  barLabelFontSize: number,\n  barPadding: number,\n  setLabelFontSize: number,\n  tickFontSize: number,\n  toKey: (s: ISetLike<T>) => string,\n  toElemKey?: (e: T) => string,\n  id?: string,\n  combinationMaxScale?: number\n): KMapDataInfo<T> {\n  const numericScaleFactory = resolveNumericScale(numericScale);\n  const setKeys = sets.map(toKey);\n  const cs = areCombinations(combinations)\n    ? combinations\n    : generateCombinations<T>(\n        sets,\n        Object.assign(\n          {\n            type: 'distinctIntersection',\n          },\n          combinations ?? {}\n        )\n      );\n  const csKeys = cs.map(toKey);\n\n  const has = (v: ISetCombination<T>, s: ISet<T>) => {\n    const sk = toKey(s);\n    return Array.from(v.sets).some((ss) => toKey(ss) === sk);\n  };\n  const labelHeight = Math.ceil(setLabelFontSize * 1.2);\n  const l = generate(sets, cs, has, {\n    width: size.area.w,\n    height: size.area.h,\n    labelHeight,\n  });\n\n  const maxCSCardinality = combinationMaxScale ?? cs.reduce((acc, d) => Math.max(acc, d.cardinality), 0);\n  const scale = numericScaleFactory(maxCSCardinality, [l.cell, barLabelFontSize], {\n    orientation: 'vertical',\n    fontSizeHint: tickFontSize,\n  });\n  const bandWidth = Math.round(l.cell * (1 - barPadding));\n  const triangleSize = Math.min(Math.max(2, (bandWidth / 2) * barPadding), 5);\n  const guessLabelWidth = (v: number) => Math.floor((barLabelFontSize / 1.4) * 0.7 * scale.tickFormat()(v).length);\n\n  const largestCSLabelWidth = guessLabelWidth(maxCSCardinality);\n\n  return {\n    id: id ? id : generateId(),\n    grid: l.grid,\n    sets: {\n      keys: setKeys,\n      l: l.s,\n      v: sets,\n      labelHeight,\n      format: scale.tickFormat(),\n    },\n    triangleSize,\n    cell: l.cell,\n    cs: {\n      keys: csKeys,\n      l: l.c,\n      v: cs,\n      barLabelFontSize,\n      has,\n      scale,\n      bandWidth,\n      labelOffset: largestCSLabelWidth + 9 + 6,\n    },\n    toKey,\n    toElemKey,\n    overlapGuesser: generateOverlapFunction(cs, noGuessPossible, toKey),\n  };\n}\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { CSSProperties, ReactNode } from 'react';\nimport type { UpSetThemes, KarnaughMapMultiStyle } from '../../interfaces';\n\nexport default function deriveStyleDependent(\n  theme: UpSetThemes,\n  styles: KarnaughMapMultiStyle<CSSProperties>,\n  classNames: KarnaughMapMultiStyle<string>,\n  combinationName: string | ReactNode,\n  combinationNameAxisOffset: number | 'auto',\n  styleId: string,\n  barLabelOffset: number,\n  selectionColor: string,\n  emptySelection: boolean,\n  title: string | ReactNode,\n  description: string | ReactNode,\n  tooltips: boolean\n) {\n  return {\n    theme,\n    styles,\n    classNames: classNames,\n    emptySelection,\n    id: styleId,\n    barLabelOffset,\n    selectionColor,\n    title,\n    description,\n    tooltips,\n    cs: {\n      name: combinationName,\n      offset: combinationNameAxisOffset,\n    },\n  };\n}\n\nexport declare type KMapStyleInfo = ReturnType<typeof deriveStyleDependent>;\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\nimport React, { Ref, useMemo } from 'react';\nimport { fillKarnaughMapDefaults } from '../fillDefaults';\nimport useHandler from '../hooks/useHandler';\nimport type { KarnaughMapProps } from '../interfaces';\nimport { baseRules } from '../rules';\nimport { generateId, generateSelectionName, parseFontSize } from '../utils';\nimport SVGWrapper from '../venn/components/SVGWrapper';\nimport deriveVennSizeDependent from '../venn/derive/deriveVennSizeDependent';\nimport { useExportChart } from '../venn/hooks';\nimport KMapChart from './components/KMapChart';\nimport KMapQueries from './components/KMapQueries';\nimport KMapSelection from './components/KMapSelection';\nimport deriveKarnaughDataDependent from './derive/deriveDataDependent';\nimport deriveKarnaughStyleDependent from './derive/deriveStyleDependent';\nimport UpSetTitle from '../components/UpSetTitle';\n\nexport const KarnaughMap = /*!#__PURE__*/ React.forwardRef(function KarnaughMap<T = any>(\n  props: KarnaughMapProps<T>,\n  ref: Ref<SVGSVGElement>\n) {\n  const p = fillKarnaughMapDefaults<T>(props);\n  const { queries = [], fontSizes, selection = null } = p;\n  // generate a \"random\" but attribute stable id to avoid styling conflicts\n  const styleId = useMemo(\n    () =>\n      p.id\n        ? p.id\n        : generateId([\n            p.fontFamily,\n            fontSizes.axisTick,\n            fontSizes.barLabel,\n            fontSizes.legend,\n            fontSizes.setLabel,\n            fontSizes.title,\n            fontSizes.exportLabel,\n            fontSizes.description,\n            p.textColor,\n            p.color,\n            p.hasSelectionColor,\n            p.strokeColor,\n            p.selectionColor,\n            p.opacity,\n            p.hasSelectionOpacity,\n          ]),\n    [\n      p.id,\n      p.fontFamily,\n      fontSizes.axisTick,\n      fontSizes.barLabel,\n      fontSizes.legend,\n      fontSizes.setLabel,\n      fontSizes.title,\n      fontSizes.exportLabel,\n      fontSizes.description,\n      p.textColor,\n      p.color,\n      p.hasSelectionColor,\n      p.strokeColor,\n      p.selectionColor,\n      p.opacity,\n      p.hasSelectionOpacity,\n    ]\n  );\n\n  const style = useMemo(\n    () =>\n      deriveKarnaughStyleDependent(\n        p.theme,\n        p.styles,\n        p.classNames,\n        p.combinationName,\n        p.combinationNameAxisOffset,\n        styleId,\n        p.barLabelOffset,\n        p.selectionColor,\n        p.emptySelection,\n        p.title,\n        p.description,\n        p.tooltips\n      ),\n    [\n      p.theme,\n      p.styles,\n      p.classNames,\n      p.combinationName,\n      p.combinationNameAxisOffset,\n      styleId,\n      p.barLabelOffset,\n      p.selectionColor,\n      p.emptySelection,\n      p.title,\n      p.description,\n      p.tooltips,\n    ]\n  );\n\n  const size = useMemo(\n    () => deriveVennSizeDependent(p.width, p.height, p.padding, p.id),\n    [p.width, p.height, p.padding, p.id]\n  );\n\n  const data = useMemo(\n    () =>\n      deriveKarnaughDataDependent(\n        p.sets,\n        p.combinations,\n        size,\n        p.numericScale,\n        p.barLabelOffset + parseFontSize(fontSizes.barLabel),\n        p.barPadding,\n        parseFontSize(fontSizes.setLabel),\n        parseFontSize(fontSizes.axisTick),\n        p.toKey,\n        p.toElemKey,\n        p.id,\n        p.combinationMaxScale\n      ),\n    [\n      p.sets,\n      p.combinations,\n      size,\n      p.numericScale,\n      p.barLabelOffset,\n      fontSizes.barLabel,\n      p.barPadding,\n      fontSizes.axisTick,\n      fontSizes.setLabel,\n      p.toKey,\n      p.toElemKey,\n      p.id,\n      p.combinationMaxScale,\n    ]\n  );\n\n  const h = useHandler(p);\n  const selectionName = generateSelectionName(selection);\n\n  const rulesHelper = baseRules(styleId, p, p.fontFamily, fontSizes);\n\n  const rules = `\n  ${rulesHelper.root}\n  ${rulesHelper.text}\n\n  .axisTextStyle-${styleId} {\n    fill: ${p.textColor};\n    ${rulesHelper.p(fontSizes.axisTick)}\n    text-anchor: end;\n  }\n  .barTextStyle-${styleId} {\n    fill: ${p.textColor};\n    ${rulesHelper.p(fontSizes.barLabel)}\n    text-anchor: middle;\n  }\n  .setTextStyle-${style.id} {\n    fill: ${p.textColor};\n    ${rulesHelper.p(fontSizes.setLabel)}\n    text-anchor: middle;\n    dominant-baseline: central;\n  }\n  .cChartTextStyle-${styleId} {\n    fill: ${p.textColor};\n    ${rulesHelper.p(fontSizes.chartLabel)}\n  }\n\n  .not-${style.id} {\n    text-decoration: overline;\n  }\n\n  .axisLine-${styleId} {\n    fill: none;\n    stroke: ${p.textColor};\n  }\n\n  .gridStyle-${style.id} {\n    fill: none;\n    stroke: ${p.strokeColor};\n    stroke-linecap: round;\n  }\n  .gridStyle-${style.id}-1 {\n    stroke-width: 2;\n  }\n  .gridStyle-${style.id}-2 {\n    stroke-width: 3;\n  }\n\n  ${rulesHelper.fill}\n  ${rulesHelper.export}\n\n  ${queries\n    .map(\n      (q, i) => `.fillQ${i}-${data.id} {\n    fill: ${q.color};\n  }`\n    )\n    .join('\\n')}\n  `;\n\n  const exportChart = useExportChart(data, p, 'kmap');\n  const maxWidth = data.sets.l.reduce((acc, d) => Math.min(acc, d.text[0].x - data.sets.labelHeight), size.area.w);\n\n  return (\n    <SVGWrapper\n      rules={rules}\n      style={style}\n      size={size}\n      p={p}\n      data={data}\n      tRef={ref}\n      selectionName={selectionName}\n      h={h}\n      exportChart={exportChart}\n    >\n      <UpSetTitle style={style} width={maxWidth} />\n      <KMapChart style={style} data={data} h={h} size={size} />\n      <KMapSelection style={style} data={data} hasHover={h.hasHover} selection={selection} />\n      <KMapQueries\n        style={style}\n        data={data}\n        hasHover={h.hasHover}\n        queries={queries}\n        secondary={h.hasHover || selection != null}\n      />\n    </SVGWrapper>\n  );\n});\n\n/**\n * KarnaughMap main pure functional stateless React component, the generic argument T refers to the type of the elements\n *\n * with React.forwardRef support to specify a reference to the SVG element\n */\nexport default KarnaughMap as <T>(p: KarnaughMapProps<T> & React.RefAttributes<SVGSVGElement>) => React.ReactElement;\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport React, { Ref } from 'react';\n\nexport interface UpSetJSSkeletonProps extends React.SVGAttributes<SVGSVGElement> {\n  background?: string;\n  color?: string;\n  secondaryColor?: string;\n}\n\nconst defaults = {\n  background: '#F4F4F4',\n  color: '#A6A8AB',\n  secondaryColor: '#E1E2E3',\n};\n\nexport function prepare(props: UpSetJSSkeletonProps) {\n  const color = props.color ?? defaults.color;\n  const secondary = props.secondaryColor ?? defaults.secondaryColor;\n  const rest = Object.assign({}, props);\n  const background = props.background ?? defaults.background;\n  delete rest.color;\n  delete rest.secondaryColor;\n  delete rest.background;\n\n  if (background) {\n    rest.style = Object.assign({ background }, rest.style ?? {});\n  }\n  return { color, secondary, rest };\n}\n\n/**\n * UpSetJS Skeleton a simple UpSetJS skeleton\n *\n * with React.forwardRef support to specify a reference to the SVG element\n */\nconst UpSetJSSkeleton = /*!#__PURE__*/ React.memo(\n  /*!#__PURE__*/ React.forwardRef(function UpSetJSSkeleton(props: UpSetJSSkeletonProps, ref: Ref<SVGSVGElement>) {\n    const { color, secondary, rest } = prepare(props);\n\n    const wi = 20;\n    const padding = 10;\n\n    const sWidth = 75;\n    const sY = 110;\n\n    const cHeight = 100;\n    const csX = 85;\n\n    const cOffsets = [10, 20, 35, 60, 65, 80, 90];\n    const sOffsets = [50, 30, 15];\n\n    return (\n      <svg viewBox=\"0 0 300 200\" ref={ref} {...rest}>\n        {cOffsets.map((offset, i) => (\n          <rect key={i} x={csX + i * (wi + padding)} y={offset} width={wi} height={cHeight - offset} fill={color} />\n        ))}\n        {sOffsets.map((offset, i) => (\n          <rect key={i} x={offset} y={sY + i * (wi + padding)} width={sWidth - offset} height={wi} fill={color} />\n        ))}\n\n        {cOffsets.map((_, i) =>\n          sOffsets.map((_, j) => {\n            const filled = j === 2 - i || (i === 3 && j > 0) || (i === 4 && j !== 1) || (i === 5 && j < 2) || i === 6;\n            return (\n              <circle\n                key={`${i}x${j}`}\n                cx={csX + i * (wi + padding) + wi / 2}\n                cy={sY + j * (wi + padding) + wi / 2}\n                r={wi / 2}\n                fill={filled ? color : secondary}\n              />\n            );\n          })\n        )}\n        <rect x=\"182\" y=\"150\" width=\"6\" height=\"30\" fill={color} />\n        <rect x=\"212\" y=\"120\" width=\"6\" height=\"60\" fill={color} />\n        <rect x=\"242\" y=\"120\" width=\"6\" height=\"30\" fill={color} />\n        <rect x=\"272\" y=\"120\" width=\"6\" height=\"60\" fill={color} />\n      </svg>\n    );\n  })\n) as React.FC<UpSetJSSkeletonProps & React.RefAttributes<SVGSVGElement>>;\n\nexport { UpSetJSSkeleton };\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport React, { Ref } from 'react';\nimport { UpSetJSSkeletonProps, prepare } from '../UpSetJSSkeleton';\nimport { layoutImpl } from './layout/vennDiagramLayout';\n\n/**\n * VennDiagram Skeleton a simple VennDiagram skeleton\n *\n * with React.forwardRef support to specify a reference to the SVG element\n */\nconst VennDiagramSkeleton = /*!#__PURE__*/ React.memo(\n  /*!#__PURE__*/ React.forwardRef(function VennDiagramSkeleton(props: UpSetJSSkeletonProps, ref: Ref<SVGSVGElement>) {\n    const { color, secondary, rest } = prepare(props);\n\n    const padding = 10;\n    const l = layoutImpl(3, 300 - padding * 2, 3200 - padding * 2);\n    return (\n      <svg viewBox=\"0 0 300 200\" ref={ref} {...rest}>\n        {l.sets.map((set, i) => (\n          <circle key={i} cx={set.cx} cy={set.cy + padding} r={set.r} fill={secondary} />\n        ))}\n        {l.sets.map((set, i) => (\n          <circle key={i} cx={set.cx} cy={set.cy + padding} r={set.r} stroke={color} fill=\"none\" />\n        ))}\n      </svg>\n    );\n  })\n) as React.FC<UpSetJSSkeletonProps & React.RefAttributes<SVGSVGElement>>;\n\nexport { VennDiagramSkeleton };\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport React, { Ref } from 'react';\nimport { UpSetJSSkeletonProps, prepare } from '../UpSetJSSkeleton';\nimport { bounds } from './layout';\n\n/**\n * KV Diagram Skeleton a simple KarnaughMap skeleton\n *\n * with React.forwardRef support to specify a reference to the SVG element\n */\nconst KarnaughMapSkeleton = /*!#__PURE__*/ React.memo(\n  /*!#__PURE__*/ React.forwardRef(function KarnaughMapSkeleton(props: UpSetJSSkeletonProps, ref: Ref<SVGSVGElement>) {\n    const { rest, color, secondary } = prepare(props);\n\n    // const padding = 10;\n    const { xBefore, yBefore, cell, hCells, vCells } = bounds(2, {\n      width: 270,\n      height: 170,\n      labelHeight: 20,\n    });\n\n    const gw = hCells * cell;\n    const gh = vCells * cell;\n    const v1 = 0.9;\n    const v2 = 0.5;\n    const v3 = 0.26;\n    const v4 = 0.75;\n\n    return (\n      <svg viewBox=\"0 0 300 200\" ref={ref} fontFamily=\"sans-serif\" {...rest}>\n        <g transform={`translate(${xBefore + 10},${yBefore + 10})`}>\n          <text x={cell * 0.5} y={-3} fill={color} textAnchor=\"middle\">\n            A\n          </text>\n          <text x={cell * 1.5} y={-3} fill={color} textAnchor=\"middle\" style={{ textDecoration: 'overline' }}>\n            A\n          </text>\n          <text x={-3} y={cell * 0.5} fill={color} textAnchor=\"end\" dominantBaseline=\"central\">\n            B\n          </text>\n          <text\n            x={-3}\n            y={cell * 1.5}\n            fill={color}\n            textAnchor=\"end\"\n            dominantBaseline=\"central\"\n            style={{ textDecoration: 'overline' }}\n          >\n            B\n          </text>\n\n          <rect x={cell * 0.1} y={cell * (1 - v1)} height={cell * v1} width={cell * 0.8} fill={secondary} />\n          <rect x={cell * 1.1} y={cell * (1 - v2)} height={cell * v2} width={cell * 0.8} fill={secondary} />\n          <rect x={cell * 0.1} y={cell * (1 - v3 + 1)} height={cell * v3} width={cell * 0.8} fill={secondary} />\n          <rect x={cell * 1.1} y={cell * (1 - v4 + 1)} height={cell * v4} width={cell * 0.8} fill={secondary} />\n          <path\n            d={`M0,0 l${gw},0 l0,${gh} l${-gw},0 l0,${-gh} M${gw / 2},0 l0,${gh} M0,${gh / 2} l${gw},0`}\n            fill=\"none\"\n            stroke={color}\n          />\n        </g>\n      </svg>\n    );\n  })\n) as React.FC<UpSetJSSkeletonProps & React.RefAttributes<SVGSVGElement>>;\n\nexport { KarnaughMapSkeleton };\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nexport const DEG2RAD = (1 / 180) * Math.PI;\n\nexport function pointAtCircle(cx: number, cy: number, radius: number, angle: number) {\n  return {\n    x: cx + Math.cos(angle * DEG2RAD) * radius,\n    y: cy + Math.sin(angle * DEG2RAD) * radius,\n  };\n}\n", "/**\n * @upsetjs/react\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport type { ISetCombinations, ISets } from '@upsetjs/model';\nimport type { IVennDiagramLayoutGenerator, ITextCircle } from './interfaces';\nimport { DEG2RAD, pointAtCircle } from './math';\n\nexport interface IVennJSSetOverlap {\n  sets: readonly string[];\n  size: number;\n  weight?: number;\n}\n\nexport interface IVennJSArc {\n  circle: { x: number; y: number; radius: number };\n  width: number;\n  p1: { x: number; y: number };\n  p2: { x: number; y: number };\n}\n\nexport interface IVennJSVennLayout {\n  data: IVennJSSetOverlap;\n  text: { x: number; y: number };\n  circles: readonly { x: number; y: number; radius: number; set: string }[];\n  arcs: readonly IVennJSArc[];\n  path?: string;\n  distinctPath?: string;\n}\n\nexport interface IVennJSLayoutFunction<O extends { width?: number; height?: number; distinct?: boolean }> {\n  (data: readonly IVennJSSetOverlap[], options: O): readonly IVennJSVennLayout[];\n}\n\nexport function center(circles: readonly { x: number; y: number; radius: number }[]) {\n  const sumX = circles.reduce((acc, a) => acc + a.x, 0);\n  const sumY = circles.reduce((acc, a) => acc + a.y, 0);\n  return {\n    x: sumX / circles.length,\n    y: sumY / circles.length,\n  };\n}\n\nfunction angleAtCircle(p: { x: number; y: number }, c: { x: number; y: number }) {\n  const x = p.x - c.x;\n  const y = p.y - c.y;\n  return Math.atan2(y, x) / DEG2RAD;\n}\n\nexport function createVennJSAdapter<O extends { width?: number; height?: number }>(\n  layout: IVennJSLayoutFunction<O>,\n  options?: O\n): IVennDiagramLayoutGenerator {\n  return {\n    maxSets: Infinity,\n    compute<T>(sets: ISets<T>, combinations: ISetCombinations<T>, width: number, height: number) {\n      const overlaps = combinations.map((c) => ({ sets: Array.from(c.sets).map((s) => s.name), size: c.cardinality }));\n      const r = layout(\n        overlaps,\n        Object.assign(\n          {} as unknown as O,\n          {\n            width,\n            height,\n            distinct: true,\n          },\n          options ?? {}\n        )\n      );\n\n      const singleSets = r.filter((d) => d.data.sets.length === 1);\n      const setNames = new Map(sets.map((d, i) => [d.name, i]));\n      const setCircles = singleSets.map((d) => d.circles[0]);\n      const eulerCenter = center(setCircles);\n\n      const asArc = (a: IVennJSArc) => ({\n        x2: a.p1.x,\n        y2: a.p1.y,\n        cx: a.circle.x,\n        cy: a.circle.y,\n        sweep: true,\n        large: a.width > a.circle.radius,\n        ref: setCircles.findIndex((d) => Math.abs(d.x - a.circle.x) < 0.05 && Math.abs(d.y - a.circle.y) < 0.05),\n        mode: 'i' as const,\n      });\n\n      return {\n        sets: singleSets.map((d) => {\n          const c = d.circles[0];\n          const angle = angleAtCircle(c, eulerCenter);\n          return {\n            cx: c.x,\n            cy: c.y,\n            r: c.radius,\n            align: angle > 90 ? 'end' : 'start',\n            verticalAlign: 'bottom',\n            text: pointAtCircle(c.x, c.y, c.radius * 1.1, angle),\n          } as ITextCircle;\n        }),\n        intersections: r.map((d) => {\n          const arcs = d.arcs;\n          const text = {\n            x: d.text.x,\n            y: d.text.y,\n          };\n          if (arcs.length === 0) {\n            return {\n              sets: d.data.sets.map((s) => setNames.get(s)!),\n              text,\n              x1: 0,\n              y1: 0,\n              arcs: [],\n            };\n          }\n          if (arcs.length === 1) {\n            const c = d.arcs[0].circle;\n            return {\n              sets: d.data.sets.map((s) => setNames.get(s)!),\n              text,\n              x1: d.arcs[0].p2.x,\n              y1: c.y - c.radius,\n              arcs: [asArc(d.arcs[0]), Object.assign(asArc(d.arcs[0]), { y2: c.y - c.radius })],\n              path: d.distinctPath || d.path,\n            };\n          }\n          return {\n            sets: d.data.sets.map((s) => setNames.get(s)!),\n            text,\n            x1: d.arcs[0].p2.x,\n            y1: d.arcs[0].p2.y,\n            arcs: d.arcs.map((e) => asArc(e)),\n            path: d.distinctPath || d.path,\n          };\n        }),\n      };\n    },\n  };\n}\n", "/**\n * @upsetjs/bundle\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2021 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport { isSet, isSetCombination, isGenerateSetCombinationOptions, isSetLike, isUpSetQuery } from '@upsetjs/model';\nimport type {\n  UpSetStyleClassNames,\n  UpSetFontSizes,\n  UpSetMultiStyle,\n  UpSetExportOptions,\n  UpSetThemes,\n  VennDiagramMultiStyle,\n  VennDiagramFontSizes,\n  UpSetLayoutProps,\n  UpSetBaseDataProps,\n  UpSetDataProps,\n  UpSetSelectionProps,\n  KarnaughMapMultiStyle,\n  UpSetBaseStyleProps,\n  UpSetStyleProps,\n  KarnaughMapFontSizes,\n  VennDiagramLayoutProps,\n} from './interfaces';\nimport { FONT_SIZES_KEYS, MULTI_STYLE_KEYS, EXPORT_OPTION_KEYS } from './defaults';\n\nexport function widthRatios(value?: UpSetLayoutProps['widthRatios']) {\n  return value == null || (Array.isArray(value) && value.length >= 2 && value.every((v) => typeof v === 'number'));\n}\nexport function heightRatios(value?: UpSetLayoutProps['heightRatios']) {\n  return value == null || (Array.isArray(value) && value.length >= 1 && value.every((v) => typeof v === 'number'));\n}\nexport function setLabelAlignment(value?: UpSetLayoutProps['setLabelAlignment']) {\n  return value == null || value === 'left' || value === 'center' || value === 'right';\n}\n\nexport function sets(value: UpSetBaseDataProps<any>['sets']) {\n  return Array.isArray(value) && value.every(isSet);\n}\n\nexport function combinations(value?: UpSetDataProps<any, any>['combinations']) {\n  return (\n    value == null || (Array.isArray(value) && value.every(isSetCombination)) || isGenerateSetCombinationOptions(value)\n  );\n}\n\nexport function selection(value?: UpSetSelectionProps<any>['selection']) {\n  return value == null || Array.isArray(value) || isSetLike(value);\n}\n\nexport function onHover(value?: UpSetSelectionProps<any>['onHover']) {\n  return value == null || typeof value === 'function';\n}\n\nexport function onClick(value?: UpSetSelectionProps<any>['onClick']) {\n  return value == null || typeof value === 'function';\n}\nexport function onContextMenu(value?: UpSetSelectionProps<any>['onContextMenu']) {\n  return value == null || typeof value === 'function';\n}\nexport function onMouseMove(value?: UpSetSelectionProps<any>['onMouseMove']) {\n  return value == null || typeof value === 'function';\n}\n\nexport function queries(value?: UpSetSelectionProps<any>['queries']) {\n  return !value || (Array.isArray(value) && value.every(isUpSetQuery));\n}\n\nexport function stringOrFalse(value?: string | false) {\n  return value == null || typeof value === 'string' || value === false;\n}\n\nexport function setLabelOffsets(value?: VennDiagramLayoutProps['setLabelOffsets']) {\n  return (\n    value == null ||\n    (Array.isArray(value) && value.every((v) => (v! = null && typeof v?.x === 'number' && typeof v?.y === 'number')))\n  );\n}\n\nexport function theme(value?: UpSetThemes) {\n  return value == null || value === 'light' || value === 'dark' || value === 'vega';\n}\n\nexport function classNames(\n  value?: UpSetStyleClassNames | VennDiagramMultiStyle<string> | KarnaughMapMultiStyle<string>\n) {\n  return (\n    value == null ||\n    (Object.keys(value) as (keyof (UpSetStyleClassNames | VennDiagramMultiStyle<string>))[]).every(\n      (k) => MULTI_STYLE_KEYS.includes(k) && typeof value[k] === 'string'\n    )\n  );\n}\n\nexport function fontSizes(value?: UpSetFontSizes | VennDiagramFontSizes | KarnaughMapFontSizes) {\n  return (\n    value == null ||\n    (Object.keys(value) as (keyof (UpSetFontSizes | VennDiagramFontSizes))[]).every(\n      (k) => FONT_SIZES_KEYS.includes(k) && typeof value[k] === 'string'\n    )\n  );\n}\n\nexport function numericScale(value?: UpSetDataProps<any, any>['numericScale']) {\n  return value == null || value === 'linear' || value === 'log' || typeof value === 'function';\n}\n\nexport function bandScale(value?: UpSetDataProps<any, any>['bandScale']) {\n  return value == null || value === 'band' || typeof value === 'function';\n}\n\nexport function axisOffset(value?: UpSetStyleProps<any>['setNameAxisOffset']) {\n  return value == null || value === 'auto' || typeof value === 'number';\n}\n\nexport function style(value?: any) {\n  return value == null || typeof value === 'object';\n}\n\nexport function styles(value?: UpSetMultiStyle<any> | VennDiagramMultiStyle<any> | KarnaughMapMultiStyle<any>) {\n  return (\n    value == null ||\n    Object.keys(value).every((k) =>\n      MULTI_STYLE_KEYS.includes(k as keyof (UpSetMultiStyle<any> | VennDiagramMultiStyle<any>))\n    )\n  );\n}\n\nexport function exportButtons(value?: UpSetBaseStyleProps<any>['exportButtons']) {\n  return (\n    value == null ||\n    typeof value === 'boolean' ||\n    (Object.keys(value) as (keyof UpSetExportOptions)[]).every(\n      (k) => EXPORT_OPTION_KEYS.includes(k) && typeof value[k] === 'boolean'\n    )\n  );\n}\n"],
  "mappings": "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",
  "names": ["LZString", "f", "sets", "byName", "toOrder", "combinations", "generateName", "mergeColors", "toKey", "r", "mergeDefaultColors", "byDegree", "_b", "_a", "_d", "_c", "toDefaultKey", "len", "v", "toKeyImpl", "toStr", "range", "distributeTicks", "overlaps", "EMPTY_ARRAY", "sets", "theme", "areCombinations", "combinations", "React", "bb", "isSetLike", "LZString", "classNames", "selection", "bandScale", "numericScale", "toKey", "widthRatios", "heightRatios", "deriveStyleDependent", "styles", "setLabelAlignment", "exportButtons", "QueryLegend", "queries", "style", "HorizontalTick", "VerticalTick", "MultilineText", "len", "lines", "UpSetTitle", "UpSetAxis", "UpSetDot", "CombinationChart", "SetChart", "i", "UpSetChart", "content", "UpSetQueries", "secondary", "fontSizes", "onClick", "UpSetJS", "center", "setLabelOffsets", "l", "ss", "VennDiagram", "KMapCell", "KMapChart", "KMapQueries", "KMapSelectionChart", "c", "s", "KarnaughMap", "deriveKarnaughStyleDependent", "UpSetJSSkeleton", "_", "VennDiagramSkeleton", "KarnaughMapSkeleton"]
}
