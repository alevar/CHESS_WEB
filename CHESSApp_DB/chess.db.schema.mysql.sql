-- MySQL Script generated by MySQL Workbench
-- Mon 01 Jul 2024 11:39:06 PM EDT
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema default_schema
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema CHESS_DB
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `CHESS_DB` ;

-- -----------------------------------------------------
-- Schema CHESS_DB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `CHESS_DB` ;
USE `CHESS_DB` ;

-- -----------------------------------------------------
-- Table `CHESS_DB`.`organism`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CHESS_DB`.`organism` ;

CREATE TABLE IF NOT EXISTS `CHESS_DB`.`organism` (
  `organism_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `scientific_name` VARCHAR(45) NOT NULL,
  `common_name` VARCHAR(45) NOT NULL,
  `information` TEXT NULL DEFAULT NULL,
  UNIQUE INDEX `name_UNIQUE` (`common_name` ASC) VISIBLE,
  PRIMARY KEY (`organism_id`),
  UNIQUE INDEX `scientificName_UNIQUE` (`scientific_name` ASC) VISIBLE,
  UNIQUE INDEX `organismID_UNIQUE` (`organism_id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CHESS_DB`.`assembly`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CHESS_DB`.`assembly` ;

CREATE TABLE IF NOT EXISTS `CHESS_DB`.`assembly` (
  `assembly_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `assembly_name` VARCHAR(45) NOT NULL,
  `information` TEXT NOT NULL,
  `link` TEXT NOT NULL,
  `organism_id` INT UNSIGNED NOT NULL,
  UNIQUE INDEX `organismID_UNIQUE` (`assembly_name` ASC) VISIBLE,
  INDEX `fk_Assembly_organismName_idx` (`organism_id` ASC) VISIBLE,
  PRIMARY KEY (`assembly_id`),
  UNIQUE INDEX `aid_UNIQUE` (`assembly_id` ASC) VISIBLE,
  CONSTRAINT `fk_Assembly_organismID`
    FOREIGN KEY (`organism_id`)
    REFERENCES `CHESS_DB`.`organism` (`organism_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Genome Assembly information.';


-- -----------------------------------------------------
-- Table `CHESS_DB`.`sequence_id`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CHESS_DB`.`sequence_id` ;

CREATE TABLE IF NOT EXISTS `CHESS_DB`.`sequence_id` (
  `assembly_id` INT UNSIGNED NOT NULL,
  `sequence_id` INT UNSIGNED NOT NULL,
  `length` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`assembly_id`, `sequence_id`),
  CONSTRAINT `fk_SequenceIDs_assembly`
    FOREIGN KEY (`assembly_id`)
    REFERENCES `CHESS_DB`.`assembly` (`assembly_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Describes a set of possible sequence IDs for a given assembly.\\nWhen adding transcript records - we check against this to make sure all records are on available sequences.\\nIf multiple nomenclatures exist for a given assembly - SequenceIDMap should be used to link them together.';


-- -----------------------------------------------------
-- Table `CHESS_DB`.`transcript`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CHESS_DB`.`transcript` ;

CREATE TABLE IF NOT EXISTS `CHESS_DB`.`transcript` (
  `tid` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'tid is arbitrary number. It can represent multiple transcript_ids (merged into the record from multiple sources)',
  `assembly_id` INT UNSIGNED NOT NULL,
  `sequence_id` INT UNSIGNED NOT NULL,
  `strand` BIT NOT NULL,
  `start` INT UNSIGNED NOT NULL,
  `end` INT UNSIGNED NOT NULL,
  `last_updated` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`tid`),
  UNIQUE INDEX `tid_UNIQUE` (`tid` ASC) VISIBLE,
  INDEX `fk_Transcript_sequenceID_idx` (`assembly_id` ASC, `sequence_id` ASC) VISIBLE,
  CONSTRAINT `fk_Transcript_sequenceID`
    FOREIGN KEY (`assembly_id` , `sequence_id`)
    REFERENCES `CHESS_DB`.`sequence_id` (`assembly_id` , `sequence_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CHESS_DB`.`sources`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CHESS_DB`.`sources` ;

CREATE TABLE IF NOT EXISTS `CHESS_DB`.`sources` (
  `source_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `information` TEXT NOT NULL,
  `link` TEXT NOT NULL,
  `original_format` ENUM("gtf", "gff") NOT NULL,
  `last_updated` VARCHAR(45) NULL DEFAULT NULL,
  `assembly_id` INT UNSIGNED NOT NULL,
  `citation` TEXT NOT NULL,
  PRIMARY KEY (`source_id`),
  UNIQUE INDEX `sourceID_UNIQUE` (`source_id` ASC) VISIBLE,
  UNIQUE INDEX `name_UNIQUE` (`name` ASC) VISIBLE,
  INDEX `fk_assemblyName_idx` (`assembly_id` ASC) VISIBLE,
  CONSTRAINT `fk_assemblyName`
    FOREIGN KEY (`assembly_id`)
    REFERENCES `CHESS_DB`.`assembly` (`assembly_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CHESS_DB`.`attribute_key`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CHESS_DB`.`attribute_key` ;

CREATE TABLE IF NOT EXISTS `CHESS_DB`.`attribute_key` (
  `key_name` VARCHAR(45) NOT NULL,
  `variable` TINYINT(1) NOT NULL,
  `description` TEXT NULL,
  PRIMARY KEY (`key_name`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CHESS_DB`.`attribute_key_value`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CHESS_DB`.`attribute_key_value` ;

CREATE TABLE IF NOT EXISTS `CHESS_DB`.`attribute_key_value` (
  `key_name` VARCHAR(45) NOT NULL,
  `value` VARCHAR(45) CHARACTER SET 'ascii' COLLATE 'ascii_bin' NOT NULL DEFAULT '',
  `kvid` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'useful for quick queries, since it is numerical',
  PRIMARY KEY (`key_name`, `value`),
  UNIQUE INDEX `kvid_UNIQUE` (`kvid` ASC) VISIBLE,
  CONSTRAINT `fk_AttributeKeyValue_key`
    FOREIGN KEY (`key_name`)
    REFERENCES `CHESS_DB`.`attribute_key` (`key_name`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'for standard keys, this map specifies which values are permitted and stores the relationship';


-- -----------------------------------------------------
-- Table `CHESS_DB`.`attribute_value_map`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CHESS_DB`.`attribute_value_map` ;

CREATE TABLE IF NOT EXISTS `CHESS_DB`.`attribute_value_map` (
  `key_name` VARCHAR(45) NOT NULL,
  `og_value` VARCHAR(45) CHARACTER SET 'ascii' COLLATE 'ascii_bin' NOT NULL DEFAULT '',
  `std_value` VARCHAR(45) CHARACTER SET 'ascii' COLLATE 'ascii_bin' NOT NULL DEFAULT '',
  PRIMARY KEY (`key_name`, `og_value`),
  INDEX `fk_Values_key_idx` (`key_name` ASC, `std_value` ASC) VISIBLE,
  CONSTRAINT `fk_Values_key_value`
    FOREIGN KEY (`key_name` , `std_value`)
    REFERENCES `CHESS_DB`.`attribute_key_value` (`key_name` , `value`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CHESS_DB`.`locus`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CHESS_DB`.`locus` ;

CREATE TABLE IF NOT EXISTS `CHESS_DB`.`locus` (
  `lid` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `assembly_id` INT UNSIGNED NOT NULL,
  `sequence_id` INT UNSIGNED NOT NULL,
  `strand` BIT NOT NULL,
  `start` INT UNSIGNED NOT NULL,
  `end` INT UNSIGNED NOT NULL,
  `last_updated` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`lid`),
  UNIQUE INDEX `lid_UNIQUE` (`lid` ASC) VISIBLE,
  INDEX `fk_Locus_sequence_idx` (`assembly_id` ASC, `sequence_id` ASC) VISIBLE,
  CONSTRAINT `fk_Locus_sequence`
    FOREIGN KEY (`assembly_id` , `sequence_id`)
    REFERENCES `CHESS_DB`.`sequence_id` (`assembly_id` , `sequence_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Generalization to keep together related transcripts across all sources (much like the Transcript table)';


-- -----------------------------------------------------
-- Table `CHESS_DB`.`gene`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CHESS_DB`.`gene` ;

CREATE TABLE IF NOT EXISTS `CHESS_DB`.`gene` (
  `gid` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `source_id` INT UNSIGNED NOT NULL COMMENT 'Unlike for transcripts where we can establish equality between two isoforms, telling that two genes are the same is much more difficult.\\nHence we keep all gene records without deduplicating them. As a sideeffect, we do not need to store a many-to-many relationship to the Sources like we do with Transcripts.\\nSince every gene in a catalog is added as a separate record, the source can be listed directly as a foreign key instead.\\nHowever a transcript-to-gene many-to-many relatioship is used instead.',
  `name` VARCHAR(45) NOT NULL,
  `type_key` VARCHAR(45) NOT NULL,
  `type_value` VARCHAR(45) CHARACTER SET 'ascii' COLLATE 'ascii_bin' NOT NULL,
  `lid` INT UNSIGNED NULL,
  `gene_id` VARCHAR(50) NOT NULL DEFAULT 'gene_id as it appears in the gtf',
  PRIMARY KEY (`gid`),
  UNIQUE INDEX `gid_UNIQUE` (`gid` ASC) VISIBLE,
  INDEX `fk_Genes_source_idx` (`source_id` ASC) VISIBLE,
  INDEX `fk_Gene_type_idx` (`type_key` ASC, `type_value` ASC) VISIBLE,
  INDEX `fk_Gene_locus_idx` (`lid` ASC) VISIBLE,
  CONSTRAINT `fk_Genes_source`
    FOREIGN KEY (`source_id`)
    REFERENCES `CHESS_DB`.`sources` (`source_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Gene_type`
    FOREIGN KEY (`type_key` , `type_value`)
    REFERENCES `CHESS_DB`.`attribute_value_map` (`key_name` , `og_value`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Gene_locus`
    FOREIGN KEY (`lid`)
    REFERENCES `CHESS_DB`.`locus` (`lid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CHESS_DB`.`dataset`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CHESS_DB`.`dataset` ;

CREATE TABLE IF NOT EXISTS `CHESS_DB`.`dataset` (
  `dataset_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `sample_count` INT NOT NULL COMMENT 'total number of samples in the dataset',
  `information` TEXT NOT NULL,
  PRIMARY KEY (`dataset_id`),
  UNIQUE INDEX `datasetID_UNIQUE` (`dataset_id` ASC) VISIBLE,
  UNIQUE INDEX `name_UNIQUE` (`name` ASC) VISIBLE)
ENGINE = InnoDB
COMMENT = 'Holds information about RNAseq datasets which can be added to store expression data and possibly other information about transcripts \\nbased on the sequencing data available';


-- -----------------------------------------------------
-- Table `CHESS_DB`.`transcript_dataset`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CHESS_DB`.`transcript_dataset` ;

CREATE TABLE IF NOT EXISTS `CHESS_DB`.`transcript_dataset` (
  `tid` INT UNSIGNED NOT NULL,
  `dataset_id` INT UNSIGNED NOT NULL,
  `sample_count` INT UNSIGNED NOT NULL,
  `expression_mean` FLOAT NOT NULL,
  `expression_std` FLOAT NOT NULL,
  PRIMARY KEY (`tid`, `dataset_id`),
  INDEX `fk_TranscriptToDataset_dataset_idx` (`dataset_id` ASC) VISIBLE,
  INDEX `sampleCount` (`sample_count` ASC) VISIBLE,
  INDEX `expressionMean` (`expression_mean` ASC) VISIBLE,
  CONSTRAINT `fk_TranscriptToDataset_tid`
    FOREIGN KEY (`tid`)
    REFERENCES `CHESS_DB`.`transcript` (`tid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_TranscriptToDataset_dataset`
    FOREIGN KEY (`dataset_id`)
    REFERENCES `CHESS_DB`.`dataset` (`dataset_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'stores expression data for the transcripts and links it to the information about the dataset that generated corroborating data';


-- -----------------------------------------------------
-- Table `CHESS_DB`.`tx_dbxref`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CHESS_DB`.`tx_dbxref` ;

CREATE TABLE IF NOT EXISTS `CHESS_DB`.`tx_dbxref` (
  `tid` INT UNSIGNED NOT NULL,
  `source_id` INT UNSIGNED NOT NULL,
  `start` INT UNSIGNED NOT NULL COMMENT 'prime3 and prime5 (3\\\' and 5\\\') are coordinates specific to the version of the transcript on this particular source',
  `end` INT UNSIGNED NOT NULL COMMENT 'start and end (5\\\' and 3\\\') are coordinates specific to the version of the transcript on this particular source.\\nThe main entry for the tid in Transcripts extends to the farthest ends of referencing transcripts.',
  `score` SMALLINT UNSIGNED NULL DEFAULT NULL,
  `type_key` VARCHAR(45) NOT NULL,
  `type_value` VARCHAR(45) CHARACTER SET 'ascii' COLLATE 'ascii_bin' NOT NULL,
  `cds_start` INT UNSIGNED NULL,
  `cds_end` INT UNSIGNED NULL,
  `gid` INT UNSIGNED NOT NULL,
  `transcript_id` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`tid`, `source_id`, `transcript_id`),
  INDEX `fk_TxDBXREF_source_idx` (`source_id` ASC) VISIBLE,
  INDEX `fk_TxDBXREF_type_idx` (`type_key` ASC, `type_value` ASC) VISIBLE,
  INDEX `fk_tx_dbxref_gene_idx` (`gid` ASC) VISIBLE,
  CONSTRAINT `fk_TxDBXREF_tid`
    FOREIGN KEY (`tid`)
    REFERENCES `CHESS_DB`.`transcript` (`tid`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_TxDBXREF_source`
    FOREIGN KEY (`source_id`)
    REFERENCES `CHESS_DB`.`sources` (`source_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_TxDBXREF_type`
    FOREIGN KEY (`type_key` , `type_value`)
    REFERENCES `CHESS_DB`.`attribute_value_map` (`key_name` , `og_value`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_tx_dbxref_gene`
    FOREIGN KEY (`gid`)
    REFERENCES `CHESS_DB`.`gene` (`gid`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'This table is used to build a transcript map between sources.\\nFor a transcript we can tell all sources and corresponding ID for each along with additional information that may vary from source to source.\\nWhile the Transcripts table provides a high-level overview of the transcripts, deduplicating many entries and hiding some of the information';


-- -----------------------------------------------------
-- Table `CHESS_DB`.`tx_attribute`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CHESS_DB`.`tx_attribute` ;

CREATE TABLE IF NOT EXISTS `CHESS_DB`.`tx_attribute` (
  `tid` INT UNSIGNED NOT NULL,
  `source_id` INT UNSIGNED NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `value` VARCHAR(45) CHARACTER SET 'ascii' COLLATE 'ascii_bin' NOT NULL DEFAULT '',
  `value_text` TEXT NULL,
  `key_text` VARCHAR(45) NOT NULL COMMENT 'The original value of the key. This is done to bypass key duplications. when two synonymous keys with the same value appear within the same source for the same transcript. This needs to be reimplemented in the future.',
  `transcript_id` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`tid`, `source_id`, `name`, `value`, `key_text`, `transcript_id`),
  INDEX `fk_TXAttribute_attr_idx` (`name` ASC, `value` ASC) VISIBLE,
  INDEX `fk_Attributes_tidsource_idx` (`tid` ASC, `source_id` ASC, `transcript_id` ASC) VISIBLE,
  CONSTRAINT `fk_Attributes_tidsource`
    FOREIGN KEY (`tid` , `source_id` , `transcript_id`)
    REFERENCES `CHESS_DB`.`tx_dbxref` (`tid` , `source_id` , `transcript_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_TXAttribute_attr`
    FOREIGN KEY (`name` , `value`)
    REFERENCES `CHESS_DB`.`attribute_value_map` (`key_name` , `og_value`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Table listing all possible attribute keys stored across all datasets.\\nAutoupdates timestamps in the transcripts on insert/update via triggers.';


-- -----------------------------------------------------
-- Table `CHESS_DB`.`sequence_id_map`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CHESS_DB`.`sequence_id_map` ;

CREATE TABLE IF NOT EXISTS `CHESS_DB`.`sequence_id_map` (
  `assembly_id` INT UNSIGNED NOT NULL,
  `sequence_id` INT UNSIGNED NOT NULL COMMENT 'sequenceID must always be convertible to INT',
  `nomenclature` VARCHAR(45) NOT NULL COMMENT 'name of the nomenclature',
  `sequence_name` VARCHAR(45) NOT NULL COMMENT 'another name for the name',
  PRIMARY KEY (`assembly_id`, `sequence_id`, `nomenclature`),
  CONSTRAINT `fk_SequenceIDMap_assembly`
    FOREIGN KEY (`assembly_id` , `sequence_id`)
    REFERENCES `CHESS_DB`.`sequence_id` (`assembly_id` , `sequence_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Conversion table between different nomenclatures of the same assembly.\\nProvides a map between different names of the same sequence on the same assembly.';


-- -----------------------------------------------------
-- Table `CHESS_DB`.`configurations`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CHESS_DB`.`configurations` ;

CREATE TABLE IF NOT EXISTS `CHESS_DB`.`configurations` (
  `configuration_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nomenclature` VARCHAR(45) NULL DEFAULT NULL,
  `has_cds` TINYINT NULL DEFAULT NULL,
  `name` VARCHAR(45) NOT NULL,
  `description` TEXT NOT NULL,
  PRIMARY KEY (`configuration_id`),
  UNIQUE INDEX `configuration_id_UNIQUE` (`configuration_id` ASC) VISIBLE,
  UNIQUE INDEX `name_UNIQUE` (`name` ASC) VISIBLE)
ENGINE = InnoDB
COMMENT = 'This table contains ready-to-use configurations which can be immediately transformed into a set of files.\\nThe simplest configuration would be to describe each source as it appeared in the input.\\nBut more sophisticated configurations can be created.';


-- -----------------------------------------------------
-- Table `CHESS_DB`.`configuration_sources_exclude`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CHESS_DB`.`configuration_sources_exclude` ;

CREATE TABLE IF NOT EXISTS `CHESS_DB`.`configuration_sources_exclude` (
  `configuration_id` INT UNSIGNED NOT NULL,
  `source_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`configuration_id`, `source_id`),
  INDEX `fk_Configuration_SourcesExclude_source_id_idx` (`source_id` ASC) VISIBLE,
  CONSTRAINT `fk_Configuration_SourcesExclude_configuration_id`
    FOREIGN KEY (`configuration_id`)
    REFERENCES `CHESS_DB`.`configurations` (`configuration_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Configuration_SourcesExclude_source_id`
    FOREIGN KEY (`source_id`)
    REFERENCES `CHESS_DB`.`sources` (`source_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'This table links configuration to which sources are to be included in the configuration\\nThe following values can be set:\\n';


-- -----------------------------------------------------
-- Table `CHESS_DB`.`configuration_transcript_types`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CHESS_DB`.`configuration_transcript_types` ;

CREATE TABLE IF NOT EXISTS `CHESS_DB`.`configuration_transcript_types` (
  `configuration_id` INT UNSIGNED NOT NULL,
  `type` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`configuration_id`, `type`),
  CONSTRAINT `fk_Configuration_TranscriptTypes_configuration_id`
    FOREIGN KEY (`configuration_id`)
    REFERENCES `CHESS_DB`.`configurations` (`configuration_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CHESS_DB`.`configuration_gene_types`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CHESS_DB`.`configuration_gene_types` ;

CREATE TABLE IF NOT EXISTS `CHESS_DB`.`configuration_gene_types` (
  `configuration_id` INT UNSIGNED NOT NULL,
  `type` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`configuration_id`, `type`),
  CONSTRAINT `fk_Configuration_GeneTypes_configuration_id`
    FOREIGN KEY (`configuration_id`)
    REFERENCES `CHESS_DB`.`configurations` (`configuration_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CHESS_DB`.`configuration_datasets`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CHESS_DB`.`configuration_datasets` ;

CREATE TABLE IF NOT EXISTS `CHESS_DB`.`configuration_datasets` (
  `configuration_source` INT NOT NULL,
  PRIMARY KEY (`configuration_source`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CHESS_DB`.`configuration_sources_include`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CHESS_DB`.`configuration_sources_include` ;

CREATE TABLE IF NOT EXISTS `CHESS_DB`.`configuration_sources_include` (
  `configuration_id` INT UNSIGNED NOT NULL,
  `source_id` INT UNSIGNED NOT NULL,
  `rank` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`configuration_id`, `source_id`),
  INDEX `fk_Configuration_SourcesInclude_source_id_idx` (`source_id` ASC) VISIBLE,
  CONSTRAINT `fk_Configuration_SourcesInclude_configuration_id`
    FOREIGN KEY (`configuration_id`)
    REFERENCES `CHESS_DB`.`configurations` (`configuration_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Configuration_SourcesInclude_source_id`
    FOREIGN KEY (`source_id`)
    REFERENCES `CHESS_DB`.`sources` (`source_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'This table links configuration to which sources are to be included in the configuration\\nThe following values can be set:\\n';


-- -----------------------------------------------------
-- Table `CHESS_DB`.`attribute_key_map`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CHESS_DB`.`attribute_key_map` ;

CREATE TABLE IF NOT EXISTS `CHESS_DB`.`attribute_key_map` (
  `og_key` VARCHAR(45) NOT NULL,
  `std_key` VARCHAR(45) NOT NULL,
  UNIQUE INDEX `og_key_UNIQUE` (`og_key` ASC) VISIBLE,
  PRIMARY KEY (`og_key`),
  INDEX `fk_AttributeKeyMap_key_idx` (`std_key` ASC) VISIBLE,
  CONSTRAINT `fk_AttributeKeyMap_key`
    FOREIGN KEY (`std_key`)
    REFERENCES `CHESS_DB`.`attribute_key` (`key_name`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Map linking various names to a standard set of attribute keys';


-- -----------------------------------------------------
-- Table `CHESS_DB`.`intron`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CHESS_DB`.`intron` ;

CREATE TABLE IF NOT EXISTS `CHESS_DB`.`intron` (
  `iid` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `assembly_id` INT UNSIGNED NOT NULL,
  `sequence_id` INT UNSIGNED NOT NULL,
  `strand` VARCHAR(45) NOT NULL,
  `start` VARCHAR(45) NOT NULL,
  `end` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`iid`),
  UNIQUE INDEX `unique_intron_coordinates` (`sequence_id` ASC, `strand` ASC, `assembly_id` ASC, `start` ASC, `end` ASC) VISIBLE,
  INDEX `fk_Intron_sequence_idx` (`assembly_id` ASC, `sequence_id` ASC) VISIBLE,
  CONSTRAINT `fk_Intron_sequence`
    FOREIGN KEY (`assembly_id` , `sequence_id`)
    REFERENCES `CHESS_DB`.`sequence_id` (`assembly_id` , `sequence_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CHESS_DB`.`transcript_intron`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CHESS_DB`.`transcript_intron` ;

CREATE TABLE IF NOT EXISTS `CHESS_DB`.`transcript_intron` (
  `tid` INT UNSIGNED NOT NULL,
  `iid` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`tid`, `iid`),
  INDEX `fk_TranscriptToIntron_iid_idx` (`iid` ASC) VISIBLE,
  CONSTRAINT `fk_TranscriptToIntron_tid`
    FOREIGN KEY (`tid`)
    REFERENCES `CHESS_DB`.`transcript` (`tid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_TranscriptToIntron_iid`
    FOREIGN KEY (`iid`)
    REFERENCES `CHESS_DB`.`intron` (`iid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Maps introns to individual transcripts. Many-to-many. Used to extract intron chains for each transcript';


-- -----------------------------------------------------
-- Table `CHESS_DB`.`intron_dataset`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CHESS_DB`.`intron_dataset` ;

CREATE TABLE IF NOT EXISTS `CHESS_DB`.`intron_dataset` (
  `iid` INT UNSIGNED NOT NULL,
  `dataset_id` INT UNSIGNED NOT NULL,
  `coverage` INT NULL,
  `conservation` INT NULL,
  PRIMARY KEY (`iid`, `dataset_id`),
  INDEX `fk_IntronToDataset_dataset_idx` (`dataset_id` ASC) VISIBLE,
  CONSTRAINT `fk_IntronToDataset_intron`
    FOREIGN KEY (`iid`)
    REFERENCES `CHESS_DB`.`intron` (`iid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_IntronToDataset_dataset`
    FOREIGN KEY (`dataset_id`)
    REFERENCES `CHESS_DB`.`dataset` (`dataset_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `CHESS_DB`;

DELIMITER $$

USE `CHESS_DB`$$
DROP TRIGGER IF EXISTS `CHESS_DB`.`transcript_checkCoordinates_BEFORE_INSERT` $$
USE `CHESS_DB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `CHESS_DB`.`transcript_checkCoordinates_BEFORE_INSERT` BEFORE INSERT ON `transcript` FOR EACH ROW
BEGIN
	-- Verifies validity of coordinates
    -- Check that sequenceID is valid for the given assembly
    -- Checks that coordinates are within bounds for that sequence
    -- Checks that start < end
    DECLARE sequence_count INT;
    DECLARE sequence_length INT;
    
    SELECT COUNT(*) INTO sequence_count
    FROM sequence_id
    WHERE assembly_id = NEW.assembly_id AND sequence_id = NEW.sequence_id;
    
    IF sequence_count = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'sequence_id does not exist for the specified assembly';
    END IF;
    
    IF sequence_count > 0 THEN
        SELECT length INTO sequence_length
        FROM sequence_id
        WHERE assembly_id = NEW.assembly_id AND sequence_id = NEW.sequence_id;
        
        IF NEW.start >= NEW.end THEN
			SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'start >= end';
		END IF;
        
        IF NEW.start < 1 OR NEW.start > sequence_length OR NEW.end > sequence_length THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Start and/or end coordinates are out of bounds for the specified sequence';
        END IF;
    END IF;
END$$


USE `CHESS_DB`$$
DROP TRIGGER IF EXISTS `CHESS_DB`.`tx_ai_sources_last_updated` $$
USE `CHESS_DB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `CHESS_DB`.`tx_ai_sources_last_updated` AFTER INSERT ON `transcript` FOR EACH ROW
BEGIN
	-- 'propagates lastUpdated to the Source through dbxref'
    UPDATE sources
    SET last_updated = CURRENT_TIMESTAMP
    WHERE source_id IN (SELECT source_id FROM tx_dbxref WHERE tid = NEW.tid);
END$$


USE `CHESS_DB`$$
DROP TRIGGER IF EXISTS `CHESS_DB`.`transcript_checkCoordinates_BEFORE_UPDATE` $$
USE `CHESS_DB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `CHESS_DB`.`transcript_checkCoordinates_BEFORE_UPDATE` BEFORE UPDATE ON `transcript` FOR EACH ROW
BEGIN
	-- Verifies validity of coordinates
    -- Check that sequence_id is valid for the given assembly
    -- Checks that coordinates are within bounds for that sequence
    -- Checks that start < end
    DECLARE sequence_count INT;
    DECLARE sequence_length INT;
    
    SELECT COUNT(*) INTO sequence_count
    FROM sequence_id
    WHERE assembly_id = NEW.assembly_id AND sequence_id = NEW.sequence_id;
    
    IF sequence_count = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'sequence_id does not exist for the specified assembly';
    END IF;
    
    IF sequence_count > 0 THEN
        SELECT length INTO sequence_length
        FROM sequence_id
        WHERE assembly_id = NEW.assembly_id AND sequence_id = NEW.sequence_id;
        
        IF NEW.start >= NEW.end THEN
			SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'start >= end';
		END IF;
        
        IF NEW.start < 1 OR NEW.start > sequence_length OR NEW.end > sequence_length THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Start and/or end coordinates are out of bounds for the specified sequence';
        END IF;
    END IF;
END$$


USE `CHESS_DB`$$
DROP TRIGGER IF EXISTS `CHESS_DB`.`update_sources_last_updated_after_update_in_Transcript` $$
USE `CHESS_DB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `CHESS_DB`.`update_sources_last_updated_after_update_in_Transcript` AFTER UPDATE ON `transcript` FOR EACH ROW
BEGIN
	-- 'propagates lastUpdated to the Source through dbxref'
    UPDATE sources
    SET last_updated = CURRENT_TIMESTAMP
    WHERE source_id IN (SELECT source_id FROM tx_dbxref WHERE tid = NEW.tid);
END$$


USE `CHESS_DB`$$
DROP TRIGGER IF EXISTS `CHESS_DB`.`update_sources_last_updated_after_delete_in_Transcript` $$
USE `CHESS_DB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `CHESS_DB`.`update_sources_last_updated_after_delete_in_Transcript` AFTER DELETE ON `transcript` FOR EACH ROW
BEGIN
	-- 'propagates lastUpdated to the Source through dbxref'
    UPDATE sources
    SET last_updated = CURRENT_TIMESTAMP
    WHERE source_id IN (SELECT source_id FROM tx_dbxref WHERE tid = OLD.tid);
END$$


USE `CHESS_DB`$$
DROP TRIGGER IF EXISTS `CHESS_DB`.`attribute_key_AI` $$
USE `CHESS_DB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `CHESS_DB`.`attribute_key_AI` AFTER INSERT ON `attribute_key` FOR EACH ROW
BEGIN
	IF NEW.variable = 1 THEN
		-- Insert into attribute_key_value
		INSERT INTO attribute_key_value (key_name, value) VALUES (NEW.key_name, '');
		-- Insert into attribute_value_map
		INSERT INTO attribute_value_map (key_name, og_value, std_value) VALUES (NEW.key_name, '', '');
	END IF;
END$$


USE `CHESS_DB`$$
DROP TRIGGER IF EXISTS `CHESS_DB`.`attribute_key_BEFORE_UPDATE` $$
USE `CHESS_DB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `CHESS_DB`.`attribute_key_BEFORE_UPDATE` BEFORE UPDATE ON `attribute_key` FOR EACH ROW
BEGIN
    SIGNAL SQLSTATE '45000'
	SET MESSAGE_TEXT = 'Manually updating "variable" is disallowed';
END$$


USE `CHESS_DB`$$
DROP TRIGGER IF EXISTS `CHESS_DB`.`attribute_key_value_BEFORE_INSERT` $$
USE `CHESS_DB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `CHESS_DB`.`attribute_key_value_BEFORE_INSERT` BEFORE INSERT ON `attribute_key_value` FOR EACH ROW
BEGIN
-- 1). Before insert into the values table, if the corresponding key has variable set to 1 
-- then value must be set to empty string ''. 
-- 2) before insert into the values table if the corresponding key has variable set to 0 
-- then there can not be an entry with NULL in value.
	DECLARE v_variable TINYINT;
    
    -- Get the variable value for the corresponding key
    SELECT `variable` INTO v_variable
    FROM `attribute_key`
    WHERE `key_name` = NEW.`key_name`;
    
    -- Check conditions based on the variable value
    IF v_variable = 1 THEN
        -- If variable is 1, set og_value and std_value to NULL
        SET NEW.`value` = '', NEW.`value` = '';
    ELSE
        -- If variable is 0, ensure neither og_value nor std_value is NULL
        IF NEW.`value` = '' THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Invalid values for og_value or std_value';
        END IF;
    END IF;
END$$


USE `CHESS_DB`$$
DROP TRIGGER IF EXISTS `CHESS_DB`.`attribute_value_map_BI` $$
USE `CHESS_DB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `CHESS_DB`.`attribute_value_map_BI` BEFORE INSERT ON `attribute_value_map` FOR EACH ROW
BEGIN
-- 1). Before insert into the values table, if the corresponding key has variable set to 1 
-- then both og_value and std_value must be set to empty string ''. 
-- 2) before insert into the values table if the corresponding key has variable set to 0 
-- then there can not be an entry with NULL in either og_value or std_value or both.
	DECLARE v_variable TINYINT;
    
    -- Get the variable value for the corresponding key
    SELECT `variable` INTO v_variable
    FROM `attribute_key`
    WHERE `key_name` = NEW.`key_name`;
    
    -- Check conditions based on the variable value
    IF v_variable = 1 THEN
        -- If variable is 1, set og_value and std_value to NULL
        SET NEW.`og_value` = '', NEW.`std_value` = '';
    ELSE
        -- If variable is 0, ensure neither og_value nor std_value is NULL
        IF NEW.`og_value` = '' OR NEW.`std_value` = '' THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Invalid values for og_value or std_value';
        END IF;
    END IF;
END$$


USE `CHESS_DB`$$
DROP TRIGGER IF EXISTS `CHESS_DB`.`tx_dbxref_setEnds_AFTER_INSERT` $$
USE `CHESS_DB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `CHESS_DB`.`tx_dbxref_setEnds_AFTER_INSERT` AFTER INSERT ON `tx_dbxref` FOR EACH ROW
BEGIN
	-- updates record for the tid in Transcripts to extend towards the farthest 3' and 5' ends
    UPDATE transcript
    SET start = LEAST(NEW.start, (SELECT * FROM (SELECT start FROM transcript WHERE tid = NEW.tid) as transcript_start)),
        end = GREATEST(NEW.end, (SELECT * FROM (SELECT end FROM transcript WHERE tid = NEW.tid) as transcript_end))
    WHERE tid = NEW.tid;
END$$


USE `CHESS_DB`$$
DROP TRIGGER IF EXISTS `CHESS_DB`.`tx_dbxref_setEnds_AFTER_UPDATE` $$
USE `CHESS_DB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `CHESS_DB`.`tx_dbxref_setEnds_AFTER_UPDATE` AFTER UPDATE ON `tx_dbxref` FOR EACH ROW
BEGIN
	-- updates record for the tid in Transcripts to extend towards the farthest 3' and 5' ends
    DECLARE min_start INT;
    DECLARE max_end INT;

    SELECT MAX(end) INTO max_end
    FROM tx_dbxref
    WHERE tid = NEW.tid;
    
    SELECT MIN(start) INTO min_start
    FROM tx_dbxref
    WHERE tid = NEW.tid;

    UPDATE transcript
    SET end = max_end
    WHERE tid = NEW.tid;
    
    UPDATE transcript
    SET start = min_start
    WHERE tid = NEW.tid;
END$$


USE `CHESS_DB`$$
DROP TRIGGER IF EXISTS `CHESS_DB`.`tx_attributes_BI` $$
USE `CHESS_DB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `CHESS_DB`.`tx_attributes_BI` BEFORE INSERT ON `tx_attribute` FOR EACH ROW
BEGIN
-- Check that one and only one of the "value" and "value_text" is set to empty string ''. 
-- Only one of these two fields can have a value. 
-- This is determined by the key - if the key has "variable" field set to 1, 
-- then "value_text" has to have proper value and "value" should be set to empty string ''. 
-- Otherwise, "value" needs to be set and "value_text" set to empty string ''
	DECLARE v_variable TINYINT;

    -- Get the variable value for the corresponding key
    SELECT `variable` INTO v_variable 
    FROM `attribute_key` k 
    JOIN attribute_key_map m 
    ON k.`key_name`=m.`std_key` 
    WHERE m.`og_key` = NEW.`name`;

    -- Check conditions based on the variable value
    IF v_variable = 1 THEN
        -- If variable is 1, value_text must have a value, and value should be empty string ''
        IF NEW.`value` != '' OR NEW.`value_text` = '' THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Invalid values for value and value_text based on key variable setting';
        END IF;
    ELSE
        -- If variable is 0, value must have a value, and value_text should be empty string ''
        IF NEW.`value` = '' OR NEW.`value_text` != '' THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Invalid values for value and value_text based on key variable setting';
        END IF;
    END IF;
END$$


USE `CHESS_DB`$$
DROP TRIGGER IF EXISTS `CHESS_DB`.`tx_attribute_AI` $$
USE `CHESS_DB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `CHESS_DB`.`tx_attribute_AI` AFTER INSERT ON `tx_attribute` FOR EACH ROW
BEGIN
	UPDATE transcript
    SET last_updated = CURRENT_TIMESTAMP
    WHERE tid = NEW.tid;
END$$


USE `CHESS_DB`$$
DROP TRIGGER IF EXISTS `CHESS_DB`.`tx_attribute_AU` $$
USE `CHESS_DB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `CHESS_DB`.`tx_attribute_AU` AFTER UPDATE ON `tx_attribute` FOR EACH ROW
BEGIN
    UPDATE transcript
    SET last_updated = CURRENT_TIMESTAMP
    WHERE tid = NEW.tid;
END$$


USE `CHESS_DB`$$
DROP TRIGGER IF EXISTS `CHESS_DB`.`tx_attribute_AD` $$
USE `CHESS_DB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `CHESS_DB`.`tx_attribute_AD` AFTER DELETE ON `tx_attribute` FOR EACH ROW
BEGIN
	UPDATE transcript
    SET last_updated = CURRENT_TIMESTAMP
    WHERE tid = OLD.tid;
END$$


DELIMITER ;
SET SQL_MODE = '';
DROP USER IF EXISTS chess_master;
SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
CREATE USER 'chess_master' IDENTIFIED BY 'qwerty';

GRANT ALL ON `default_schema`.* TO 'chess_master';
GRANT ALL ON `CHESS_DB`.* TO 'chess_master';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

