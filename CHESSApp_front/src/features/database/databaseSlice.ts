import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit"
import { RootState, AppThunk } from "../../app/store"
import { loadDBData } from "./databaseAPI"

export interface DatabaseState {
  value: number
  status: "idle" | "loading" | "failed"
}

const initialState: DatabaseState = {
  value: 0,
  status: "idle",
}

// updates the state of the database asynchronously
export const reloadDB = createAsyncThunk(
  "database/loadDBData",
  async () => {
    const response = await loadDBData()
    return response.data
  },
)

export const databaseSlice = createSlice({
  name: "database",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = "loading"
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = "idle"
  //       state.value += action.payload
  //     })
  //     .addCase(incrementAsync.rejected, (state) => {
  //       state.status = "failed"
  //     })
  // },
})

export const {incrementByAmount } = databaseSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counter.value

export default databaseSlice.reducer
